var editorDiv=null;
openEditorDiv=function(){
    if(editorDiv==null){
    editorDiv=document.createElement("div");
    editorDiv.id="uploadDiv";
    editorDiv.className="uploadDiv generic_trans";
    document.body.appendChild(editorDiv);
    var close=document.createElement("div");
    close.className="closeEditor";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeDivEditor(editorDiv) };
    if(lanTemp=="es"){
        editorDiv.innerHTML = "<div style='width:100%;height:100%'><iframe src='../editor/enterUsu.php' style='width:100%;height:100%' frameBorder='0'/></div>";
    }else{
        editorDiv.innerHTML = "<div style='width:100%;height:100%'><iframe src='../../editor/enterUsu.php' style='width:100%;height:100%' frameBorder='0'/></div>";
    }
    editorDiv.appendChild(close);
    setTimeout(function() {
            editorDiv.style.left = "0%";
            endTrans = function() {
                endTrans = null;
            }
        }, 10);
    }else{
        editorDiv.style.left="0%";
    }
}
closeDivEditor = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        //document.body.removeChild(div);
        endTrans = null;
    };
};
var assocPage=null;
var userClip=null;
var bloc=null;
var madeSelection=false;
var _usersDiv=null;
var _blocsDiv=null;
var _clipsDiv=null;
showUsersList=function(_assocPage){
   
    assocPage=_assocPage;
    var usersDiv=document.createElement("div");
    _usersDiv=usersDiv;
    toClose=usersDiv;
    usersDiv.id="usersDiv";
    usersDiv.className="usersDiv generic_trans";
    document.body.appendChild(usersDiv);
    var close=document.createElement("div");
    close.className="close";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeDivUsers(usersDiv) };
    var usersDivContent=document.createElement("div");
    usersDivContent.id="usersDivContent";
    usersDivContent.className="usersDivContent";
    usersDiv.appendChild(usersDivContent);
    usersDiv.appendChild(close);
    loadUsers(close);
}
closeDivUsers = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
    };
};

function users(){
    var self = this;
    self.tabs = ko.observableArray();
    self.showBlocs = function(tab){
        showBlocs(tab.rot);
    }
    
    self.close=null;
}
var iniUsers=new users();
loadUsers=function(close){
    $("#usersDivContent").load("./pages/users.html", function() {
            var refresh=new Date().getTime();
            $.ajax({
                    url: "./controller/environment/dirs/usersList.php?"+refresh,
                    dataType: "text",
                    success: function(data) {
                        
                        var usersArray=data.split(",");
                        var usersTabs=new Array();
                        ko.applyBindings(iniUsers, document.getElementById("users_list"));
                        for(var j in usersArray){
                            usersTabs[j]={};
                            usersTabs[j]["rot"]=usersArray[j];
                        }
                        iniUsers.tabs(usersTabs);
                        iniUsers.close=close;
                        setTimeout(function() {
                            toClose.style.left = "0%";
                            endTrans = function() {
                                endTrans = null;
                            }
                        }, 10);
                    }
                }); 
        });
}
//----------blocs
showBlocs=function(_user){
    var blocsDiv=document.createElement("div");
    _blocsDiv=blocsDiv;
    blocsDiv.id="blocsDiv";
    blocsDiv.className="blocsDiv generic_trans";
    document.body.appendChild(blocsDiv);
    toClose=blocsDiv;
    var close=document.createElement("div");
    close.className="close";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeBlocsDiv(blocsDiv) };
    var blocsDivContent=document.createElement("div");
    blocsDivContent.id="blocsDivContent";
    blocsDivContent.className="blocsDivContent";
    blocsDiv.appendChild(blocsDivContent);
    blocsDiv.appendChild(close);
    loadBlocs(_user,close);
}
closeBlocsDiv = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    if(madeSelection){
            document.body.removeChild(_usersDiv);
             madeSelection=false;
        }
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
    };
};

function blocs(){
    var self = this;
    self.tabs = ko.observableArray();
    self.showClips = function(tab){
        showClips(tab.rot);
    }
    self.emptyArray=ko.observable(self.tabs.length);
}
function blocs_home(){
    var self = this;
    self.tabs = ko.observableArray();
    self.close=null;
    self.selectClip = function(tab){
        madeSelection=true;
        iniBlocsHome.close.click();
        document.getElementById("clipbloc_" + assocPage).value = userClip + "/xml/" + tab.rot;
        document.getElementById("clipImg_" + assocPage).setAttribute("src",'../editor/rmt/'+tab.img+'/img.png');
        $("#clipbloc_" + assocPage).trigger("change");
    }
}
var iniBlocs=new blocs();
var iniBlocsHome=new blocs_home();
loadBlocs=function(_user,close){
    userClip=_user;
    $("#blocsDivContent").load("./pages/blocs.html", function() {
        document.getElementById("userBlocs").innerHTML=_user;
            var refresh=new Date().getTime();
            $.ajax({
                    url: "./controller/environment/dirs/blocsList.php?user="+_user+"&refresh="+refresh,
                    dataType: "text",
                    success: function(data) {
                        var dataArray=data.split("::");
                        
                        var blocsArray=dataArray[0].split(",");
                        var homeArray=dataArray[1].split(",");
                        
                        var homeTabs=new Array();
                        for(var j in homeArray){
                            homeTabs[j]={};
                            homeTabs[j]["rot"]=homeArray[j].split(".")[0];
                            homeTabs[j]["home"]=_user;
                            homeTabs[j]["img"]=_user+"/xml/"+homeTabs[j]["rot"];
                        }
                        
                        var blocsTabs=new Array();
                        for(var j in blocsArray){
                            blocsTabs[j]={};
                            blocsTabs[j]["rot"]=blocsArray[j];
                            blocsTabs[j]["home"]=_user;
                        }
                       
                        ko.applyBindings(iniBlocsHome, document.getElementById("blocs_list_home"));
                        ko.applyBindings(iniBlocs, document.getElementById("blocs_list"));
                        
                       
                        iniBlocsHome.close=close;
                        iniBlocsHome.tabs(homeTabs);
                        iniBlocs.tabs(blocsTabs);
                        setTimeout(function() {
                            toClose.style.left = "0%";
                            endTrans = function() {
                                endTrans = null;
                                //loadBlocs();
                            }
                        }, 10);
                    }
                }); 
        });
}

//-----------clips
function clips(){
    var self = this;
    self.tabs = ko.observableArray();
    self.selectClip = function(tab){
        madeSelection=true;
        iniClips.close.click();
        document.getElementById("clipbloc_"+assocPage).value=userClip+"/"+bloc+"/xml/"+tab.rot;
        document.getElementById("clipImg_" + assocPage).setAttribute("src",'../editor/rmt/'+tab.img+'/img.png');
        $("#clipbloc_" + assocPage).trigger("change");
    }
    self.close=null;
}
var iniClips=new clips();
showClips=function(_bloc){
    bloc=_bloc;
    var clipsDiv=document.createElement("div");
    _clipsDiv=clipsDiv;
    clipsDiv.id="clipsDiv";
    clipsDiv.className="clipsDiv generic_trans";
    document.body.appendChild(clipsDiv);
    toClose=clipsDiv;
    var close=document.createElement("div");
    close.className="close";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeClipsDiv(clipsDiv) };
    var clipsDivContent=document.createElement("div");
    clipsDivContent.id="clipsDivContent";
    clipsDivContent.className="clipsDivContent";
    clipsDiv.appendChild(clipsDivContent);
    clipsDiv.appendChild(close);
    loadClips(close);
}
closeClipsDiv = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    if(madeSelection){
            document.body.removeChild(_usersDiv);
            document.body.removeChild(_blocsDiv);
            madeSelection=false;
        }
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
    };
};
loadClips=function(close){
    $("#clipsDivContent").load("./pages/clips.html", function() {
        document.getElementById("userClips").innerHTML=bloc;
            var refresh=new Date().getTime();
            $.ajax({
                    url: "./controller/environment/dirs/clipsList.php?user="+userClip+"&bloc="+bloc+"&refresh="+refresh,
                    dataType: "text",
                    success: function(data) {
                        var clipsArray=data.split(",");                        
                        var clipsTabs=new Array();
                        for(var j in clipsArray){
                            clipsTabs[j]={};
                            clipsTabs[j]["rot"]=clipsArray[j].split(".")[0];
                            clipsTabs[j]["img"]=userClip+"/"+bloc+"/xml/"+clipsTabs[j]["rot"];
                        }
                        ko.applyBindings(iniClips, document.getElementById("blocs_list_clips"));
                        iniClips.tabs(clipsTabs);
                        iniClips.close=close;
                        setTimeout(function() {
                            toClose.style.left = "0%";
                            endTrans = function() {
                                endTrans = null;
                                
                            }
                        }, 10);
                    }
                }); 
        });
}


/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//drop image proccess

var http = getXMLHTTPRequestPage(); // creo una instancia del objeto XMLHTTPRequest.
function getXMLHTTPRequestPage() {
  try {
    req = new XMLHttpRequest();
  } catch(err1) {
    try {
      req = new ActiveXObject("Msxml2.XMLHTTP");
    } catch (err2) {
      try {
        req = new ActiveXObject("Microsoft.XMLHTTP");
      } catch (err3) {
        req = false;
      }
    }
  }
  return req;
}

var dropURL=null;
var oriName=null;
var ext=null;
var imgPage=null;
saveImgFb = function(_target) {
    imgPage=_target.id.split("_")[1];
    var files = _target.files; // FileList object
    // Loop through the FileList and render image files as thumbnails.
    for (var i = 0, f; f = files[i]; i++) {
        // Only process image files.
        if (!f.type.match('image.*')) {
            continue;
        }
        var reader = new FileReader();
        reader.onloadend = this.onReaderLoadEnd;
        // Closure to capture the file information.
        reader.onload = (function(theFile) {
            dropURL = theFile.name;
            oriName = theFile.name;
            ext = theFile.name.split(".");
            return function(e) {
                // Render thumbnail.
                var span = document.createElement('span');
                span.innerHTML = ['<img class="thumb" src="', e.target.result,
                    '" title="', escape(theFile.name), '"/>'].join('');
                if (theFile.size > 400000) {
                    showAlert("La imagen es demasiado pesada. Redúcela y vuelve a intentarlo");
                } else if (theFile.size <= 400000 || theFile.size > 200000) {
                    showAlert("El tamaño de la imagen es alto, más de 200k. Puede tardar un poco en ser subida");
                    processImage(theFile);
                } else {
                    processImage(theFile);
                }
            };
        })(f);
        processImage(f);
    }
}
function  processImage(file) {
    if (!file.type.match('image.*')) {
        return;
    }
    var reader = new FileReader();
    reader.onloadend = this.onReaderLoadEnd;
    reader.readAsDataURL(file);

}
var saveImgPB = null;
var imgResults = new Object();
var imgName=null;
function onReaderLoadEnd(event) {
    if (user === "test") {
       alert(rots["testMode"][lanTemp]);
    } else {
        ImgTemp = event.target.result;
        var d = new Date();
        imgName = "fbImg";
        var httpTemp = getXMLHTTPRequestPage();
        http = httpTemp;
        urlRecordPage = "controller/saveImgFb.php?name=" + oriName + "&ext=" + ext[1] + "&URL=../../pages/" + imgPage + "/&endName=" + imgName;
        var CUERPO = event.target.result;
        http.open("POST", urlRecordPage, true); // fijando los parametros para el env�o de datos.
        http.onreadystatechange = handlerDrop; // Qu� funci�n utilizar en caso de que el estado de la petici�n cambie.
        http.setRequestHeader('Content-Type', 'application/upload');
        http.send(CUERPO); // enviar petici�n.
    }
}

function handlerDrop() {
  if (http.readyState == 4) {
    if(http.status == 200) {
        var refresh=new Date().getTime();
         document.getElementById("fbImg_"+imgPage).setAttribute("src","../pages/"+imgPage+"/fbImg.jpg?"+refresh);
     }
  }
}

        



var lanEnv=document.URL.split("/");
var lanTemp= lanEnv[lanEnv.length-3];
if(lanTemp.length>2){
    lanTemp="es";
}

var rots={
    "security":{
        "button":{
            "es":"Cambiar",
            "en":"Change"
        },
        "rot":{
            "es":"Login",
            "en":"Login"
        },
        "newUser":{
            "es":"Nuevo Usuario",
            "en":"News User"
        },
        "user":{
            "es":"Usuario",
            "en":"User"
        },
        "newPWD":{
            "es":"Nueva Contraseña",
            "en":"New Password"
        },
        "PWD":{
            "es":"Contraseña",
            "en":"Password"
        },
        "changing":{
            "es":"Cambiando, por favor espere...",
            "en":"Changing, please wait..."
        },
        "changed":{
            "es": "Cambiado",
            "en": "Changed"
        }
    },
        "testMode":{
            "es": "Estas en modo test, no puedes grabar en este modo.",
            "en": "You are in testing mode, it is not possible record from this mode"
        }
}
controlSecurity=function(){
    var filesDiv=document.createElement("div");
    toClose=filesDiv;
    filesDiv.id="uploadDiv";
    filesDiv.className="uploadDiv generic_trans";
    document.body.appendChild(filesDiv);
    var close=document.createElement("div");
    close.className="close";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeDiv(filesDiv) };
     var usersList = "";
     usersList = '<form enctype="multipart/form-data" class="formulario">\
                            <div class="row-fluid" >\
                            <div class="col-md-offset-4 col-md-4">\
                            <ul>\
                                <li style="white-space:nowrap;font-size:30px !important;padding-top:50px">"'+rots.security.rot[lanTemp]+'"</li>\
                                <li>"'+rots.security.user[lanTemp]+'"</li>\
                                <li><input type="text" name="user" id="user" /></li>\
                                <li>"'+rots.security.PWD[lanTemp]+'"</li>\
                                <li  style="padding-bottom:10px !important"><input type="text" name="oldPassword" id="oldPassword" /></li>\
                                <li>"'+rots.security.newUser[lanTemp]+'"</li>\
                                <li  style="padding-bottom:10px !important"><input type="text" name="newUser" id="newUser" /></li>\
                                <li>"'+rots.security.newPWD[lanTemp]+'"</li>\
                                <li  style="padding-bottom:10px !important"><input type="text" name="newPassword" id="newPassword" /></li>\
                                <li style="padding-top:50px"><input class="submitPB"  type="button" value="'+rots.security.button[lanTemp]+'" />\
                            </ul>\
                            </form>\
                            <div class="messages"></div><br /><br />\
                            </div></div>';
   
    
    
    
    filesDiv.innerHTML = usersList;
    filesDiv.appendChild(close);
    setTimeout(function() {
            toClose.style.left = "0%";
            endTrans = function() {
                endTrans = null;
                formReadySecurity();
            }
        }, 10);
}
formReadySecurity=function(){
 
    $(".messages").hide();
    //queremos que esta variable sea global
    //al enviar el formulario
    $(':button').click(function(){
        if(user==="test"){
            alert(rots["testMode"][lanTemp]);
        }else{
            //validamos los campos
            var validateUser=validate(document.getElementById("user").value);
            var validateOldPWD=validate(document.getElementById("oldPassword").value);
            var validateNewUser=validate(document.getElementById("newUser").value);
            var validateNewPWD=validate(document.getElementById("newPassword").value);
            if (validateUser && validateNewUser && validateOldPWD && validateNewPWD) {
                //información del formulario
                var formData = {"user": validateUser, "oldPassword": validateOldPWD, "newUser":validateNewUser,"newPassword":validateNewPWD};
                //var formData = new FormData($(".formulario")[0]);
                var message = "";
                //hacemos la petición ajax 
                var obj = {};
                obj.user=validateUser;
                obj.oldPassword=validateOldPWD;
                obj.newUser=validateNewUser;
                obj.newPassword=validateNewPWD;
                $.ajax({
                    url: 'controller/environment/security/webService.php',
                    //usando GET because string has special characters
                    type: 'GET',
                    // Form data
                    //datos del formulario
                    //data: formData,
                    data: obj,
                    //mientras enviamos el archivo
                    beforeSend: function() {
                        message = $("<span class='before'>"+rots.security.changing[lanTemp]+"</span>");
                        showMessage(message)
                    },
                    //una vez finalizado correctamente
                    success: function(data) {
                        message = $("<span class='success'>"+rots.security.changed[lanTemp]+"</span>");
                        showMessage(message);
                    },
                    //si ha ocurrido un error
                    error: function() {
                        message = errorList["1"][lanTemp];
                        showMessage(message);
                    }
                });
            
        }else{
            message = errorList["0"][lanTemp];
            showMessage(message);
        }
        }

    });
}
 
//como la utilizamos demasiadas veces, creamos una función para 
//evitar repetición de código
function showMessage(message){
    $(".messages").html("").show();
    $(".messages").html(message);
}
 
//comprobamos si el archivo a subir es una imagen
//para visualizarla una vez haya subido
var charAcepted=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','ñ','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','0']
var Base64_chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var Base64_nostd="9ryoAuwh4RvMDPYKNltWUTaEqnBmbcSZFxfGg7iJj6QsVkOXzdH0C1p2e35L8I+/=";
validate=function(value){
    //var encrypt=My_btoa(value, Base64_nostd);
    var accepted = value;
    if (value == "") {
        accepted = false;
    } else {
        for (var j in value) {
            if (charAcepted.indexOf(value[j]) < 0) {
                accepted = false;
                break;
            }
        }
    }
    return accepted
}
var errorList={
    "0":{"es":"Ningún campo puede estar vacío.\nSólo se admiten carácteres\n de la a-z minúsculas\n y números 0-9","en":"No empty fields are accepted.\nOnly lowerCase a-z\n and numbers 0-9"},
    "1":{"es":"Se ha producido un error","en":"Error"}

}




function My_atob(base64_data, table) 
{ 
 var binary64=""; 
 var binary=""; 

 if(typeof(base64_data)!="string")return ""; 
 if(!(base64_data.length>0))return ""; 


 var tmp=""; 
 var c=""; 
 for(var x=0;x<base64_data.length;x++) 
 { 
  c=base64_data.charAt(x); 

  //These padding characters should be ignored: 
  /// 
    if(c=="=" || c==" " || c=="t" || c=="r" || c=="n")continue; 

  //Otherwise, look for the index in which the specified character is. 
  //That will be the value of the Base64 current character. 
  else 
   c=table.indexOf(c); 

  binary64+=StrPad(str=c.toString(2),padchar="0",paddedstrlen=6,direction="l"); 
   
  if(binary64.length>=8) 
  { 
   binary+=String.fromCharCode(parseInt(binary64.substring(0,8),2)); 

   binary64=binary64.substring(8,binary64.length); 
  } 
 } 

 return binary; 
} 






//Converts a raw "binary" data string into Base64 data: 
/// 
function My_btoa(binary_data, table) 
{ 
 var Base64_TBL=table.split(""); 

 //This will contain our resulting converted data 
 /// 
  var base64=""; 

 //Check that the data is a string and that its length is not 0: 
 /// 
  if(typeof(binary_data)!="string")return ""; 
  if(!(binary_data.length>0))return ""; 


 //Temporary 32-bit DWORD: 
 /// 
  var tmp=""; 


 //4-byte temporary Base64 chunk for each 3 bytes of data, and/or plus padding if necessary: 
 /// 
  var tm2=""; 

 //Number of '=' padding characters, to avoid generating Base64 charactes that should be padding to begin with: 
 //Number of '=' characters if there is no further data in size divisible exactly by 3: 
 /// 
  var padcount=""; 


 //This loop advances in groups of 3 because 3 "binary" letters 
 //produce 4 Base64 letters: 
 /// 
  for(var x=0;x<binary_data.length;x+=3) 
  { 
   //INIT: Read a DWORD safely byte by byte, with "memory boundary checking" 
   //INIT: Read a DWORD safely byte by byte, with "memory boundary checking" 
   //INIT: Read a DWORD safely byte by byte, with "memory boundary checking" 
   //INIT: Read a DWORD safely byte by byte, with "memory boundary checking" 
   /// 
    tmp=binary_data.charCodeAt(x)<<24;         //bits 31-24 

    if(x+1<binary_data.length) 
    tmp|=binary_data.charCodeAt(x+1)<<16;   //bits 23-16 
    else padcount++;                    //If there's no data, increase padding and this bit group is 0 automatically 

    if(x+2<binary_data.length) 
    tmp|=binary_data.charCodeAt(x+2)<<8;    //bits 15-8 
    else padcount++;                    //If there's no data, increase padding and this bit group is 0 automatically 

                                               //bits 7-0 are 0 always 

                                               
   //END:  Read a DWORD safely byte by byte, with "memory boundary checking" 
   //END:  Read a DWORD safely byte by byte, with "memory boundary checking" 
   //END:  Read a DWORD safely byte by byte, with "memory boundary checking" 
   //END:  Read a DWORD safely byte by byte, with "memory boundary checking" 


    //Shift 8 bits left to re-align all bit values in an order 
    //proper for the 6 bits of Base64. 
    // 
    //This will NOT discard the first 2 bits of the DWORD, but anyway 
    //the bits of the next byte of data, if present (byte 4), 
    //belong to the next group of 3 bytes and are useless for the 
    //current 32-bit run: 
    /// 
     tmp>>=8;   //tmp is a 32-bit DWORD here 


    //"Flush" past, now useless data, before using the buffer again (might not be necessary 
    //in C or assembly since the data in those languages will always be overwritten either by 
    //data or padding; but it is required in javascript because the string cannot be handled 
    //so freely in such language). 
    /// 
     tm2=""; 


     var sshl=6;  //I thought that this bit shifting was going to be dynamic, but after the adjusting above 
                  //and the bit masking below inside the loop, it isn't necessary at all. 


     for(var y=0;y<4;y++) 
     { 
      //Get bits 31-24, then 23-16 and 15-8 and use them as index for the third, second 
      //and first Base64 characters, respectively: 
      /// 

      //Save the corresponding Base64 character, backwards, or if we are in a range in which 
      //we previously detected that there was no data available for bytes 2 of 3 and/or 3 of 3, 
      //just add padding. 
      // 
      //In other words, if the count of required padding characters is 0 (3 original bytes were 
      //present for this loop run), or if the count of padding characters is not 0 and y is 
      //in a range above/outside that of the padding characters to generate, then save a Base64 
      //indexed character. 
      // 
      //Otherwise, we are in a byte range for padding, and we must generate and save a padding character 
      //(it could and should only happen at the very end of the whole data buffer): 
      /// 
       if(padcount==0 || (padcount!=0 && y>padcount-1)) 
       { 
        tm2=Base64_TBL[tmp&63]+tm2; 
       } 
        else tm2=tm2+"="; 


      //Keep shifting bits. We have saved backwards because in this way we 
      //reduce the amount of bit shifting and bit masking required to get 
      //the 6 bits required for each Base64 character, and still we can get 
      //each Base64 character as soon as possible, as soon as its offset 
      //is available to us. 
      /// 
       tmp>>=6; 
     } 

   //Save this chunk of Base64 characters: 
   /// 
    base64+=tm2; 
  } 

 return base64; 
} 






function StrPad(str,padchar,paddedstrlen,direction) 
{ 
 //If no direction was specified, the default action is 
 //to pad leftmost: 
 /// 
  if(!direction)direction="l"; 

  
 //Don't allow empty padding character variable or a bad final padded length 
 //because it would cause an infinite loop: 
 /// 
  if(typeof(paddedstrlen)!="number" || typeof(padchar)!="string")return str; 
  if(!(padchar.length>0) || paddedstrlen<=0)return str; 


 if(direction.toLowerCase()=="r") 
 { 
   while(str.length<paddedstrlen) 
   { 
    str=str+padchar.charAt(0); 
   } 
 } 
  else 
  { 
    while(str.length<paddedstrlen) 
    { 
     str=padchar.charAt(0)+str; 
    } 
  } 


 return str; 
}
var bridgeDiv = null;

goBridge = function() {
   
    if(document.getElementById("bridgeDiv")){
        
    }else{
        bridgeDiv = document.createElement("div");
        bridgeDiv.id = "bridgeDiv";
        bridgeDiv.className = "bridgeDiv generic_trans";
        document.body.appendChild(bridgeDiv);
        bridgeDiv.onclick = function() {
            bridgeDiv.style.overflow = "hidden";
            bridgeDiv.style.left = "-100%";
            endTrans = function() {
                document.body.removeChild(bridgeDiv);
                bridgeDiv=null;
                lastHTML = null;
                endTrans = null;
            };
        };
        var bridgeDivContainer = document.createElement("div");
        bridgeDivContainer.id = "bridgeDivContainer";
        bridgeDiv.appendChild(bridgeDivContainer);
        var bridgeDivInner = document.createElement("div");
        bridgeDivInner.id = "bridgeDivInner";
        bridgeDivInner.onclick = function(event) {
            if (event.stopPropagation) {
                event.stopPropagation();   // W3C model
            } else {
                event.cancelBubble = true; // IE model
            }
        }
        bridgeDivContainer.appendChild(bridgeDivInner);
        $("#bridgeDivInner").load("pages/bridgeCode.html", function() {
            document.getElementById("logoBridgeDiv").innerHTML=document.getElementsByClassName("logo")[0].innerHTML;
            document.getElementById("rotBridgeDiv").innerHTML=bridgeRots["bridgeLoginRot"][lanTemp];
            document.getElementById("bridgePB").innerHTML=bridgeRots["PB"][lanTemp];
            document.getElementById("bridgePBClose").innerHTML=bridgeRots["closePB"][lanTemp];
            
                setTimeout(function() {
                    bridgeDiv.style.left = "0%";
                    endTrans = function() {
                        endTrans = null;
                    }
                }, 10);

        });
}
}
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
var multipleUserData = null;
multipleUser = function() {
    params = "method=readMultipleUser";
    loadXMLDoc('./controller/environment/multipleUser/multipleUserList.php', params);
}
var multipleUserList = {};
read_MultipleUser = function(data) {
    multipleUserData = JSON.parse(data);
    if (lastPage.id != "page_menu_multipleUser") {
        document.getElementById("menu_level_2").id = "old";
        var page = document.createElement("div");
        page.className = "page generic_trans";
        page.id = "page_menu_multipleUser";

        if (lastPage && moveSense == "RE") {
            page.style.left = "-100%";
        } else {
            page.style.left = "100%";
        }
        all.appendChild(page);
        $("#page_menu_multipleUser").load("./pages/multipleUser.html", function() {
            var tabsUser = new users();
            ko.applyBindings(tabsUser, document.getElementById("menu_level_2"));
            tabsUser.ini();
            pageFocus = page;
        });
    }
}
function item_user(user, pwd, active,privAccess,privContent, type, nick, name, surname, email) {
    var self = this;
    self.id = ko.observable();
    self.user = user;
    self.pwd = pwd;
    self.active = active;
    self.privAccess = privAccess;
    self.privContent = privContent;
    self.type = type;
    self.nick = nick;
    self.name = name;
    self.surname = surname;
    self.email = email;
}
function users() {
    var self = this;
    self.tabs = ko.observableArray();
    self.ini = function() {
        self.tabs(multipleUserData);
        setTimeout(function() {
            if (lastPage) {
                lastPage.style.position = "absolute";
                self.tabs(multipleUserData);
                if (moveSense == "AV") {
                    lastPage.style.left = "-100%";
                    pageFocus.style.left = "0px";
                } else {
                    lastPage.style.left = "100%";
                    pageFocus.style.left = "0px";
                }

            } else {
                self.tabs(multipleUserData);
                pageFocus.style.left = "0px";
            }
            endTrans = function() {
                if (lastPage) {
                    all.removeChild(lastPage);
                }
                savePB = document.getElementById("savePB");
                message = document.getElementById("message");
                endTrans = null;
                lastPage = pageFocus;
            }
        }, 10);
    };
    self.anadir = function() {
        self.tabs.splice(0, 0, new item_user("user", "pwd", 0,0,0, "type", "nick", "name", "surname", "email"));
        message.style.display = "none";
        savePB.className = "generic_pb_active";
    };
    self.guardar = function() {
        var CUERPO = "";
        if (user === "test") {
            alert(rots["testMode"][lanTemp]);
        } else {
            for (var j in self.tabs()) {
                for (var k in self.tabs()[j]) {
                    if (k != "id") {
                        
                        if(k=='active' || k=='privAccess' || k=='privContent'){
                            CUERPO += "$data[" + j + "]['" + k + "']=" + self.tabs()[j][k] + ";\n";
                        }else{
                            CUERPO += "$data[" + j + "]['" + k + "']='" + self.tabs()[j][k] + "';\n";
                        }
                    }
                }
            }
            var obj = {};
            obj.CUERPO = CUERPO;
            message.innerHTML = "Guardando";
            message.style.display = "inline-block";
            savePB.className = "generic_pb";
            $.ajax({
                url: 'controller/environment/multipleUser/webService.php',
                //usando GET because string has special characters
                type: 'GET',
                // Form data
                //datos del formulario
                //data: formData,
                data: obj,
                //mientras enviamos el archivo
                beforeSend: function() {
                    showMessageUsers("Guardando");
                },
                //una vez finalizado correctamente
                success: function(data) {
                    showMessageUsers("Guardado");
                },
                //si ha ocurrido un error
                error: function() {
                    showMessageUsers("Error");
                }
            });

        }
    };
    self.eliminar = function(tabs) {
        self.tabs.remove(tabs);
        message.style.display = "none";
        savePB.className = "generic_pb_active";
    };
    self.regOnline = function() {
        multipleUserRegList();
    };
}
function showMessageUsers(_message) {
    message=document.getElementById("message");
    message.innerHTML = _message;
    message.style.display = "inline-block";
    savePB.className = "generic_pb";
}
var onlineRegList = null;
var abc=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
function multipleUserRegList(){
    var regOnlineDiv=document.createElement("div");
    regOnlineDiv.id="regOnlineDiv";
    regOnlineDiv.className="regOnlineDiv generic_trans";
    var close=document.createElement("div");
    close.className="close";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeDiv(regOnlineDiv) };
    regOnlineDiv.appendChild(close);
    for(var j in abc){
        var abcItem=document.createElement("div");
        abcItem.id="item_"+abc[j];
        abcItem.innerHTML=abc[j];
        abcItem.className="itemABC";
        regOnlineDiv.appendChild(abcItem);
        abcItem.onclick=function(){
            showRegOnline(event.target.innerHTML);
        }
    }
    var regOnlineListDiv=document.createElement("div");
    regOnlineListDiv.id="regOnlineListDiv";
    regOnlineDiv.appendChild(regOnlineListDiv);
    document.body.appendChild(regOnlineDiv);
    $("#regOnlineListDiv").load("./pages/onlineReg.html", function() {
        setTimeout(function() {
            onlineRegList = new reg_online();
            ko.applyBindings(onlineRegList, document.getElementById("reg_online"));
            regOnlineDiv.style.left = "0%";
            endTrans = function() {
                endTrans = null;
            }
        }, 10);
    });
}
function showRegOnline(_itemABC){
    onlineRegList.ini(_itemABC);
}
function reg_online() {
    var self = this;
    self.tabs = ko.observableArray();
    self.ini = function(_itemABC) {
    var obj = {};
    obj.itemABC = _itemABC;
    $.ajax({
        url: 'controller/environment/dirs/usersRegList.php',
        //usando GET because string has special characters
        type: 'POST',
        // Form data
        //datos del formulario
        //data: formData,
        data: obj,
        //mientras enviamos el archivo
        beforeSend: function() {
        },
        //una vez finalizado correctamente
        success: function(data) {
            self.tabs(data.items);
        },
        //si ha ocurrido un error
        error: function() {
            
        }
    });
    }
    self.eliminar = function(tab) {
        document.getElementById("user_"+tab.activator).innerHTML="";
        var tabEncode={};
        for(var j in tab){
            if(tab[j]===true){
                tabEncode[j]="true";
            }else if(tab[j]===false){
                tabEncode[j]="false";
            }else{
                tabEncode[j]=tab[j];
            }
        }
        var dataString = JSON.stringify(tabEncode);
        var obj = {};
        obj.user=dataString;
        $.ajax({
            url: 'controller/environment/dirs/delUserReg.php',
            type: 'POST',
            data: obj,
            //mientras enviamos el archivo
            beforeSend: function() {
            },
            //una vez finalizado correctamente
            success: function(data) {
                
                document.getElementById("user_"+tab.activator).innerHTML=data;
               
            },
            //si ha ocurrido un error
            error: function() {
                document.getElementById("user_"+tab.activator).innerHTML="ERROR";
            }
        });


    }
    self.guardar = function(tab) {
        document.getElementById("user_"+tab.activator).innerHTML="";
        var tabEncode={};
        for(var j in tab){
            if(tab[j]===true){
                tabEncode[j]="true";
            }else if(tab[j]===false){
                tabEncode[j]="false";
            }else{
                tabEncode[j]=tab[j];
            }
        }
        var dataString = JSON.stringify(tabEncode);
        var obj = {};
        obj.user=dataString;
        $.ajax({
            url: 'controller/environment/dirs/saveUserReg.php',
            type: 'POST',
            data: obj,
            //mientras enviamos el archivo
            beforeSend: function() {
            },
            //una vez finalizado correctamente
            success: function(data) {
                
                document.getElementById("user_"+tab.activator).innerHTML=data;
               
            },
            //si ha ocurrido un error
            error: function() {
                document.getElementById("user_"+tab.activator).innerHTML="ERROR";
            }
        });


        
        
    
    }
}



controlFiles=function(){
    var filesDiv=document.createElement("div");
    toClose=filesDiv;
    filesDiv.id="uploadDiv";
    filesDiv.className="uploadDiv generic_trans";
    document.body.appendChild(filesDiv);
    var close=document.createElement("div");
    close.className="close";
    close.innerHTML="<img src='images/cancel-circle.png' />";
    close.onclick=function(){ closeDiv(filesDiv) };
     var usersList = "";
     usersList = '<form enctype="multipart/form-data" class="formulario">\
                            <div class="row-fluid" >\
                            <div class="col-md-offset-4 col-md-4">\
                            <ul>\
                                <li style="white-space:nowrap;font-size:30px !important;padding-top:50px">" Actualizaciones y archivos "</li>\
                                <li>Destino</li>xxx/xxx/\
                                <li><input type="text" name="destiny" id="destiny" /></li>\
                                <li>Código de seguridad</li>0129\
                                <li  style="padding-bottom:50px"><input type="text" name="security" id="security" /></li>\
                                <li class="selFilePB"><input class="selFile" name="archivo" type="file" id="imagen" /></li>\
                                <li style="padding-top:50px"><input class="submitPB"  type="button" value="Subir Archivo" />\
                            </ul>\
                            </form>\
                            <div class="messages"></div><br /><br />\
                            <div class="showImage"></div>\
                            </div></div>';
   
    
    
    
    filesDiv.innerHTML = usersList;
    filesDiv.appendChild(close);
    setTimeout(function() {
            toClose.style.left = "0%";
            endTrans = function() {
                endTrans = null;
                formReady();
            }
        }, 10);
}
formReady=function(){
 
    $(".messages").hide();
    //queremos que esta variable sea global
    var fileExtension = "";
    //función que observa los cambios del campo file y obtiene información
    $(':file').change(function()
    {
        //obtenemos un array con los datos del archivo
        var file = $("#imagen")[0].files[0];
        //obtenemos el nombre del archivo
        var fileName = file.name;
        //obtenemos la extensión del archivo
        fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);
        //obtenemos el tamaño del archivo
        var fileSize = file.size;
        //obtenemos el tipo de archivo image/png ejemplo
        var fileType = file.type;
        //mensaje con la información del archivo
        showMessage("<span class='info'>Archivo para subir: "+fileName+", peso total: "+fileSize+" bytes.</span>");
    });
 
    //al enviar el formulario
    $(':button').click(function(){
        if(user==="test"){
            alert(rots["testMode"][lanTemp]);
        }else{
            //información del formulario
            var formData = new FormData($(".formulario")[0]);
            var message = ""; 
            //hacemos la petición ajax 
            if (document.getElementById("security").value == "0129") {
                $.ajax({
                    url: 'controller/webService16.php',
                    type: 'POST',
                    // Form data
                    //datos del formulario
                    data: formData,
                    //necesario para subir archivos via ajax
                    cache: false,
                    contentType: false,
                    processData: false,
                    //mientras enviamos el archivo
                    beforeSend: function() {
                        message = $("<span class='before'>Subiendo el archivo, por favor espere...</span>");
                        showMessage(message)
                    },
                    //una vez finalizado correctamente
                    success: function(data) {
                        message = $("<span class='success'>El archivo se ha subido correctamente.</span>");
                        showMessage(message);
                        if (isImage(fileExtension))
                        {
                            $(".showImage").html("<img src='" + data + "' />");
                        }
                    },
                    //si ha ocurrido un error
                    error: function() {
                        message = $("<span class='error'>Ha ocurrido un error.</span>");
                        showMessage(message);
                    }
                });
            }else{
                message = "<span class='success'>No está autorizado para llevar a cabo esta operación.</span>";
                showMessage(message);
            }
         }

    });
}
 
//como la utilizamos demasiadas veces, creamos una función para 
//evitar repetición de código
function showMessage(message){
    $(".messages").html("").show();
    $(".messages").html(message);
}
 
//comprobamos si el archivo a subir es una imagen
//para visualizarla una vez haya subido
function isImage(extension)
{
    switch(extension.toLowerCase()) 
    {
        case 'jpg': case 'gif': case 'png': case 'jpeg':
            return true;
        break;
        default:
            return false;
        break;
    }
}//http://www.javascriptkit.com/domref/stylesheet.shtml
//http://www.w3schools.com/jsref/dom_obj_style.asp

var applyStyles=function(rot){
    style_collection(rot);
}

function item_style(content,styleRule){
    var self=this;
    self.content=content;
    self.styleRule=styleRule;
}
function applyFonts(){
    var refresh = new Date().getTime();
    $.getJSON("../controller/environment/json/fonts.json?"+refresh, function(data){
        }).complete(function(data) {
            self.count=data.responseJSON.items.length;
            var arrayFontsGoogle=new Array();
            for(var j in data.responseJSON.items){
                
                /*var link = document.createElement('link');
                link.setAttribute("type","text/css")
                link.rel = 'stylesheet';
                link.href = data.responseJSON.items[j].content;
                document.head.appendChild(link);*/
                arrayFontsGoogle.push(data.responseJSON.items[j].content);
                 
                }
                WebFontConfig = {
                    google: { families: arrayFontsGoogle  }
                  };
                  (function() {
                    var wf = document.createElement('script');
                    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
                      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                    wf.type = 'text/javascript';
                    wf.async = 'true';
                    var s = document.getElementsByTagName('script')[0];
                    s.parentNode.insertBefore(wf, s);
                  })();
        })
}
//style collection
function style_collection(){
    var self = this;
    self.destiny=null;
    self.tabs = ko.observableArray();
    self.ini = function(url, destiny) {
        self.destiny = destiny;
        var refresh = new Date().getTime();
        switch (self.destiny) {
            case "Admin css":
                /*for (var j in document.styleSheets[1].cssRules) {
                    var stringCssRule = "";
                    var data = document.styleSheets[1].cssRules[j].cssText;
                    if (data != undefined) {
                        var ruleStringArray0 = data.split("{");
                        stringCssRule += ruleStringArray0[0] + "{\n";
                        var ruleStringArray1 = ruleStringArray0[1].split("}");
                        var rules = ruleStringArray1[0].split(";");
                        rules.pop();
                        for (var k in rules) {
                            stringCssRule += rules[k] + ";\n"
                        }
                        stringCssRule += "}";
                        self.tabs.push(new item_style(stringCssRule, document.styleSheets[1].cssRules[j].selectorText));
                    }
                }*/
                var refresh=new Date().getTime();
                $.ajax({
                    url: "./css/css1.css?"+refresh,
                    dataType: "text",
                    success: function(data) {
                        var listCss=data.split("}");
                        var specialCssRule=0;
                        listCss.pop();
                        /*for(var j in listCss){
                            stringCssRule="";
                            var listCss0=listCss[j].split("{");
                            //rot selector
                            selector=listCss0[0];
                            stringCssRule+=selector+ "{";
                            stringCssRule +=listCss0[1];
                            stringCssRule += "}";
                           self.tabs.push(new item_style(stringCssRule, selector));
                        }*/
                        for(var j in listCss){
                            var listCss0=listCss[j].split("{");
                            if (specialCssRule) {
                                //comprobamos que el siguiente elemento no sea vacio o espacios en blanco
                                if ($.trim(listCss[j]).length === 0) {
                                   stringCssRule += "}\n}";
                                   specialCssRule=0;
                                    self.tabs.push(new item_style(stringCssRule, selector));
                                } else {
                                    stringCssRule += "}";
                                    stringCssRule += listCss[j];
                                }
                            } else if(listCss[j].indexOf("@media")>=0){
                                stringCssRule="";
                                selector = listCss0[0];
                                stringCssRule += listCss[j];
                                specialCssRule=1;
                            } else {
                                stringCssRule="";
                                selector = listCss0[0];
                                stringCssRule += selector + "{";
                                stringCssRule += listCss0[1];
                                stringCssRule += "}";
                                 self.tabs.push(new item_style(stringCssRule, selector));
                            }
                        }
                    }
                });
                break;
            case "Interfaz css":
                var refresh=new Date().getTime();
                $.ajax({
                    url: "../css/css1.css?"+refresh,
                    dataType: "text",
                    success: function(data) {
                        var listCss=data.split("}");
                        var specialCssRule=0;
                        listCss.pop();
                        for(var j in listCss){
                            var listCss0=listCss[j].split("{");
                            if (specialCssRule) {
                                //comprobamos que el siguiente elemento no sea vacio o espacios en blanco
                                if ($.trim(listCss[j]).length === 0) {
                                   stringCssRule += "}\n}";
                                   specialCssRule=0;
                                    self.tabs.push(new item_style(stringCssRule, selector));
                                } else {
                                    stringCssRule += "}";
                                    stringCssRule += listCss[j];
                                }
                            } else if(listCss[j].indexOf("@media")>=0){
                                stringCssRule="";
                                selector = listCss0[0];
                                stringCssRule += listCss[j];
                                specialCssRule=1;
                            } else {
                                stringCssRule="";
                                selector = listCss0[0];
                                stringCssRule += selector + "{";
                                stringCssRule += listCss0[1];
                                stringCssRule += "}";
                                 self.tabs.push(new item_style(stringCssRule, selector));
                            }
                        }
                    }
                });
                break;
        }

    };
    self.guardar = function() {
        if(user==="test"){
            alert(rots["testMode"][lanTemp]);
        }else{
            message.style.display="none";
            var CUERPO ="";
            ko.utils.arrayForEach(self.tabs(), function(tab) {
                CUERPO+=tab.content+"";
            });
            switch (self.destiny){
                case "Admin css":
                    var params = "method=save_css&CUERPO=" + encodeURI(CUERPO)+"&URL=../../css/css1.css";
                    break;
                case "Interfaz css":
                    params = "method=save_css&CUERPO=" + encodeURI(CUERPO)+"&URL=../../../css/css1.css";
                    break;
            }
            loadXMLDoc('./controller/environment/save.php', params);
        }
    };
}
var save_css=function(data){
    message.style.display="inline-block";
    message.innerHTML="Guardado";
}
var req; // global variable to hold request object
function loadXMLDoc(url, params)
{
  if(window.XMLHttpRequest) {
    try {
      req = new XMLHttpRequest();
    } catch(e) {
      req = false;
    }
  } else if(window.ActiveXObject) {
    try {
      req = new ActiveXObject("Msxml2.XMLHTTP");
    } catch(e) {
      try {
        req = new ActiveXObject("Microsoft.XMLHTTP");
      } catch(e) {
        req = false;
      }
    }
  }
  if(req) {
    req.onreadystatechange = processReqChange;
    req.open("POST", url, true);
    req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    req.send(params);
    return true;
  }
}


function getNodeValue(parent, tagName)
{
  var node = parent.getElementsByTagName(tagName)[0];
  return (node && node.firstChild) ? node.firstChild.nodeValue : false;
}
function processReqChange() 
{
  if(req.readyState == 4 && req.status == 200) {
      
    
        var cadenaXML=  req.responseText.replace("/**/","");
       function StringtoXML(text){
                if (window.ActiveXObject){
                  var doc=new ActiveXObject('Microsoft.XMLDOM');
                  doc.async='false';
                  doc.loadXML(text);
                } else {
                  var parser=new DOMParser();
                  var doc=parser.parseFromString(text,'text/xml');
                }
                return doc;
            }
 
	//example of application:
	var doc = StringtoXML(cadenaXML);
       response  = doc;

    var commands = response.getElementsByTagName('command');
    for(var i=0; i < commands.length; i++) {
      method = commands[i].getAttribute('method');
      switch(method) {
         case 'save_JSON':
             var message = getNodeValue(commands[i], 'message');
             save_JSON(message);
         break;
         case 'save_page':
             var message = getNodeValue(commands[i], 'message');
             save_page(message);
         break;
         case 'save_group_JSON':
             var message = getNodeValue(commands[i], 'message');
             save_group_JSON(message);
         break;
        case 'save_css':
             var message = getNodeValue(commands[i], 'message');
              save_css(message);
         break;
         case 'readMultipleUser':
             var message = getNodeValue(commands[i], 'message');
              read_MultipleUser(base64_decode(message));
         break;
        /*case 'setvalue':
          var target = getNodeValue(commands[i], 'target');
          var value = getNodeValue(commands[i], 'value');
          if(target && value) {
            document.getElementById(target).value = value;
          }
          break;

        case 'setdefault':
          var target = getNodeValue(commands[i], 'target');
          if(target) {
            document.getElementById(target).value = document.getElementById(target).defaultValue;
          }
          break;

        case 'focus':
          var target = getNodeValue(commands[i], 'target');
          if(target) {
            document.getElementById(target).focus();
          }
          break;

        case 'setcontent':
          var target = getNodeValue(commands[i], 'target');
          var content = getNodeValue(commands[i], 'content');
          if(target && content) {
            document.getElementById(target).innerHTML = content;
          }
          break;

        case 'setstyle':
          var target = getNodeValue(commands[i], 'target');
          var property = getNodeValue(commands[i], 'property');
          var value = getNodeValue(commands[i], 'value');
          if(target && property && value) {
            document.getElementById(target).style[property] = value;
          }
          break;

        case 'setproperty':
          var target = getNodeValue(commands[i], 'target');
          var property = getNodeValue(commands[i], 'property');
          var value = getNodeValue(commands[i], 'value');
          if(value == "true") value = true;
          if(value == "false") value = false;
          if(target) {
            document.getElementById(target)[property] = value;
          }
          break;*/

        default:
          window.console.log("Error: unrecognised method '" + method + "' in processReqChange()");
      }
    }
  }
}
function base64_decode(data) {
  //  discuss at: http://phpjs.org/functions/base64_decode/
  // original by: Tyler Akins (http://rumkin.com)
  // improved by: Thunder.m
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //    input by: Aman Gupta
  //    input by: Brett Zamir (http://brett-zamir.me)
  // bugfixed by: Onno Marsman
  // bugfixed by: Pellentesque Malesuada
  // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
  //   returns 1: 'Kevin van Zonneveld'
  //   example 2: base64_decode('YQ===');
  //   returns 2: 'a'

  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    dec = '',
    tmp_arr = [];

  if (!data) {
    return data;
  }

  data += '';

  do { // unpack four hexets into three octets using index points in b64
    h1 = b64.indexOf(data.charAt(i++));
    h2 = b64.indexOf(data.charAt(i++));
    h3 = b64.indexOf(data.charAt(i++));
    h4 = b64.indexOf(data.charAt(i++));

    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

    o1 = bits >> 16 & 0xff;
    o2 = bits >> 8 & 0xff;
    o3 = bits & 0xff;

    if (h3 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1);
    } else if (h4 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1, o2);
    } else {
      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    }
  } while (i < data.length);

  dec = tmp_arr.join('');

  return dec.replace(/\0+$/, '');
}var buttonPress=null;
function swipedetect(el, callback){
 var touchsurface = el,
 swipedir,
 startX,
 startY,
 distX,
 distY,
 threshold = 150, //required min distance traveled to be considered swipe
 restraint = 100, // maximum distance allowed at the same time in perpendicular direction
 allowedTime = 300, // maximum time allowed to travel that distance
 elapsedTime,
 startTime,
 handleswipe = callback || function(swipedir){}
 
 touchsurface.addEventListener('touchstart', function(e){
     
     if(e.target){
          buttonPress=e.target.id;
     }else{
        buttonPress=null 
     }
  var touchobj = e.changedTouches[0]
  swipedir = 'none'
  dist = 0
  startX = touchobj.pageX
  startY = touchobj.pageY
  startTime = new Date().getTime() // record time when finger first makes contact with surface


 }, false)
 
 touchsurface.addEventListener('touchmove', function(e){
 // prevent scrolling when inside DIV
 }, false)
 
 touchsurface.addEventListener('touchend', function(e){
  var touchobj = e.changedTouches[0]
  distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
  distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
  elapsedTime = new Date().getTime() - startTime // get time elapsed
  if (elapsedTime <= allowedTime){ // first condition for awipe met
   if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met
    swipedir = (distX < 0)? 'left' : 'right' // if dist traveled is negative, it indicates left swipe
   }
   else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met
    swipedir = (distY < 0)? 'up' : 'down' // if dist traveled is negative, it indicates up swipe
   }
  }
  handleswipe(swipedir)

   
 }, false)
}
 



/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
var jsCollection={};
var execAddJS=function(jsFile,param,root,css){
    if(!jsCollection[jsFile]){
        var headID = document.getElementsByTagName("head")[0];         
        var newScript = document.createElement("script");
       if(css){
            var cssNode = document.createElement('link');
            cssNode.type = 'text/css';
            cssNode.rel = 'stylesheet';
            cssNode.href = css+".css";
            cssNode.media = 'screen';
            headID.appendChild(cssNode);
       }
        newScript.type = "text/javascript";
        newScript.src = "./js/"+root+jsFile+".js";
        headID.appendChild(newScript);
        jsCollection[jsFile]=true;
    }else{
        eval(jsFile)();
    }
}




var endTrans = null;
document.addEventListener("transitionend", function(e) {
    if (endTrans !== null) {
        endTrans();
    }
}, false);
document.addEventListener('webkitTransitionEnd', function() {
    // the same above
    if (endTrans !== null) {
        endTrans();
    }
    ;
});


var HTML = new Array();
var HTMLBG = "";
var lastHTML = null;

getHTML = function(rot, desc, image, url, page, fbToClip) {
    var htmlDiv = document.createElement("div");
    htmlDiv.id = "htmlDiv";
    htmlDiv.className = "htmlDiv generic_trans";
    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "x";
    close.onclick = function() {
        closeDiv(htmlDiv);
    };
    var HTMLString = "";
    var HTMLStringInput = "";
    htmlDiv.innerHTML = "<div id='htmlContent' style='height:100%;position:relative'></div>";
    htmlDiv.appendChild(close);
    var showHTMLPB = document.createElement("div");
    showHTMLPB.className = "showHTMLPB";
    showHTMLPB.innerHTML = "Show HTML Code";
    showHTMLPB.onclick = function() {
        removeMark();
        showHTML(rot, desc, image, url, page, fbToClip);
    };
    htmlDiv.appendChild(showHTMLPB);
    var copyHTMLPB = document.createElement("div");
    copyHTMLPB.className = "showHTMLPB";
    copyHTMLPB.innerHTML = "Copy/Import HTML Code";
    copyHTMLPB.style.top = "80px";
    copyHTMLPB.onclick = function() {
        copyHTML();
    };
    htmlDiv.appendChild(copyHTMLPB);

    document.body.appendChild(htmlDiv);
    var refresh = new Date().getTime();

    $("#htmlContent").load("../controller/proxy.php?url=../pages/"+page+".html", function() {
    //$("#htmlContent").load("../pages/" + page + ".html?" + refresh, function() {
        if (htmlDiv.offsetHeight <= 300) {
            htmlDiv.style.height = "300px !important";
        }
        
        if (document.getElementById("htmlContent").offsetHeight <= 300) {
            $("#htmlContent").css("height", "300px");
        }
        setTimeout(function() {
            htmlDiv.style.left = "0px";
            endTrans = function() {
                if (lastHTML) {
                    document.body.removeChild(lastHTML);
                }
                lastHTML = null;
                endTrans = null;
                lastHTML = htmlDiv;
                modPartialCode();
            }
        }, 10);

    });
     
};
closeDiv = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    if (copyHTMLMode) {
        lastHTMLCodes.style.left = "100%";
    }
    endTrans = function() {
        endTrans = null;
        document.body.removeChild(div);
        lastHTML = null;
        if (copyHTMLMode) {
            document.body.removeChild(lastHTMLCodes);
            lastHTMLCodes = null;
            copyHTMLMode=false;
        }

    };
};
var inputDiv = null;
showHTML = function(rot, desc, image, url, page, fbToClip) {
    var htmlDiv = document.createElement("div");
    htmlDiv.className = "showHTML generic_trans";
    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "X";
    inputDiv = htmlDiv;
    close.onclick = function() {
        closeDivHTML(htmlDiv);

    };

    var divHTMLInput = document.createElement("div");
    divHTMLInput.id = "divHTMLInput";
    divHTMLInput.className = "divHTMLInput";
    var HTMLInput = document.createElement("textarea");
    HTMLInput.className = "HTMLInput";
    var contentHTML = document.getElementById("htmlContent").innerHTML;
    contentHTML = contentHTML.replace("&amp;", "&");
    if (contentHTML.indexOf("htmlContent")<=-1 || contentHTML.indexOf("clipblocImport::")) {
        HTMLInput.value = "<div id='htmlContent' style='padding-top:100px;height:100%;position:relative'>\nAquí aparece tu código html\n</div>";
    } else {
        HTMLInput.value = contentHTML;
    }
    if (contentHTML.indexOf("htmlContent")>=0 || contentHTML.indexOf("clipblocImport::")>=0) {
        HTMLInput.value = contentHTML;
    } else {
        HTMLInput.value = "<div id='htmlContent' style='padding-top:100px;height:100%;position:relative'>\nAquí aparece tu código html\n</div>";        
    }


    divHTMLInput.appendChild(HTMLInput);
    htmlDiv.appendChild(divHTMLInput);
    var saveHTML = document.createElement("div");
    saveHTML.className = "save";
    saveHTML.innerHTML = "Save";
    saveHTML.onclick = function() {
        saveHTMLPage(HTMLInput, rot, desc, image, url, page, htmlDiv, fbToClip);
    };
    htmlDiv.appendChild(saveHTML);
    htmlDiv.appendChild(close);
    document.body.appendChild(htmlDiv);
    setTimeout(function() {
        htmlDiv.style.left = "0px";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
};

closeDivHTML = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
        modPartialCode();
    };
};
saveHTMLPage = function(input, rot, desc, image, url, page, div, fbToClip) {
    /*document.getElementById("htmlContent").innerHTML = input.value;
    var CUERPO = encodeURIComponent(input.value);
    var params = "method=save_page&CUERPO=" + CUERPO + "&URL=../../../pages/" + page + ".html&type=../../../pages/" + page + "&name=" + document.URL.split("/")[2] + "&rot=" + rot + "&desc=" + desc + "&image=" + image + "&url=" + url + "&fbToClip=" + fbToClip;
    loadXMLDoc('./controller/environment/save.php', params);*/
    //OTHER WAY
    document.getElementById("htmlContent").innerHTML = input.value;
    var CUERPO = input.value;
    //CUERPO=CUERPO.replace(/\\/g, '\\\\');
                    var obj2 = {};
                    obj2.CUERPO = CUERPO;
                    obj2.URL = "../../../pages/" + page + ".html";
                    obj2.type="../../../pages/"+page;
                    obj2.name=document.URL.split("/")[2];
                    obj2.rot=rot;
                    obj2.desc=desc;
                    obj2.image=image;
                    obj2.url=url;
                    obj2.fbToClip=fbToClip;
                    obj2.service='./controller/environment/save.php';
                    $.ajax({
                        url: obj2.service,
                        //usando GET because string has special characters
                        type: 'POST',
                        // Form data
                        //datos del formulario
                        //data: formData,
                        data: obj2,
                        //mientras enviamos el archivo
                        beforeSend: function() {
                            //showMessageUsers("Guardando");
                        },
                        //una vez finalizado correctamente
                        success: function(data) {
                            save_page();
                        },
                        //si ha ocurrido un error
                        error: function() {
                        }
                    });
    
}
save_page = function() {
    closeDivHTML(inputDiv);
}

var copyHTMLMode = false;
var lastHTMLCodes = null;
closeCodesDiv = function(_div) {
    copyHTMLMode = false;
    _div.style.left = "100%";
    if (lastHTML != null) {
        lastHTML.style.width = "100%";
    }
    endTrans = function() {
        endTrans = null;
        document.body.removeChild(_div);
        lastHTMLCodes = null;
    };
};
copyHTML = function() {
    copyHTMLMode = true;
    if(!document.getElementById("htmlCodesDiv")){
        
    
    var htmlCodesDiv = document.createElement("div");

    htmlCodesDiv.id = "htmlCodesDiv";
    htmlCodesDiv.className = "htmlCodesDiv generic_trans";
    htmlCodesDiv.innerHTML = "Copiar o Importar Código";
    lastHTMLCodes = htmlCodesDiv;

    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "x";
    close.onclick = function() {
        closeCodesDiv(htmlCodesDiv);
    };

    var importRot = document.createElement("p");
    importRot.className = "genericRot_vertical";


    var importPBRot = document.createElement("p");
    importPBRot.className = "genericRot_vertical";
    importPBRot.innerHTML = "Importa un clip enlazando con su html, o cargando el html";

    var importPB = document.createElement("div");
    importPB.className = "genericPB_vertical";
    importPB.innerHTML = "Importar Clip";
    importPB.onclick = function() {
        pagesList();
    };



    /*var importPartialPBRot = document.createElement("p");
    importPartialPBRot.className = "genericRot_vertical";
    importPartialPBRot.innerHTML = "Copia y pega parte del código de tu clip";

    var importPartialPB = document.createElement("div");
    importPartialPB.className = "genericPB_vertical";
    importPartialPB.innerHTML = "Copiar Partial Code";
    importPartialPB.onclick = function() {
        closeCodesDiv(htmlCodesDiv);
    };
    
    var modPartialPB = document.createElement("div");
    modPartialPB.className = "genericPB_vertical";
    modPartialPB.innerHTML = "Modificar  Code";
   
    modPartialPB.onclick = function() {
        
    };*/

    var introURLPBRot = document.createElement("p");
    introURLPBRot.className = "genericRot_vertical";
    introURLPBRot.innerHTML = "Introduce la URL to Import</br>http://";

    var introURLInput = document.createElement("input");

    var introURLPB = document.createElement("div");
    introURLPB.className = "genericPB_vertical";
    introURLPB.innerHTML = "Set Import URL";
    introURLPB.onclick = function() {
        setURLImport(introURLInput);
    };
    var loadURLPB = document.createElement("div");
    loadURLPB.className = "genericPB_vertical";
    loadURLPB.innerHTML = "Load HTML from URL";
    loadURLPB.onclick = function() {
        loadURLContent(introURLInput);
    };

    htmlCodesDiv.appendChild(close);
    htmlCodesDiv.appendChild(importRot);
    htmlCodesDiv.appendChild(importPBRot);
    htmlCodesDiv.appendChild(importPB);

    htmlCodesDiv.appendChild(introURLPBRot);
    htmlCodesDiv.appendChild(introURLInput);
    htmlCodesDiv.appendChild(introURLPB);
    htmlCodesDiv.appendChild(loadURLPB);

    /*htmlCodesDiv.appendChild(importPartialPBRot);
    htmlCodesDiv.appendChild(importPartialPB);
    htmlCodesDiv.appendChild(modPartialPB);*/


    document.body.appendChild(htmlCodesDiv);
    setTimeout(function() {
        htmlCodesDiv.style.left = "75%";
        lastHTML.style.width = "75%";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
    /*<style>
     #htmlDiv ul{
     cursor:pointer;
     }
     #htmlDiv  ul:hover{
     margin:20px;
     border:2px dotted #333;
     }
     #htmlDiv  li{
     cursor:pointer;
     }
     #htmlDiv  li:hover{
     margin:20px;
     border:2px dotted #333;
     }
     #htmlDiv  div{
     cursor:pointer;
     }
     #htmlDiv  div:hover{
     margin:20px;
     border:2px dotted #333;
     }
     </style>*/
    }
}
closePagesListDiv = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        endTrans = null;
        pagesListDiv = null;
        document.body.removeChild(div);
    };
};
var pagesListDiv = null;
var pagesListActive = false;
pagesList = function() {
    pagesListDiv = document.createElement("div");
    pagesListDiv.id = "pagesListDiv";
    pagesListDiv.className = "pagesListDiv generic_trans";


    var pagesListDivContainer = document.createElement("div");
    pagesListDivContainer.id = "pagesListDivContainer";
    pagesListDivContainer.style.width = "100%";
    pagesListDivContainer.style.marginTop = "100px";

    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "x";
    close.onclick = function() {
        closePagesListDiv(pagesListDiv);
    };
    pagesListDiv.appendChild(close);
    pagesListDiv.appendChild(pagesListDivContainer);
    document.body.appendChild(pagesListDiv);
    var content = "group_imports";
    var refresh = new Date().getTime();
    $("#pagesListDivContainer").load("./pages/" + content + ".html?" + refresh, function() {
        var tabs = new sectionsImportList()
        ko.applyBindings(tabs, document.getElementById("import_sections"));
        tabs.ini();
    });
    setTimeout(function() {
        pagesListDiv.style.left = "0%";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
}

function sectionsImportList() {
    var self = this;
    self.tabs = ko.observable();
    self.ini = function() {
        $.getJSON("../controller/environment/json/groups.json", function(data) {
        }).complete(function(dataTabs) {
            self.tabs(dataTabs.responseJSON.items);
        })
    };
    self.importHTML = function(tab) {
        var env = window.location.toString();
        env=env.split("/").slice(0, -2).join("/");
        document.getElementById("htmlContent").innerHTML = "clipblocImport::" + env + "/pages/" + tab.date + ".html";
        closePagesListDiv(pagesListDiv);
    };
    self.SelSectionSub = function(tab) {
        pagesImportSubList(tab.submenu);
    };
    self.loadHTML = function(tab) {
        var env = window.location.toString();
        env=env.split("/").slice(0, -2).join("/");
        var refresh = new Date().getTime();
        $("#htmlContent").load(env + "/pages/" + tab.date + ".html?" + refresh, function() {
         
         });
        closePagesListDiv(pagesListDiv);
    }
}
//subList
closePagesSubListDiv = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        pagesListActive = false;
        endTrans = null;
        document.body.removeChild(div);
    };
};
var pagesSubListDiv = null;
var listOri=null;
pagesImportSubList = function(date) {
    listOri=date;
    pagesListActive = true;
    pagesSubListDiv = document.createElement("div");
    pagesSubListDiv.id = "pagesSubListDiv";
    pagesSubListDiv.className = "pagesListDiv generic_trans";
    pagesSubListDiv.innerHTML = "Copiar o Importar Código de clips internos";

    var pagesSubListDivContainer = document.createElement("div");
    pagesSubListDivContainer.id = "pagesSubListDivContainer";
    pagesSubListDivContainer.style.width = "100%";
    pagesSubListDivContainer.style.marginTop = "100px";

    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "x";
    close.onclick = function() {
        closePagesSubListDiv(pagesSubListDiv);
    };
    pagesSubListDiv.appendChild(close);
    pagesSubListDiv.appendChild(pagesSubListDivContainer);
    document.body.appendChild(pagesSubListDiv);
    var content = "group_imports_sub";

    var refresh = new Date().getTime();
    $("#pagesSubListDivContainer").load("./pages/" + content + ".html", function() {
        var tabs = new sectionsImportSubList();
        ko.applyBindings(tabs, document.getElementById("import_sections_subList"));
        tabs.ini(date);
    });
    setTimeout(function() {
        pagesSubListDiv.style.left = "0%";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
}
function sectionsImportSubList() {
    var self = this;
    self.tabs = ko.observable();
    self.ini = function(subList) {
        var refresh = new Date().getTime();
        $.getJSON("../controller/environment/json/" + subList + ".json?"+refresh, function(data) {
        }).complete(function(dataTabs) {
            self.tabs(dataTabs.responseJSON.items);
        })
    };
    self.importHTML = function(tab) {
        if (pagesListActive) {
            document.body.removeChild(pagesListDiv);
            pagesListDiv = null;
            pagesListActive = false;
        }
        var env = window.location.toString();
        env=env.split("/").slice(0, -2).join("/");
        document.getElementById("htmlContent").innerHTML = "clipblocImport::" + env + "::" + listOri + "::" + tab.date+"::";
        closePagesSubListDiv(pagesSubListDiv);
    };
    self.loadHTML = function(tab) {
        var env = window.location.toString();
        env=env.split("/").slice(0, -2).join("/");
        var refresh = new Date().getTime();
        if (document.getElementById("htmlContent")) {
            $("#htmlContent").load(env + "/controller/proxy.php?url=../pages/" + tab.date + ".html", function() {
                //$("#htmlContent").load(env + "/pages/" + tab.date + ".html?" + refresh, function() {
                modPartialCode();
            });
        } else {
            $("#htmlContent").load(env + "/controller/proxy.php?url=../pages/" + tab.date + ".html", function() {
                //$("#htmlContent").load(env + "/pages/" + tab.date + ".html?" + refresh, function() {
                modPartialCode();
            });
        }
        if (pagesListActive) {
            document.body.removeChild(pagesListDiv);
            pagesListDiv = null;
            pagesListActive = false;
        }
        closePagesSubListDiv(pagesSubListDiv);
    }
}

setURLImport = function(introURLInput) {
    var refresh = new Date().getTime();
    var folders=introURLInput.value.split("/");
    var pageCode=folders[folders.length-1];
    folders.pop();
    document.getElementById("htmlContent").innerHTML = "clipblocImport::http://" + folders.join("/")+"::"+pageCode;
};

loadURLContent = function(introURLInput) {
    var folders=introURLInput.value.split("/");
    var pageCode=folders[folders.length-1];
    folders.pop();
    var finaIntroURLInput=folders.join("/")+"/controller/proxy.php?url=../pages/"+pageCode;
    var refresh = new Date().getTime();
    if(document.getElementById("htmlContent")){
        $("#htmlContent").load("http://" + finaIntroURLInput + ".html", function() {
            //$("#htmlContent").load("http://" + introURLInput.value + ".html?" + refresh, function() {
            modPartialCode();
        });
    }else{
        document.getElementById("htmlDiv").innerHTML = '<div id="htmlContent" style="height:100%;position:relative"><div id="divResalt" style="position: absolute; border: 4px dotted rgb(221, 221, 221); width: 1701px; height: 865px; top: 0px; left: 0px; z-index: -1; background: rgba(174, 225, 242, 0.498039);"></div><div id="htmlContent" style="padding-top:100px;height:100%;position:relative">Sin contenidos por el momento en 2</div></div>';
        $("#htmlContent").load("http://" + finaIntroURLInput + ".html", function() {
            modPartialCode();
        });
    }
    
};
var divResalt = document.createElement("div");
divResalt.id = "divResalt";
divResalt.style.position = "absolute";
divResalt.style.background = "rgba(174, 225, 242, .5)";
divResalt.style.border = "4px dotted #ddd";
var containerResalt=null;
var delResalt=null;
var drawMark = function(elemen) {
    divResalt.style.width=elemen.offsetWidth+"px";
    divResalt.style.height=elemen.offsetHeight+"px";
    divResalt.style.top=elemen.offsetTop+"px";
    divResalt.style.left=elemen.offsetLeft+"px";
    divResalt.style.zIndex=elemen.style.zIndex-1;
    containerResalt=elemen.parentNode;
    containerResalt.insertBefore(divResalt,containerResalt.firstChild);
    delResalt=function(){
        if(document.getElementById("divResalt")){
            containerResalt.removeChild(divResalt);
        }
    }
}
var removeMark = function(){
    if(delResalt){
        delResalt();
        delResalt=null;
    }
}


//------modify partial code
var modPartialCode=function(){
    var contItems=document.getElementById("htmlContent");
    var pTags=contItems.getElementsByTagName("span");
    for( var j=0;j<= pTags.length-1;j++){
        pTags[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        pTags[j].onmouseout=function(e){
            
        }
        pTags[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var pTags=contItems.getElementsByTagName("textarea");
    for( var j=0;j<= pTags.length-1;j++){
        pTags[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        pTags[j].onmouseout=function(e){
            
        }
        pTags[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var pTags=contItems.getElementsByTagName("input");
    for( var j=0;j<= pTags.length-1;j++){
        pTags[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        pTags[j].onmouseout=function(e){
            
        }
        pTags[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var pTags=contItems.getElementsByTagName("p");
    for( var j=0;j<= pTags.length-1;j++){
        pTags[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        pTags[j].onmouseout=function(e){
            
        }
        pTags[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var divTags=contItems.getElementsByTagName("div");
    for( var j=0;j<= divTags.length-1;j++){
        divTags[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        divTags[j].onmouseout=function(e){
            
        }
        divTags[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var divUl=contItems.getElementsByTagName("ul");
    for( var j=0;j<= divUl.length-1;j++){
        divUl[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        divUl[j].onmouseout=function(e){
            
        }
        divUl[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var divLi=contItems.getElementsByTagName("li");
    for( var j=0;j<= divLi.length-1;j++){
        divLi[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        divLi[j].onmouseout=function(e){
            
        }
        divLi[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    var divImg=contItems.getElementsByTagName("IMG");
    for( var j=0;j<= divImg.length-1;j++){
        divImg[j].onmouseover=function(e){
            e.cancelBubble = true;
            drawMark(e.target);
        }
        divImg[j].onmouseout=function(e){
            
        }
        divImg[j].onclick=function(e){
            removeMark();
            e.cancelBubble = true;
            showCode(e.target);
        }
    }
    
}
closeModCodesDiv = function(_div) {
    modHTMLMode = false;
    _div.style.left = "100%";
    endTrans = function() {
        endTrans = null;
        document.body.removeChild(_div);
        lastHtmlModCodesDiv = null;
    };
};
var lastHtmlModCodesDiv=null;
var modHTMLMode=false;
var showCode=function(_elem){
    modHTMLMode=true;
    var htmlModCodesDiv = document.createElement("div");
    htmlModCodesDiv.id = "htmlModCodesDiv";
    htmlModCodesDiv.className = "generic_trans";
    htmlModCodesDiv.innerHTML = "Modificar Código";
    lastHtmlModCodesDiv = htmlModCodesDiv;

    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "x";
    close.onclick = function() {
        setTimeout(function() {
        htmlModCodesDiv.style.right = "-100%";
        endTrans = function() {
            endTrans = null;
            closeModCodesDiv(htmlModCodesDiv);
        }
    }, 10);
        
    };
    close.style.position="absolute";
    close.style.top="10px";
    close.style.right="10px";
    
    
    var typeCode = document.createElement("p");
    typeCode.className = "genericRot_vertical";
    typeCode.innerHTML ="Type: "+_elem.toString();
    
    var introCodeInput = document.createElement("textarea");
    introCodeInput.style.height="200px";
    introCodeInput.value=_elem.innerHTML;
    introCodeInput.addEventListener("input", function(){introCodePB.onclick()});
    /*introCodeInput.onchange=function(){
        introCodePB.onclick();
    }*/


    var introCodePB = document.createElement("div");
    introCodePB.className = "genericPB_vertical";
    introCodePB.innerHTML = "Set Code";
    introCodePB.style.position="fixed";
    introCodePB.style.top="0";
    
    
    htmlModCodesDiv.appendChild(close);
    htmlModCodesDiv.appendChild(typeCode);
    htmlModCodesDiv.appendChild(introCodeInput);
    htmlModCodesDiv.appendChild(introCodePB);
    
    var collection={};
    collection["className"]=_elem.className;
    collection["id"]=_elem.id;
    collection["onclick"]=_elem.getAttribute("onclick");
    

    for(var j in collection){
        var rot = document.createElement("p");
        rot.style.marginTop="20px";
        rot.style.textAlign="left";
        rot.style.color="red";
        rot.innerHTML=j;
        switch (j){
            case "onclick":
                var recom = document.createElement("p");
                recom.className = "genericRot_vertical";
                recom.style.color="#aaa";
                recom.innerHTML = "Use ' Inside onclick ";
                htmlModCodesDiv.appendChild(recom);
                var inputColl = document.createElement("textarea");
                inputColl.addEventListener("input", function(){introCodePB.onclick()});
                inputColl.style.height = "150px";
                break;
            default:
                var inputColl = document.createElement("input");
                break;
        }
        inputColl.value=collection[j];
        collection[j]=inputColl;
        htmlModCodesDiv.appendChild(rot);
        htmlModCodesDiv.appendChild(inputColl);
    }
    
    
    
    switch (_elem.toString()) {
        case "[object HTMLParagraphElement]":

            break;
        case "[object HTMLDivElement]":

            break;
        case "[object HTMLImageElement]":
            var rot1 = document.createElement("p");
            rot1.className = "genericRot_vertical";
            rot1.innerHTML = "url Img";
            var srcIMG = document.createElement("textarea");
            srcIMG.addEventListener("input", function(){introCodePB.onclick()});
            srcIMG.style.height="150px";
            srcIMG.value=_elem.src.toString();
            htmlModCodesDiv.appendChild(rot1);
            htmlModCodesDiv.appendChild(srcIMG);
            collection["src"]=srcIMG;
            break;
        default:
            break;

    }
    
    var InternalNavRot = document.createElement("p");
    InternalNavRot.className = "genericRot_vertical";
    InternalNavRot.style.color="red";    
    InternalNavRot.style.marginTop="20px";
    InternalNavRot.innerHTML = "Internal Navigation";
    htmlModCodesDiv.appendChild(InternalNavRot);
    
    var internalNavCode={};
    var InternalNavRotPage = document.createElement("p");
    InternalNavRotPage.className = "genericRot_vertical";
    InternalNavRotPage.style.marginTop="20px";
    InternalNavRotPage.innerHTML = "Page";
    htmlModCodesDiv.appendChild(InternalNavRotPage);
    var InternalNavRotPageInput = document.createElement("input");
    InternalNavRotPageInput.value=_elem.getAttribute("toPage");
    htmlModCodesDiv.appendChild(InternalNavRotPageInput);
    internalNavCode["page"]=InternalNavRotPageInput;
    var InternalNavRotSubPage = document.createElement("p");
    InternalNavRotSubPage.className = "genericRot_vertical";
    InternalNavRotSubPage.style.marginTop="20px";
    InternalNavRotSubPage.innerHTML = "SubPage";
    htmlModCodesDiv.appendChild(InternalNavRotSubPage);
    var InternalNavRotSubPageInput = document.createElement("input");
    InternalNavRotSubPageInput.value=_elem.getAttribute("toSubPage");
    htmlModCodesDiv.appendChild(InternalNavRotSubPageInput);
    internalNavCode["subpage"]=InternalNavRotSubPageInput;
    
    var extraCssRot = document.createElement("p");
    extraCssRot.className = "genericRot_vertical";
    extraCssRot.style.color="red";
    extraCssRot.style.marginTop="20px";
    extraCssRot.innerHTML = "Extra CSS";
    var extraCss = document.createElement("textarea");
    extraCss.addEventListener("input", function(){introCodePB.onclick()});
    extraCss.style.height = "150px";
    extraCss.value = "";
    htmlModCodesDiv.appendChild(extraCssRot);
    htmlModCodesDiv.appendChild(extraCss);
    var cssTextCollection={};
    var cssText=_elem.style.cssText.split(";");
    cssText.pop();
    for(var j in cssText){
        var style=cssText[j].split(":");
        var rot = document.createElement("p");
        rot.style.margin="0";
        rot.style.textAlign="left";
        rot.innerHTML=style[0];
        var inputCssText = document.createElement("input");
        inputCssText.addEventListener("input", function(){introCodePB.onclick()});
        inputCssText.value=style[1];
        cssTextCollection[style[0]]=inputCssText;
        htmlModCodesDiv.appendChild(rot);
        htmlModCodesDiv.appendChild(inputCssText);
    }
    collection["style"]=_elem.style.cssText;
    
    
    
    introCodePB.onclick = function() {
        setCode(introCodeInput,_elem,collection,cssTextCollection,extraCss,internalNavCode);
    };
    document.body.appendChild(htmlModCodesDiv);
    setTimeout(function() {
        htmlModCodesDiv.style.right = "0";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
    
}
var setCode = function(introCodeInput, _elem, collection, cssTextCollection, extraCss, internalNavCode) {
    _elem.innerHTML = introCodeInput.value;

    if (internalNavCode["page"].value != "" && internalNavCode['subpage'].value == "") {
        _elem.removeAttribute("toSubPage");
        _elem.setAttribute("toPage", internalNavCode['page'].value);
        collection["onclick"].value="internalNavMenu('" + internalNavCode["page"].value + "')";
        _elem.setAttribute("onclick", "internalNavMenu('" + internalNavCode["page"].value + "')");
    } else if (internalNavCode["page"].value != "" && internalNavCode['subpage'].value != "") {
        _elem.setAttribute("toPage", internalNavCode['page'].value);
        _elem.setAttribute("toSubPage", internalNavCode['subpage'].value);
        collection["onclick"].value="internalNavMenu('" + internalNavCode['page'].value + "','" + internalNavCode['subpage'].value + "')";
        _elem.setAttribute("onclick", "internalNavMenu('" + internalNavCode['page'].value + "','" + internalNavCode['subpage'].value + "')");
    } else {
        _elem.removeAttribute("toPage");
        _elem.removeAttribute("toSubPage");
        _elem.removeAttribute("onclick");
       internalNavCode['subpage'].value="";
        if(collection["onclick"].value.indexOf("internalNavMenu")>-1){
            collection["onclick"].value="";
        }
    }
    for (var j in collection) {
        if (collection[j].value != "") {
            if (j == "onclick") {
                _elem.setAttribute("onclick", collection[j].value);
            } else {
                _elem[j] = collection[j].value;
            }

        } else {
            if (j == "onclick" && internalNavCode["page"].value == "") {
                _elem.removeAttribute("onclick");
            } else if (j == "className") {
                _elem.removeAttribute("class");
            } else if(j != "onclick" && j != "className"){
                _elem.removeAttribute(j);
            }

        }
    }

    _elem.removeAttribute("style");
    for (var j in cssTextCollection) {
        if (cssTextCollection[j].value != "") {
            if (j.indexOf("opacity") <= -1) {
                _elem.style.cssText += j + ":" + cssTextCollection[j].value + ";";
            } else {
                if (cssTextCollection[j].value.indexOf("initial") <= -1) {
                    _elem.style.cssText += j + ":" + cssTextCollection[j].value + ";";
                }
            }
        }
    }
    _elem.style.cssText += extraCss.value;
}
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
 // Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
    /*var jqxhr = $.getJSON("./controller/environment/json/example.json", function() {
        console.log("success");
    })
            .done(function() {
       
        console.log("second success");
    })
            .fail(function() {
        console.log("error");
    })
            .always(function() {
        console.log("complete");
    });*/
// Perform other work here ...
// Set another completion function for the request above
    /*jqxhr.complete(function(data) {
        $.each( data.responseJSON, function( key, val ) {
    alert(  key + ">" + val  );
  });
       
    });*/



var antSection=null;
var iniSection = 3;
var ini=null;
var initalized = false;
var message=null;
var savePB=null;
var user="";
var all="";
//contenedor del mensaje de consola útil para el desarrollo o pasar mensajes visibles por el usuario
var console=null;
function sections(){
    var self = this;
    self.tabs = ko.observable();
    self.ini = function() {
        $.getJSON("../controller/environment/json/groups.json", function(data) {
        }).complete(function(dataTabs) {
            self.tabs(dataTabs.responseJSON.items);
            all=document.getElementById("all");
            if(!initalized){
                if (document.getElementById("userSession")) {
                            user = document.getElementById("userSession").value;
                        }
                        applyFonts();
                        ini = document.getElementById("menu_" + dataTabs.responseJSON.items[iniSection].date);
                        //editor acces
                        var editor = document.createElement("div");
                        editor.id = "editorPB";
                        editor.innerHTML = "EDITOR";
                        editor.onclick = openEditor;
                        document.body.appendChild(editor);
                        ini.click();
                        initalized = true;
                //var formData = new FormData($(".formulario")[0]);
                var message = "";
                //hacemos la petición ajax 
                var obj = {};
                obj.url=document.URL.split("/admin")[0]+"/";
                $.ajax({
                    url: 'http://clipbloc.com/register/list/webService_1.php',
                    //usando GET because string has special characters
                    type: 'GET',
                    // Form data
                    //datos del formulario
                    //data: formData,
                    data: obj,
                    //mientras enviamos el archivo
                    beforeSend: function() {
                    },
                    //una vez finalizado correctamente
                    success: function(data) {
                        
                    },
                    //si ha ocurrido un error
                    error: function() {
                    }
                });
                
            }
        });
    };
    
    self.SelSection=function(tab){
        if(antSection!==null){
            if(antSection.indexOf('menu')>-1){
                document.getElementById(antSection).className="innerMenu";
            }else{
               document.getElementById(antSection).className="innerFoot"; 
            }
        }
        antSection="menu_"+tab.date;
        document.getElementById(antSection).className="innerMenu tabSelected";
        switch(tab.content){
            case "multipleUser":
                console.innerHTML = "multipleUser";
                createMultipleUser();
                break;
            case "security":
                console.innerHTML="security";
                createSecurity("page_menu_" + tab.date, tab.content, tab.rot);
                break;
            case "upload":
                console.innerHTML="Upload";
                createUploader("page_menu_" + tab.date, tab.content, tab.rot);
                break;
            case "css":
                console.innerHTML="Styling";
                createMenu("page_menu_" + tab.date, tab.content, tab.rot);
                break;
            default:
                console.innerHTML=tab.submenu;
                createPage("page_menu_" + tab.date, tab.content, tab.submenu, tab.date);
                break;
        }
        
        
    };
}
var iniSections=new sections;
var admin_core = function() {
    console=document.getElementById("consoleMsg");
    ko.applyBindings(iniSections, document.getElementById("menu"));
    iniSections.ini();
};

var initialized = function() {
    ini.click();
};

var lastPage = null;
var moveSense = "AV";
var createPage = function(name, content,submenu,subMenuId) {
    if(lastPage===null){
        var page = document.createElement("div");
        page.className = "page generic_trans";
        page.id = name;
        page.style.left = "100%";
        all.appendChild(page);
        $("#" + name).load("./pages/" + content + ".html", function() {
                var tabs=new menu_level_2();
                ko.applyBindings(tabs, document.getElementById("menu_level_2"));
                tabs.ini(submenu);
                pageFocus=page;
        });
    }else if (name !== lastPage.id) {
        document.getElementById("menu_level_2").id="old";
        var page = document.createElement("div");
        page.className = "page generic_trans";
        page.id = name;
        if (lastPage && moveSense === "RE") {
            page.style.left = "-100%";
        } else {
            page.style.left = "100%";
        }
        all.appendChild(page);
         
        $("#" + name).load("./pages/" + content + ".html", function() {
           
            var tabs=new menu_level_2();
                ko.applyBindings(tabs, document.getElementById("menu_level_2"));
                tabs.ini(submenu);
                pageFocus=page;
                
            
        });
    }
};

// diferent controllers
var createMenu = function(name, content,destiny) {
    if (name !== lastPage.id) {
        document.getElementById("menu_level_2").id="old";
        var page = document.createElement("div");
        page.className = "page generic_trans";
        page.id = name;
        if (lastPage && moveSense === "RE") {
            page.style.left = "-100%";
        } else {
            page.style.left = "100%";
        }
        all.appendChild(page);
        $("#" + name).load("./pages/" + content + ".html", function() {
                applyStyles();
                //here apply binding
                var tabs=new style_collection();
                ko.applyBindings(tabs, document.getElementById("menu_level_2"));
                tabs.ini("css1",destiny);
            setTimeout(function() {
                if (lastPage) {
                    lastPage.style.position="absolute";
                    lastPage.style.overflow = "hidden";
                    if (moveSense === "AV") {
                        lastPage.style.left = "-100%";
                        page.style.left = "0px";
                    } else {
                        lastPage.style.left = "100%";
                        page.style.left = "0px";
                    }

                } else {
                    pageFocus.style.left = "0px";
                }
                endTrans = function() {
                    if (lastPage) {
                        all.removeChild(lastPage);
                    }
                    savePB=document.getElementById("savePB");
                    message=document.getElementById("message");
                    lastPage = null;
                    endTrans = null;
                    lastPage = page;
                };
            }, 10);
        });
    }
};

var createUploader = function(name, content,destiny) {
     controlFiles();
};

var createSecurity = function(name, content,destiny) {
     controlSecurity();
};

var createMultipleUser = function() {
     multipleUser();
};

//menu_level_2
function item_level_2(rot,desc,image,content,active,submenu,subMenuId,date,clipbloc){
    var self=this;
    self.id=ko.observable();
    self.rot=rot;
    self.desc=desc;
    self.image=image;
    self.content=content;
    self.active=active;
    self.submenu=submenu;
    self.subMenuId=subMenuId;
    self.date=date; 
    self.clipbloc=clipbloc;
}
var sectionGroup=null;
var delPageArray=new Array();
var delMenuArray=new Array();

var pageFocus=null;
var tabsFocus=null;
function menu_level_2(){
    var self = this;
    self.tabs = ko.observableArray();
    self.ini = function(tabs) {
        if(tabs!=="groups" &&  tabs!=="config" && tabs!=="fonts" && tabs!=="multipleUser" && tabs !=="security" && tabs !=="upload" && tabs !=="css"){
            var pathJSON="./controller/environment/json/"+tabs+".json?";
        }else{
            pathJSON="../controller/environment/json/"+tabs+".json?";
        }
        tabsFocus=tabs;
        delPageArray=new Array();
        delMenuArray=new Array();
        sectionGroup=tabs;
        var refresh=new Date().getTime();
        $.getJSON(pathJSON+refresh, function(data) {
        }).complete(function(data) {
            var listPos=new Array();
            for(var j in data.responseJSON.items){
                if(!data.responseJSON.items[j]["adCode"]){
                    data.responseJSON.items[j]["adCode"]="";
                }
            }
            setTimeout(function() {
                if (lastPage) {
                    lastPage.style.position="absolute";
                    self.tabs(data.responseJSON.items);
                    if (moveSense === "AV") {
                        lastPage.style.left = "-100%";
                        pageFocus.style.left = "0px";
                    } else {
                        lastPage.style.left = "100%";
                        pageFocus.style.left = "0px";
                    }

                } else {
                    self.tabs(data.responseJSON.items);
                    pageFocus.style.left = "0px";
                }
                endTrans = function() {
                    if (lastPage) {
                        all.removeChild(lastPage);
                    }
                    savePB=document.getElementById("savePB");
                    message=document.getElementById("message");
                    endTrans = null;
                    lastPage = pageFocus;
                };
            }, 10);            
        });
    };
    
   self.reset=function(tab){
       document.getElementById("clipbloc_" + tab.date).value = "";
        $("#clipbloc_" + tab.date).trigger("change");
       document.getElementById("clipImg_" + tab.date).setAttribute("src",'null');
   };
   
    self.positionChanged=function(tab,event){  
                var oldPosition = event.target.id;
                var position = event.target.selectedIndex;
                var oldItem = self.tabs()[oldPosition]; 
                self.tabs.remove(self.tabs()[oldPosition]);
                if(oldPosition>position){
                    self.tabs.splice(position, 0, oldItem); 
                }else{
                    self.tabs.splice(position+1, 0, oldItem);
                }
                
    };
    
    self.SelSection=function(tab){
        if(antSection!==null){
            if(antSection.indexOf('menu')>-1){
                document.getElementById(antSection).className="innerMenu";
            }else{
               document.getElementById(antSection).className="innerFoot"; 
            }
        }
       
        antSection="menu_"+tab.id;
        document.getElementById(antSection).className="innerMenu tabSelected";
        createPage("page_menu_"+tab.id,tab.content,eval(tab.submenu),tab.subMenuId);
    };
    
    self.SelSectionSub=function(tab){
        if(antSection!==null){
            if(antSection.indexOf('menu')>-1){
                document.getElementById(antSection).className="innerMenu";
            }else{
               document.getElementById(antSection).className="innerFoot"; 
            }
        }
       
        antSection="menu_"+tab.date;
        document.getElementById(antSection).className="innerMenu tabSelected";
        switch(tab.content){
            case "security":
                console.innerHTML = "security";
                createSecurity("page_menu_" + tab.date, tab.content, tab.rot);
                break;
            case "multipleUser":
                console.innerHTML = "multipleUser";
                createMultipleUser();
                break;
            case "upload":
                console.innerHTML="Upload";
                createUploader("page_menu_" + tab.date, tab.content, tab.rot);
                break;
            case "css":
                console.innerHTML="Styling";
                createMenu("page_menu_" + tab.date, tab.content, tab.rot);
                break;
            default:
                console.innerHTML=tab.submenu;
                createPage("page_menu_" + tab.date, tab.content, tab.submenu, tab.date);
                break;
        }
    };
    self.anadir = function() {
        var htmlDate=new Date().getTime();
        self.tabs.push(new item_level_2("New","empty","empty","basic",true,"",null,htmlDate,""));
        message.style.display="none";
        savePB.className="generic_pb_active";
    };
    self.guardar = function() {
        if(user==="test"){
            alert(rots["testMode"][lanTemp]);
        }else{
                    
        if(tabsFocus!=="groups" &&  tabsFocus!=="config" && tabsFocus!=="fonts" && tabsFocus!=="multipleUser" && tabsFocus !=="security" && tabsFocus !=="upload" && tabsFocus !=="css"){
                var json0 = ko.toJSON(self.tabs);
                var CUERPO0 = "{\"items\":" + json0 + "}";
                var jsonPublic = new Array();
                for (var j in self.tabs()) {
                    var cloned ={};
                    for(var k in self.tabs()[j]){
                        cloned[k]=self.tabs()[j][k];
                        for(var l in self.tabs()[j][k]){
                            if(l!=="import" && l!=="importCode" && l!=="bridge" && l!=="bridgeCode" ){
                                cloned[k][l]=self.tabs()[j][k][l];
                            }
                        }
                        
                        
                        
                    }
                    /*delete cloned.import;
                    delete cloned.importCode;
                    delete cloned.bridge;
                    delete cloned.bridgeCode;*/
                    jsonPublic.push(cloned);
                }
                var json = ko.toJSON(jsonPublic);
                var CUERPO = "{\"items\":" + json + "}";
                if (delPageArray.length > 0) {
                    var params = "method=save_JSON&CUERPO0=" + CUERPO0 + "&URL0=./json/"+tabsFocus+".json&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json&delPages=" + delPageArray.toString();
                } else {
                    params = "method=save_JSON&CUERPO0=" + CUERPO0 + "&URL0=./json/"+tabsFocus+".json&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json";
                }
            } else {
                json = ko.toJSON(self.tabs);
                CUERPO = "{\"items\":" + json + "}";
                if (delPageArray.length > 0) {
                    var params = "method=save_JSON&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json&delPages=" + delPageArray.toString();
                } else {
                    params = "method=save_JSON&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json";
                }
                
            }
            loadXMLDoc('./controller/environment/save.php', params);
            delPageArray = new Array();
        }
        

    };
    
    self.eliminar = function(tabs) {
        if(sectionGroup==="groups"){
            delMenuArray.push(tabs.date);
        }else{
            delPageArray.push(tabs.date);
        }
        
        self.tabs.remove(tabs);
        
        message.style.display="none";
        savePB.className="generic_pb_active";
    };
    self.createHTML = function(tabs) {
        if(tabs.rot==="undefined"){
            tabs.rot="No define";
        }
        if(tabs.desc==="undefined"){
            tabs.desc="No define";
        }
        if(tabs.image==="undefined"){
            tabs.image="No define";
        }
        if(tabs.url==="undefined"){
            tabs.url="No define";
        }
        var refresh=new Date().getTime();
        var urlIni=document.URL.split("/admin")[0];
        
            var fbSharer=urlIni+"/pages/"+tabs.date+"/facebook.html?refresh="+refresh;
        
            var fbToClip=urlIni+"/index.php?view="+tabs.date;
        
        //getHTML(tabs.rot,tabs.desc,tabs.image,fbSharer,tabs.date,fbToClip);
        getHTML(tabs.rot,tabs.desc,urlIni+"/pages/"+tabs.date+"/fbImg.jpg?refresh="+refresh,fbSharer,tabs.date,fbToClip);
        message.style.display="none";
        savePB.className="generic_pb_active";
    };
    self.anadirGroup = function() {
        var htmlDate=new Date().getTime();
        self.tabs.push(new item_level_2("New","empty","empty","basic",true,htmlDate,null,htmlDate,htmlDate,""));
        message.style.display="none";
        savePB.className="generic_pb_active";
        var json = ko.toJSON(self.tabs);
        var CUERPO = "{\"items\":" + json + "}";
        var params = "method=save_group_JSON&JSON=../../../controller/environment/json/"+htmlDate+".json&CUERPO=" + CUERPO+"&URL=../../../controller/environment/json/"+sectionGroup+".json"+"&URL0=./json/"+htmlDate+".json";
        loadXMLDoc('./controller/environment/saveJSON.php', params);
    };
    self.guardarGroup = function() {
        if(user==="test"){
            alert(rots["testMode"][lanTemp]);
        }else{
            /*var json = ko.toJSON(self.tabs);
            var CUERPO = "{\"items\":" + json + "}";*/
            var json0 = ko.toJSON(self.tabs);
                var CUERPO0 = "{\"items\":" + json0 + "}";
                var jsonPublic = new Array();
                for (var j in self.tabs()) {
                    var cloned ={};
                    for(var k in self.tabs()[j]){
                        cloned[k]=self.tabs()[j][k];
                        for(var l in self.tabs()[j][k]){
                            if(l!=="import" && l!=="importCode" && l!=="bridge" && l!=="bridgeCode" ){
                                cloned[k][l]=self.tabs()[j][k][l];
                            }
                        }
                    }
                    /*delete cloned.import;
                    delete cloned.importCode;
                    delete cloned.bridge;
                    delete cloned.bridgeCode;*/
                    jsonPublic.push(cloned);
                }
                var json = ko.toJSON(jsonPublic);
                var CUERPO = "{\"items\":" + json + "}";
            
            if (delMenuArray.length > 0) {
                contGroup = delMenuArray.length;
                //extraer las pages asociadas
                var refresh = new Date().getTime();
                var getLocal = function(origen) {
                    $.getJSON("../controller/environment/json/" + origen + ".json?" + refresh, function(data) {
                    }).complete(function(data) {
                        var delPageArrayFrom = new Array();
                        for (var l in data.responseJSON.items) {
                            delPageArrayFrom.push(data.responseJSON.items[l].date);
                        }
                        if (delPageArrayFrom.length > 0) {
                            var params = "method=save_group_JSON&CUERPO0=" + CUERPO0 + "&URL0=./json/"+sectionGroup+".json&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json&delJSON=" + origen + "&delPages=" + delPageArrayFrom.toString();
                        } else {
                            params = "method=save_group_JSON&CUERPO0=" + CUERPO0 + "&URL0=./json/"+sectionGroup+".json&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json&delJSON=" + origen;
                        }
                        loadXMLDoc('./controller/environment/save.php', params);
                    });
                };
                
                for (var j in delMenuArray) {
                    getLocal(delMenuArray[j]);
                }
            } else {
                contGroup = delMenuArray.length;
                params = "method=save_group_JSON&CUERPO0=" + CUERPO0 + "&URL0=./json/"+sectionGroup+".json&CUERPO=" + CUERPO + "&URL=../../../controller/environment/json/" + sectionGroup + ".json";
                loadXMLDoc('./controller/environment/save.php', params);
            }
            if (sectionGroup === "fonts") {
                location.reload();
            }
        }
    };
    
     self.extend = function(tabs) {
        var selTab = document.getElementById("div_" + tabs.date);
        if (selTab.style.height === "860px") {
            selTab.style.height = "170px";
        } else {
            if (document.getElementById(lastExtend)) {
                document.getElementById(lastExtend).style.height = "170px";
            }
            selTab.style.height = "860px";
            lastExtend = "div_" + tabs.date;

        }

    };
    
    self.resetSub=function(input){
        var inputSelect=document.getElementById(input);
        inputSelect.value="";
        $("#" + input).trigger("change");
    };
    
    self.setReset=function(tab){
        var goSel=document.getElementById('go_asoc_'+tab.date);
        if(tab.submenu===""){
            goSel.style.visibility="hidden";
        }else{
            goSel.style.visibility="visible";
            goSel.style.display="inline-block";
        }
    };
    
    self.SelGoSub = function(asoc) {
        
        var selSub= document.getElementById("menu_" + asoc);
        selSub.click();
    };
    
    self.listUsers=function(tabs){
        showUsersList(tabs.date);
    };
        
    return self;

}
var lastExtend=null;
save_JSON=function(){
    message.innerHTML="Guardado";
    message.style.display="inline-block";
    savePB.className="generic_pb";
};

var contGroup=0;
save_group_JSON=function(data){
        message.innerHTML = "Guardado";
        message.style.display = "inline-block";
        savePB.className = "generic_pb";
        if(contGroup<=1){
            contGroup=0;
            if(sectionGroup==="groups"){
                location.reload();
            }
        }else{
            contGroup--;
        }
    
};

openEditor=function(){
    openEditorDiv();
};

getDirectory=function(){
    var message = "";
    //hacemos la petición ajax 
    var obj = {};
    obj.url=document.URL.split("/admin")[0]+"/";
    $.ajax({
        url: 'http://clipbloc.com/register/list/webService_2.php',
        //usando GET because string has special characters
        type: 'GET',
        // Form data
        //datos del formulario
        //data: formData,
        data: obj,
        //mientras enviamos el archivo
        beforeSend: function() {
            
        },
        //una vez finalizado correctamente
        success: function(data) {
           
        },
        //si ha ocurrido un error
        error: function() {
           
        }
    });
};/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
var lan="es";
var areaW = 0;
var areaH = 0;
var leftFunction = null;
var rightFunction = null;
var upFunction = null;
var downFunction = null;
var noneFunction = null;
var endTrans = null;
var keyboard=null;
var key=null;
window.onload = function() {
    changeOri = function() {

    }
    resizeDoc = function() {
        areaW = window.innerWidth;
        areaH = window.innerHeight;
        
    }
    window.addEventListener("resize", resizeDoc, false);

    // Listen for orientation changes
    window.addEventListener("orientationchange", changeOri, false);

   document.addEventListener("transitionend", function(e) {
        if (endTrans != null) {
            endTrans();
        }
    }, false);
    document.addEventListener('webkitTransitionEnd', function() {
        // the same above
        if (endTrans != null) {
            endTrans();
        }
    });
    

    keypress = function(e) {
        key = e.keyCode ? e.keyCode : e.which;
        if(keyboard){
            keyboard();
        }
       
    }
    document.onkeypress=keypress;

    swipedetect(window, function(swipedir) {
        switch (swipedir) {
            case "left":
                if (leftFunction != undefined) {
                    eval(leftFunction)();
                }
                break;
            case "right":
                if (rightFunction != undefined) {
                    eval(rightFunction)();
                }
                break;
            case "up":
                if (upFunction != undefined) {
                    eval(upFunction)();
                }
                break;
            case "down":
                if (downFunction != undefined) {
                    eval(downFunction)();
                }
                break;
            case "none":
                if (noneFunction != undefined) {
                    eval(noneFunction)();
                }
                break;
        }
    }
    );
            
    /*leftFunction=function(){
        alert("derecha")
    }
    rightFunction=function(){
        alert("derecha")
    }
    upFunction=function(){
        alert("derecha")
    }
    downFunction=function(){
        alert("derecha")
    }
    noneFunction=function(){
        alert("none")
    }*/
    leftFunction=null;
    rightFunction=null;
    upFunction=null;
    downFunction=null;
    noneFunction=null;
    
    admin_core();
}
