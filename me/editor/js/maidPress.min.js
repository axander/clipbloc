
var req; // global variable to hold request object
function loadXMLDoc_admin(url, params)
{
  if(window.XMLHttpRequest) {
    try {
      req = new XMLHttpRequest();
    } catch(e) {
      req = false;
    }
  } else if(window.ActiveXObject) {
    try {
      req = new ActiveXObject("Msxml2.XMLHTTP");
    } catch(e) {
      try {
        req = new ActiveXObject("Microsoft.XMLHTTP");
      } catch(e) {
        req = false;
      }
    }
  }
  if(req) {
    req.onreadystatechange = processReqChange_admin;
    req.open("POST", url, true);
    req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    req.send(params);
    return true;
  }
}


function getNodeValue_admin(parent, tagName)
{
  var node = parent.getElementsByTagName(tagName)[0];
  return (node && node.firstChild) ? node.firstChild.nodeValue : false;
}
function processReqChange_admin() 
{
     
  if(req.readyState == 4 && req.status == 200) {
      
    
        
        var cadenaXML=  req.responseText.replace("/**/","");
       function StringtoXML(text){
                if (window.ActiveXObject){
                   
                  var doc=new ActiveXObject('Microsoft.XMLDOM');
                  doc.async='false';
                  doc.loadXML(text);
                } else {
                    
                  var parser=new DOMParser();
                  var doc=parser.parseFromString(text,'text/xml');
                }
                return doc;
            }
 
	//example of application:
	var doc = StringtoXML(cadenaXML);
       response  = doc;
  
    
    var commands = response.getElementsByTagName('command');
    var html=response.getElementsByTagName('command');
    
    
    
    for(var i=0; i < commands.length; i++) {
      method = commands[i].getAttribute('method');
      
      
      switch(method) {
         case 'get_XML':
             var message = getNodeValue(commands[i], 'message');
             get_XML(base64_decode(message));
         break;
        
        default:
          window.console.log("Error: unrecognised method '" + method + "' in processReqChange()");
      }
    }
  }
}
function base64_decode(data) {
  //  discuss at: http://phpjs.org/functions/base64_decode/
  // original by: Tyler Akins (http://rumkin.com)
  // improved by: Thunder.m
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //    input by: Aman Gupta
  //    input by: Brett Zamir (http://brett-zamir.me)
  // bugfixed by: Onno Marsman
  // bugfixed by: Pellentesque Malesuada
  // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  //   example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
  //   returns 1: 'Kevin van Zonneveld'
  //   example 2: base64_decode('YQ===');
  //   returns 2: 'a'

  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    dec = '',
    tmp_arr = [];

  if (!data) {
    return data;
  }

  data += '';

  do { // unpack four hexets into three octets using index points in b64
    h1 = b64.indexOf(data.charAt(i++));
    h2 = b64.indexOf(data.charAt(i++));
    h3 = b64.indexOf(data.charAt(i++));
    h4 = b64.indexOf(data.charAt(i++));

    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

    o1 = bits >> 16 & 0xff;
    o2 = bits >> 8 & 0xff;
    o3 = bits & 0xff;

    if (h3 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1);
    } else if (h4 == 64) {
      tmp_arr[ac++] = String.fromCharCode(o1, o2);
    } else {
      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    }
  } while (i < data.length);

  dec = tmp_arr.join('');

  return dec.replace(/\0+$/, '');
}
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

function MaidPress(a, b, c, d, e, f, g) {
    ini(a, b, c, d, e, f, g);


}
setTimeout(scrollTo, 0, 0, 1);
var MODE = "VISOR";
var OLDSUBMODE = "MAIN";
var SUBMODE = "MAIN";
// vars user enviromment
var url;
var proxy;
var env;
var homeRoot;
var local;
var root;
var serverCall;
var ini = false;
var editor = false;
var permission;
var tempPermission;
var loadPermission;
//vars Stage creation & dims
var canvasCont = document.createElement("div");
canvasCont.id="container";
canvasCont.style.position = "absolute";
canvasCont.style.top = "0px";
canvasCont.style.left = "0px";
//var innerCanvasCont='<div  id="contCanvas" position: relative; top: 0px; left: 0px;z-index:0"></div>';
//canvasCont.innerHtml=innerCanvasCont;
var theCanvas = document.createElement("canvas");
var context = theCanvas.getContext("2d");
var areaW = window.innerWidth;
var areaH = window.innerHeight;

//corporative data
//colors
var mainColor = "#00d8ff";

//preloads
var graphPreload = true;
var bookPreload = false;
var pagePreload = false;
//data xml
var xmlDoc;
var configXML;
var pageXML;
var listXML;
var configArray = new Array(new Array(configXML, "config", "config"), new Array(fontsXML, "fonts", "fonts"), new Array(listXML, "list", "books"), new Array(pageXML, "book", "pages"));
var pages = new Array;
var books = new Array;
var fontsXML = new Array;
var XMLCollection = new Object;
var PBW = 80;



var detectMove = false;
var detectMoveOfssetX;
var detectMoveOfssetY;
var BGImgH = 0;



var Images = new Object;
var img2;

var pageXvar = 0;
var next;
var numElements = 0;
var element = 0;
var pageX = 0;
var pageXoffset = 0;
var pageY = 0;
var pageYoffset = 0;
var scrollPagesTween;
var scrollPageY = 0;
var pageYoffsetGeneral = 0;
var scrollPageYGeneral = 0;
var direction = 1;
var pageFocus = 0;
var refreshStatus = false;
var preloadFunction;
var scrolleable = false;
var maxHeight = 0;
var tool;

var numPage = 0;
var numPages = 0;
var numBooks = 0;
var backPage = null;

var bookHome;
var pagesHome;
var bookSelect = null;
var canvasCapture;
var Maids = new Array;
var clickY = 0;
var clickX = 0;
var imgLibrary = new Object;
var imgLibraryStatus = new Array;

var scaleXOffset;
var scaleYOffset;

var navigationMode = false;
var lanArray = {es: "Espa\u00f1ol", en: "English", fr: "Fran\xE7ais", de: "Deutsch"};
//var arrayLan=new Array("es","en","fr","de");
var arrayLan = new Array("es", "en");
var lan = navigator.language;
if (lan != "es") {
    lan = "en";
}
var lanSel = false;
var assocMsg = {es: "PAGINA ASOCIADA", en: "ASSOCIATE PAGE", fr: "PAGINA ASOCIADA", de: "ASSOCIATE PAGE"};
var loadingMsg = {es: "CARGANDO CONTENIDO", en: "LOADING CONTENT", fr: "CARGANDO CONTENIDO", de: "LOADING CONTENT"};

function MaidPress(a, b, c, d, e, f, g) {

    user = f;
    permission = Number(e);
    tempPermission = Number(e);
    root = a;
    homeRoot = a;
    proxy = "ed/proxyImg.php?url=";
    env = c;
    local = d;
    serverCall = g;//si server admite httpXMLRequest
    //root creation to config.xml
    if (local) {
        url = root + "xml/" + "config.xml?refresh=" + randomRoot();
    } else {
        url = proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + "config.xml") + '&env=' + env + '&random=' + randomRoot();
    }

    //Drawing Area Creation
    canvasCont.style.width = areaW;
    canvasCont.style.height = areaH;
    document.body.appendChild(canvasCont);
    theCanvas.width = areaW;
    theCanvas.height = areaH;
    canvasCont.appendChild(theCanvas);
    window.addEventListener("resize", resizeDoc, false);
    //clearStage();
    loadBG();
    function loadBG() {
        var BG = new Image();
        BG.crossOrigin = 'crossdomain.xml';
        BG.src = "http://3.bp.blogspot.com/-7LfBOx_iCvU/Uhomr-VqHxI/AAAAAAAAAIQ/xuSyMIV8hQ0/s1600/bg1.jpg";
        BG.onload = function() {
            imgLibrary["BG"] = BG;
            loadAvatar()
        }
        BG.onerror = function() {
            imgLibrary["BG"] = null;
            loadAvatar();
        }
       
    }
    function loadAvatar() {
        var Avatar = new Image();
        Avatar.crossOrigin = 'crossdomain.xml';
        Avatar.src = a + common.toolImages.avatarImg[0];
        Avatar.onload = function() {
            common.toolImages.avatarImg[1] = Avatar;
            numElemInterfaz = common.graphs.length;
            debuggVersion("V.1");
            Offsset = 0;
            tween(theCanvas, "fade", {alpha: 100}, velFade, init, Quad_easeInOut, "VISOR", crearLogoEntrada);
        }
        Avatar.onerror = function() {
            common.toolImages.avatarImg[1] = null;
            preloadGraphs(0);
            debuggVersion("V.1");
        }
    }
    createUploaderButton();
}
function crearLogoEntrada() {
    drawRect(0, 0, areaW, areaH, "#2d2d2d", 1, false);
    //drawBGIMG(imgLibrary["BG"]);
    preX = Math.floor(areaW / 2 - common.toolImages.avatarImg[1].naturalWidth / 2);
    preY = Math.floor(areaH / 2 - common.toolImages.avatarImg[1].naturalHeight / 2);
    preW = common.toolImages.avatarImg[1].naturalWidth;
    preH = common.toolImages.avatarImg[1].naturalHeight;
    //context.fillStyle="0099ff";
    context.drawImage(common.toolImages.avatarImg[1], preX, preY);
    drawText("normal 25px arial ", "middle", "center", "#ffffff", "HOME", areaW / 2, areaH - 50);
}
function drawBGIMG(Img) {
    var imgW = Img.naturalWidth;
    var imgH = Img.naturalHeight;
    var imgEndH;
    var imgEndW;
    var centerX;
    var centerY;
    context.save();
    if (areaW * imgH / imgW < areaH) {
        imgEndH = areaH;
        imgEndW = imgEndH * imgW / imgH;
        centerX = (areaW / 2 - imgEndW / 2);
        centerY = 0;
        context.drawImage(Img, -((imgH * areaW / areaH) / 2 - imgW / 2), 0, (imgH * areaW / areaH), imgH, 0, 0, areaW, areaH);
    } else {
        imgEndW = areaW;
        imgEndH = imgEndW * imgH / imgW;
        centerY = (areaH / 2 - imgEndH / 2);
        centerX = 0;
        context.drawImage(Img, 0, 0, imgEndW, imgEndH);
    }
    context.restore();
}
function init() {
    numElemInterfaz = common.graphs.length;
    preloadGraphs(0);
}
var rotation = 0;
function draw() {
    context.clearRect(0, 0, areaW, areaH);
    context.globalCompositeOperation = 'destination-over';
    context.save();
    context.translate(areaW / 2, areaH / 2);
    rotation += 1;
    context.rotate(rotation * Math.PI / 64);
    context.translate(-areaW / 2, -areaH / 2);
    context.drawImage(cog, areaW / 2 - 13.5, areaH / 2 - 13.5);
    context.restore();
}
//Graphs
var numElemInterfaz;
function preloadGraphs(graph) {
    if (graph <= common.graphs.length - 1) {
        var img = new Image();
        img.crossOrigin = 'crossdomain.xml';
        img.src = common.toolImages[common.graphs[graph]][0];
        img.onload = function() {
            common.toolImages[common.graphs[graph]][1] = img;
            writeLoadStatus(graph);
            //preloadGraphs(graph + 1);
            setTimeout(function(){ preloadGraphs(graph + 1); }, 100);
            
        };
        img.onerror = function() {
            common.toolImages[common.graphs[graph]][1] = img;
            writeLoadStatus(graph);
            //preloadGraphs(graph + 1);
            setTimeout(function(){ preloadGraphs(graph + 1); }, 100);
        };
    } else {
        graphPreload = false;
        bookPreload = true;
        createHTMLPB();
        createFreeToolPB();
        createMaintenancePB();
        getXML();
    }
}
//status loader writer
var preW;
var preH;
var preX;
var preY;
function writeLoadStatus(num) {
    drawRect(0, 0, areaW, areaH, "#eee", 1, false);
    //drawBGIMG(imgLibrary["BG"]);
    context.fillStyle = "#fff";
    preX = Math.floor(Math.floor(areaW / 2 - common.toolImages.avatarImg[1].naturalWidth / 2));
    preY = Math.floor(Math.floor(areaH / 2 - common.toolImages.avatarImg[1].naturalHeight / 2));
    preW = common.toolImages.avatarImg[1].naturalWidth;
    preH = common.toolImages.avatarImg[1].naturalHeight;
    context.drawImage(common.toolImages.avatarImg[1], preX, preY-200);
    drawText("normal 25px arial ", "middle", "center", "#666", "HOME", areaW / 2, areaH - 50);
    context.fillStyle = "#666";
    var statusBarW = 200;
    var padding=10;
    drawText("normal 15px arial ", "middle", "center", "#666", "Loading...", areaW / 2, preY + preH + 50-4*padding);
    context.fillRect(areaW / 2 - statusBarW / 2-padding, preY + preH + 50-padding, statusBarW+2*padding, 20);
    context.fillStyle = "#fff";
    if (graphPreload) {
        context.fillRect(areaW / 2 - statusBarW / 2, preY + preH + 50, (num + 1) * statusBarW / numElemInterfaz, 2);
    } else if (bookPreload) {
        context.fillRect(areaW / 2 - statusBarW / 2, preY + preH + 50, (num + 1) * statusBarW / numBooks, 2);
    } else {
        context.fillRect(areaW / 2 - statusBarW / 2, preY + preH + 50, (element + 1) * statusBarW / numElements, 2);
    }
    
}


//images

common={
'toolImages':{
    'marcaFlyPB':new Array("img/fly.png",new Image()),
    'refreshPB':new Array("img/Refresh.png",new Image()),
    'booksPB':new Array("img/BOOKS.png",new Image()),
    'pagesPB':new Array("img/pages.png",new Image()),
    'homePB':new Array("img/HOME.png",new Image()),
    'editarPB':new Array("img/editar.png",new Image()),
    'recordPB':new Array("img/recordPB.png",new Image()),
    'avListBookPB':new Array("img/av.png",new Image()),
    'reListBookPB':new Array("img/re.png",new Image()),
    'avPB':new Array("img/av1.png",new Image()),
    'rePB':new Array("img/re1.png",new Image()),
    'editMaidBG':new Array("img/editMaidBG.png",new Image()),
    'bgImgGen':new Array("img/BG.jpg",new Image()),
    'lockPB':new Array("img/lock.png",new Image()),
    'unlockPB':new Array("img/unlock.png",new Image()),
    'visPB':new Array("img/vis.png",new Image()),
    'novisPB':new Array("img/novis.png",new Image()),
    'backPB':new Array("img/back.png",new Image()),
    'closePB':new Array("img/close.png",new Image()),
    'videoIco':new Array("img/video.png",new Image()),
    'youtubeIco':new Array("img/youtube.png",new Image()),
    'textFormatPanel':new Array("img/textFormatPanel.png",new Image()),
    'textBoldPanel':new Array("img/textBoldPanel.png",new Image()),
    'espectro':new Array("img/espectro.jpg",new Image()),
    'editorPanel':new Array("img/editorPanel.png",new Image()),
    'bookPanel':new Array("img/bookPanel.png",new Image()),
    'assocPB':new Array("img/assoc.png",new Image()),
    'deassocPB':new Array("img/deassoc.png",new Image()),
    'asocPanel':new Array("img/asocPanel.png",new Image()),
    'errorImg':new Array("img/error.png",new Image()),
    'avatarImg':new Array("img/avatar.png",new Image()),
    'directFormatText':new Array("img/directformatText.png",new Image()),
    'directFormatImg':new Array("img/directformatImg.png",new Image()),
    'directFormatRect':new Array("img/directformatRect.png",new Image()),
    'directFormatBGImg':new Array("img/directformatBGImg.png",new Image()),
    'directAddMaid':new Array("img/directAddMaid.png",new Image()),
    'directPanelYoutube':new Array("img/directPanelYoutube.png",new Image()),
    'TRpb':new Array("img/TR.png",new Image()),
    'TLpb':new Array("img/TL.png",new Image()),
    'BRpb':new Array("img/BR.png",new Image()),
    'BLpb':new Array("img/BL.png",new Image())
    },
'graphs':new Array('marcaFlyPB',
                        'avatarImg',
                        'refreshPB',
                        'booksPB',
                        'pagesPB',
                        'homePB',
                        'editarPB',
                        'recordPB',
                        'avListBookPB',
                        'reListBookPB',
                        'editMaidBG',
                        'bgImgGen',
                        'lockPB',
                        'unlockPB',
                        'visPB',
                        'novisPB',
                        'backPB',
                        'closePB',
                        'videoIco',
                        'youtubeIco',
                        'textFormatPanel',
                        'textBoldPanel',
                        'espectro',
                        'editorPanel',
                        'bookPanel',
                        'assocPB',
                        'deassocPB',
                        'asocPanel',
                        'directAddMaid',
                        'directFormatText',
                        'directFormatImg',
                        'directFormatRect',
                        'directFormatBGImg',
                        'directPanelYoutube',
                        'TLpb',
                        'TRpb',
                        'BLpb',
                        'BRpb',
                        'avPB',
                        'rePB')
};
//------------commons---------------
//
drawRect= function(x,y,w,h,color,alpha,stroke,colorStroke){
	context.save();
	context.globalAlpha=alpha;
	if(stroke){
		context.lineWidth=1;
		context.strokeStyle=colorStroke;
		context.strokeRect(x,y,w,h);
	}else{
		context.fillStyle = color;
		context.fillRect(x,y,w,h);
	}
	context.restore();
};
drawBall=function(x,y,r,color){
	context.save();
	context.beginPath();			
	context.fillStyle=color;
	context.arc(x, y, r, 0, Math.PI*2, true); 
	context.fill();
	context.closePath();
	context.restore();
};
drawText=function(style,textBaseline,align,color,text,x,y){
	//reference http://www.w3schools.com/tags/canvas_textbaseline.asp
	context.save();
	context.textBaseline=textBaseline;
	context.fillStyle=color;
	context.font= style;
	context.textAlign = align;
	context.fillText(text,x,y);
	context.restore();
};


//-------------------------fonts------------------------

var fonts={
      "type":"text/javascript",
      "async":"true",
      "arrayFontsGoogle" : new Array(),
      "arrayFontsTypekit":new Array(),
      "arrayFontsAscender":new Array(),
      "arrayFontsMonotype":new Array(),
      "arrayFontsFontdeck":new Array(),
      "arrayFonts":new Array("Arial","Arial Black","Comic Sans MS","Courier","Georgia","Impact","Lucida Console","Lucida Sans Unicode","Palatino Linotype","Tahoma","Times New Roman","Trebuchet MS","Verdana","Symbol","Webdings","Wingdings","MS Sans Serif","MS Serif")

};
function iniFonts(){
        var s = document.getElementsByTagName('script')[0];
	if(fonts.arrayFontsGoogle.length>0){
		WebFontConfig = {
				google: { families: fonts.arrayFontsGoogle }
			  };
			  (function() {
				var wf = document.createElement('script');
				wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
					'://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
				wf.type = fonts.type;
				wf.async = fonts.async;
				s.parentNode.insertBefore(wf, s);
			  })();
	}

	if(fonts.arrayFontsTypekit.length>0){
	WebFontConfig1 = {
			typekit: { id: arrayFontsTypekit }
		  };
		  (function() {
			var wf = document.createElement('script');
			wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
				'://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
			wf.type = fonts.type;
			wf.async = fonts.async;
			s.parentNode.insertBefore(wf, s);
		  })();
	}
	if(fonts.arrayFontsAscender.length>0){
	WebFontConfig2 = {
			ascender: { key:"",families: fonts.arrayFontsAscender }
		  };
		  (function() {
			var wf = document.createElement('script');
			wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
				'://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
			wf.type = fonts.type;
			wf.async = fonts.async;
			s.parentNode.insertBefore(wf, s);
		  })();
	}
	if(fonts.arrayFontsMonotype.length>0){
	WebFontConfig3 = {
			monotype: { projectId: fonts.arrayFontsMonotype }
		  };
		  (function() {
			var wf = document.createElement('script');
			wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
				'://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
			wf.type = fonts.type;
			wf.async = fonts.async;
			s.parentNode.insertBefore(wf, s);
		  })();
	}
	if(fonts.arrayFontsFontdeck.length>0){
	WebFontConfig4 = {
			fontdeck: { id: fonts.arrayFontsFontdeck }
		  };
		  (function() {
			var wf = document.createElement('script');
			wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
				'://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
			wf.type = fonts.type;
			wf.async = fonts.async;
			s.parentNode.insertBefore(wf, s);
		  })();
	}
}/*var getXML = function(){
    alert("here");
    if (url.indexOf("http://") === -1) {
            url = env + url;
        }
    var params = "method=get_XML_Pages&url="+url;
    loadXMLDoc_admin('ed/proxyXML_1.php', params);
}
var get_XML =function(data){
    alert("here");
    //mData = JSON.parse(data);    
    pageXMLData = data;
    alert(pageXMLData);
}*/
function getXML() {
    if (window.XMLHttpRequest) {
        var d = new XMLHttpRequest();
        if (url.indexOf("http://") === -1) {
            url = env + url;
        }
        d.open("GET", "ed/proxyXML.php?url=" + url, true);
       
        d.onreadystatechange = function() {
            if (d.readyState === 4 && d.status === 200) {
                // Output the results
                xmlDoc = d.responseXML;
                XMLCollection[url] = xmlDoc;
                var configCreated = createConfig();
                if (configCreated) {
                    numBooks = books.length;
                    for (var r in pages) {
                        pagePosYLibrary[numPages] = 0;
                    }
                    numPages = pages.length;
                    bookHome = books[0];
                    loadBook(0);

                } else {
                    // waiting for the call to complete
                }
            }
        };
        d.send(null);
    }
}
var arrayConfig = new Object();//array with params from each block except home
var arrayConfigHome = new Object();//array with params from home
var arrayConfigDesc = {Title: "Bloc Tittle", Description: "Bloc Description", Extend: "More Info", booksAllow: "0->not allow  1-> allow", Public: "0-> Public  1-> Private"};//array with descriptions of config params
function createConfig() {
    for (var j = 0; j <= configArray.length - 1; j++) {
        if (configArray[j][1] == "config") {
            if (xmlDoc.getElementsByTagName(configArray[j][1]) != undefined) {
                configArray[j][0] = xmlDoc.getElementsByTagName(configArray[j][1]);
                for (var i = 0; i < configArray[j][0].length; i++) {
                    var notWhitespace = /\S/
                    for (var k = 0; k < configArray[j][0][i].childNodes.length; k++) {
                        if ((configArray[j][0][i].childNodes[j].nodeType == 3) && (!notWhitespace.test(configArray[j][0][i].childNodes[j].nodeValue))) {
                            configArray[j][0][i].removeChild(configArray[j][0][i].childNodes[k]);
                            k--;
                        }
                    }
                    for (var k = 0; k < configArray[j][0][i].childNodes.length; k++) {
                        if (configArray[j][0][i].childNodes[k].nodeType != 3) {

                            if (configArray[j][0][i].childNodes[k].hasChildNodes()) {
                                if (configArray[j][0][i].childNodes[k].nodeType != 3 && configArray[j][0][i].childNodes[k].hasChildNodes()) {
                                    if (bookSelect != null) {
                                        arrayConfig[configArray[j][0][i].childNodes[k].nodeName] = configArray[j][0][i].childNodes[k].firstChild.nodeValue;
                                    } else {
                                        //create array config descriptions first time
                                        arrayConfigHome[configArray[j][0][i].childNodes[k].nodeName] = configArray[j][0][i].childNodes[k].firstChild.nodeValue;
                                        arrayConfig[configArray[j][0][i].childNodes[k].nodeName] = configArray[j][0][i].childNodes[k].firstChild.nodeValue;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            //fonts loading
        } else if (configArray[j][1] == "fonts") {
            configArray[j][0] = xmlDoc.getElementsByTagName(configArray[j][1]);
            for (var i = 0; i < configArray[j][0].length; i++) {
                var notWhitespace = /\S/
                for (var k = 0; k < configArray[j][0][i].childNodes.length; k++) {
                    if ((configArray[j][0][i].childNodes[j].nodeType == 3) && (!notWhitespace.test(configArray[j][0][i].childNodes[j].nodeValue))) {
                        configArray[j][0][i].removeChild(configArray[j][0][i].childNodes[k]);
                        k--;
                    }
                }
                for (var k = 0; k < configArray[j][0][i].childNodes.length; k++) {
                    if (configArray[j][0][i].childNodes[k].nodeType != 3) {

                        if (configArray[j][0][i].childNodes[k].hasChildNodes()) {
                            if (configArray[j][0][i].childNodes[k].nodeType != 3 && configArray[j][0][i].childNodes[k].hasChildNodes()) {
                                var strFonts = configArray[j][0][i].childNodes[k].firstChild.nodeValue;
                                switch (configArray[j][0][i].childNodes[k].nodeName) {
                                    case ("google"):
                                        fonts.arrayFontsGoogle = strFonts.split(",");
                                        break;
                                    case ("typekit"):
                                        fonts.arrayFontsTypekit = strFonts.split(",");
                                        break;
                                    case ("ascender"):
                                        fonts.arrayFontsAscender = strFonts.split(",");
                                        break;
                                    case ("monotype"):
                                        fonts.arrayFontsMonotype = strFonts.split(",");
                                        break;
                                    case ("fontdeck"):
                                        fonts.arrayFontsFontdeck = strFonts.split(",");
                                        break;
                                }
                            }
                        }
                    }
                }

            }
            iniFonts();
        } else {
            configArray[j][1] = xmlDoc.getElementsByTagName(configArray[j][1]);
            parseXML(configArray[j][1], configArray[j][2]);
        }
        /*else if(!ini){
         alert("Here1"+j);
         configArray[j][1]=xmlDoc.getElementsByTagName(configArray[j][1]);
         parseXML(configArray[j][1],configArray[j][2]);
         }else if(configArray[0][2]!=books){
         alert("Here2");
         configArray[j][1]=xmlDoc.getElementsByTagName(configArray[j][1]);
         parseXML(configArray[j][1],configArray[j][2]);	
         }*/
    }
    if (arrayConfig.temp > 0 && tempPermission == 2) {
        navigationMode = false;
    }
    return true;
}
function parseXML(XMLList, bloc) {
    for (var i = 0; i < XMLList.length; i++) {
        var notWhitespace = /\S/
        for (var j = 0; j < XMLList[i].childNodes.length; j++) {
            if ((XMLList[i].childNodes[j].nodeType == 3) && (!notWhitespace.test(XMLList[i].childNodes[j].nodeValue))) {
                XMLList[i].removeChild(XMLList[i].childNodes[j]);
                j--;
            }
        }
        for (var j = 0; j < XMLList[i].childNodes.length; j++) {

            if (XMLList[i].childNodes[j].hasChildNodes()) {
                eval(bloc)[j] = new Object;
                for (var k = 0; k < XMLList[i].childNodes[j].childNodes.length; k++) {
                    if (XMLList[i].childNodes[j].childNodes[k].nodeType != 3) {
                        if (XMLList[i].childNodes[j].childNodes[k].hasChildNodes()) {
                            eval(bloc)[j][XMLList[i].childNodes[j].childNodes[k].nodeName] = XMLList[i].childNodes[j].childNodes[k].firstChild.nodeValue;
                        } else {
                            eval(bloc)[j][XMLList[i].childNodes[j].childNodes[k].nodeName] = "";
                        }
                    }
                }
            }
        }
    }
}
//prepare paginate list books
var numcol;//number of colums thumb
var numfil;//number of rows of lines
var thumbW = 200;
var thumbH = 200;
var thumbAvatarW = 200;
var thumbAvatarH = 200;
var pageH = 84;
var numcol = Math.floor(areaW / thumbW);
var numfil = Math.floor((areaH - pageH) / thumbH);
/*var sepX=thumbW+(areaW-(numcol*thumbW))/numcol;
 var sepY=thumbH+((areaH-80-4)-(numfil*thumbH))/numfil;*/
var sepX = thumbW;
var sepY = thumbH;
var numPagesBook;
var loadBook = function loadBooks(book) {
    theCanvas.width = window.innerWidth;
    theCanvas.height = window.innerHeight;
    backPage != null;
    navigationMode = false;
    if (book <= numBooks - 1 && !ini) {
        if (books[book].image != "") {
            if (books[book].image.indexOf("http://") != -1) {
                ImgLoaderPreload(books[book].image, book);
            } else {
                ImgLoaderPreload(env + books[book].image, book);
            }

        } else {
            if (books[book]["associate"].indexOf("http://") != -1) {
                ImgLoaderPreload(books[book]["associate"] + "/img/avatar.png", book);
            } else {
                ImgLoaderPreload(env + books[book]["associate"] + "/img/avatar.png", book);
            }



        }
        writeLoadStatus(book);
        book += 1;
    } else {
        numPagesBook = Math.ceil(numBooks / (numcol * numfil));
        bookPreload = false;
        ini = true;
        Offsset = 100;
        iniPagesBook();

    }
}
function iniPagesBook() {
    iniPages(0);
}
function iniPages(page) {
    delPageForms();
    delForms();
    if (page <= numPages - 1) {
        if (local) {
            if (pages[page]["associate"] == "") {
                getXMLPages(root + "xml/" + pages[page]["id"] + ".xml?random=" + randomRoot(), page);
            } else {
                getXMLPages(pages[page]["associate"] + ".xml?random=" + randomRoot(), page);
            }
        } else {
            if (pages[page]["associate"] == "") {
                getXMLPages(proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + pages[page]["id"] + ".xml") + '&env=' + env + '&random=' + randomRoot(), page);
            } else {
                getXMLPages(proxy + '?yws_path=' + encodeURIComponent(pages[page]["associate"] + ".xml") + '&env=' + env + '&random=' + randomRoot(), page);
            }
        }
    } else {
        if (bookSelect != null) {

        } else {
            pagesHome = pages;
        }
        preloadPages(0);
    }
}
function iniPagesAsoc(page) {
    if (local) {
        if (pages[page]["associate"] == "") {
            getXMLPagesAsoc(root + "xml/" + pages[page]["id"] + ".xml?random=" + randomRoot(), page);
        } else {
            getXMLPagesAsoc(pages[page]["associate"] + ".xml?random=" + randomRoot(), page);
        }
    } else {
        if (pages[page]["associate"] == "") {
            getXMLPagesAsoc(proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + pages[page]["id"] + ".xml") + '&env=' + env + '&random=' + randomRoot(), page);
        } else {
            getXMLPagesAsoc(proxy + '?yws_path=' + encodeURIComponent(pages[page]["associate"] + ".xml") + '&env=' + env + '&random=' + randomRoot(), page);
        }
    }

}

/*var getXMLPages = function(url, page){
    alert("here");
    var params = "method=getXML_Pages&url="+url;
    loadXMLDoc_admin('ed/proxyXML.php', params);
}
var getXML_Pages =function(data){
    alert("here");
    //mData = JSON.parse(data);    
    pageXMLData = data;
    alert(pageXMLData);
}*/
var getXMLPages = function getXMLPages(url, page) {
    var pageXMLData;
    //Load through proxy
    // The web services request minus the domain name
    // Cross platform xmlhttprequest
    var d = null;
    // Create xmlhttprequest object
    if (window.XMLHttpRequest) {

        var d = new XMLHttpRequest();
        if (url.indexOf("http://") == -1) {
            url = env + url;
        }
        d.open("GET", "ed/proxyXML.php?url=" + url, true);

        //function : 
        // Set the callback function
        d.onreadystatechange = function() {
            if (d.readyState == 4 && d.status == 200) {
                // Output the results
                pageXMLData = d.responseXML;
                createPages(d.responseXML, page);
            } else {

            }
        }
        d.send(null);
    }
}
var getXMLPagesAsoc = function getXMLPagesAsoc(url, page) {
    var pageXMLData;
    //Load through proxy
    // The web services request minus the domain name
    // Cross platform xmlhttprequest
    var d = null;
    // Create xmlhttprequest object
    // Create xmlhttprequest object
    if (window.XMLHttpRequest) {

        var d = new XMLHttpRequest();
        if (url.indexOf("http://") == -1) {
            url = env + url;
        }
        d.open("GET", "ed/proxyXML.php?url=" + url, true);
        //function : 
        // Set the callback function
        d.onreadystatechange = function() {
            if (d.readyState == 4 && d.status == 200) {
                // Output the results
                pageXMLData = d.responseXML;
                createPagesAsoc(d.responseXML, page);
            } else {

            }
        }
        d.send(null);
    }

}
function createPages(xmlData, page) {

    if (xmlData.getElementsByTagName("interface").length == 0 && pages[page]["associate"] != "") {
        alert("El contenido asociado es incorrecto se va a proceder a recuperar el contenido original\nAsegurese de introducir correctamente la dirección!!!!");
        pages[page]["associate"] = "";
        iniPages(page);
    } else {
        var pageXMLDataMaids = xmlData.getElementsByTagName("interface");
        parseXMLDataPage(pageXMLDataMaids, page);
    }
}
function createPagesAsoc(xmlData, page) {
    if (xmlData.getElementsByTagName("interface").length == 0 && pages[page]["associate"] != "") {
        alert("El contenido asociado es incorrecto se va a proceder a recuperar el contenido original");
        pages[page]["associate"] = "";
        iniPages(page);
    } else {
        associateRecord();
    }
}
function parseXMLDataPage(XMLList, page) {
    if (MODE == "VISOR" && XMLList[0].getAttribute('permission') && tempPermission == 2) {
        loadPermission = Number(XMLList[0].getAttribute('permission'));
        permission = loadPermission;
    } else if (MODE == "VISOR" && XMLList[0].getAttribute('permission')) {
        loadPermission = Number(XMLList[0].getAttribute('permission'));
    } else {
        loadPermission = 2;
        permission = tempPermission;
    }
    if (!(XMLList[0].getAttribute('pageStaticAv') >= 0)) {
        pages[page].pageStaticAv = null;
        pages[page].pageStaticRe = null;
    } else {
        pages[page].pageStaticAv = XMLList[0].getAttribute('pageStaticAv');
        pages[page].pageStaticRe = XMLList[0].getAttribute('pageStaticRe');
    }
    switch (permission) {
        case 0:
            if (arrayConfigHome["booksAllow"] == "0") {
                visorAllow = 80;
            } else {
                visorAllow = 0;
            }
            break;
        case 1:
            visorAllow = 0;
            break;
        case 2:
            if (arrayConfigHome["booksAllow"] == "0") {
                visorAllow = 80;
            } else {
                visorAllow = 0;
            }
            break;
        default:
            break;
    }
    var cont = 0;
    Maids[page] = new Array;
    for (var i = 0; i < XMLList.length; i++) {
        var notWhitespace = /\S/
        for (var j = 0; j < XMLList[i].childNodes.length; j++) {
            if ((XMLList[i].childNodes[j].nodeType == 3) && (!notWhitespace.test(XMLList[i].childNodes[j].nodeValue))) {
                XMLList[i].removeChild(XMLList[i].childNodes[j]);
                j--;
            }
        }
        for (var j = 0; j < XMLList[i].childNodes.length; j++) {

            if (XMLList[i].childNodes[j].hasChildNodes()) {
                cont += 1;
                Maids[page][j] = new Object;
                for (var k = 0; k < XMLList[i].childNodes[j].childNodes.length; k++) {
                    if (XMLList[i].childNodes[j].childNodes[k].nodeType != 3) {
                        if (XMLList[i].childNodes[j].childNodes[k].hasChildNodes()) {
                            if (XMLList[i].childNodes[j].childNodes[k].nodeName == "data") {
                                Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName] = new Object;
                                for (var l = 0; l < XMLList[i].childNodes[j].childNodes[k].childNodes.length; l++) {
                                    if (XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeType != 3) {

                                        if (XMLList[i].childNodes[j].childNodes[k].childNodes[l].hasChildNodes()) {
                                            if (XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName == "text") {
                                                Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName] = new Object;
                                                for (var m = 0; m < XMLList[i].childNodes[j].childNodes[k].childNodes[l].childNodes.length; m++) {
                                                    if (XMLList[i].childNodes[j].childNodes[k].childNodes[l].childNodes[m].nodeType != 3) {
                                                        if (XMLList[i].childNodes[j].childNodes[k].childNodes[l].childNodes[m].hasChildNodes()) {
                                                            Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].childNodes[m].nodeName] = XMLList[i].childNodes[j].childNodes[k].childNodes[l].childNodes[m].firstChild.nodeValue;
                                                        } else {
                                                            Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].childNodes[m].nodeName] = "";
                                                        }
                                                    } else {
                                                        Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName]["migration"] = XMLList[i].childNodes[j].childNodes[k].childNodes[l].firstChild.nodeValue;
                                                    }

                                                }
                                            } else {
                                                Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName] = XMLList[i].childNodes[j].childNodes[k].childNodes[l].firstChild.nodeValue;
                                            }
                                        } else {
                                            Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName][XMLList[i].childNodes[j].childNodes[k].childNodes[l].nodeName] = "";
                                        }
                                    }
                                }
                            } else {
                                Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName] = XMLList[i].childNodes[j].childNodes[k].firstChild.nodeValue;
                                if (XMLList[i].childNodes[j].childNodes[k].nodeName == "id") {
                                    //genericLoaderImgFull/generic
                                    //genericLoaderImg/generic
                                    //genericFont/generic
                                    //genericText/generic
                                    //ListImg/generic
                                    //generic/generic
                                    //genericBG/generic
                                    Maids[page][j]["x"] = XMLList[i].childNodes[j].childNodes[k].getAttribute('x');
                                    Maids[page][j]["y"] = XMLList[i].childNodes[j].childNodes[k].getAttribute('y');
                                    Maids[page][j]["type"] = XMLList[i].childNodes[j].childNodes[k].getAttribute('type');
                                    switch (XMLList[i].childNodes[j].childNodes[k].getAttribute('type')) {
                                        case ("genericLoaderImgFull/generic"):
                                            Maids[page][j]["function"] = "ImgLoaderFull";
                                            break;
                                        case ("genericLoaderImg/generic"):
                                            Maids[page][j]["function"] = "ImgLoader";
                                            break;
                                        case ("generic/generic"):
                                            Maids[page][j]["function"] = "Rectangulo";
                                            break;
                                        case ("genericBG/generic"):
                                            Maids[page][j]["function"] = "BGColor";
                                            break;
                                        case ("genericFont/generic"):
                                            Maids[page][j]["function"] = "Text";
                                            break;
                                        case ("genericVideo/generic"):
                                            Maids[page][j]["function"] = "Video";
                                            break;
                                        case ("genericYouTube/generic"):
                                            Maids[page][j]["function"] = "VideoYouTube";
                                            break;
                                    }
                                }
                            }
                        } else {
                            Maids[page][j][XMLList[i].childNodes[j].childNodes[k].nodeName] = "";
                        }
                    }
                }

            }
        }
    }
    if (!refreshStatus) {
        iniPages(page + 1);
        if (page == pageFocus) {
            Offsset = 100;
            tween(theCanvas, "fade", {alpha: 0}, velFade, toMAIN, Quad_easeInOut, "PAGEGO", drawHome);
        }
    } else {
        refreshStatus = false;
        preloadPages(pageFocus);
        createMaidIni(pageFocus, 0, 0);
    }
}
function preloadPages(page) {
    PreloadImg(page);
}
function PreloadImg(page) {
    /*if(page<=numPages && !refreshStatus){
     numElements=0;
     for(var j in Maids[page]){
     numElements+=1;
     }
     imgRow(page);
     }else{*/
    posX = 0;
    posY = 0;
    if (maidSelect) {
        //delForms();
    } else {
        maidSelect = Maids[page][Maids[page].length - 1];
    }
    if (maidSelect) {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    }
    //}
}
function imgRow(page) {
    if (element >= numElements) {
        element = 0;
        preloadPages(page + 1);
    } else {
        if (Maids[page][element]["data"]["img"] && (Maids[page][element]["function"] == "ImgLoader" || Maids[page][element]["function"] == "ImgLoaderFull" || Maids[page][element]["function"] == "Video")) {
            eval(Maids[page][element]["function"] + "Preload")(Maids[page][element]["data"]["img"], page);
        } else {
            element += 1;
            imgRow(page);
        }
    }
}
var endMove = true;
var adjust = 0;
var screenLibrary = new Object();
var pagePosYLibrary = new Array();
var refreshTimeOut;
function drawMaids(page, posX, posY) {
    HTMLBG="";
    HTML = new Array();
    for (var u in Maids[page]) {
        pageElements[u] = false;
    }
    for (var j in Maids[page]) {
        if (Maids[page][j]["data"]["img"].indexOf("http://") == -1) {
            Maids[page][j]["data"]["img"] = env + Maids[page][j]["data"]["img"];
        }
        //if(Maids[page][j]["vis"]=="true" && Maids[page][j]["type"]!="genericYouTube/generic"){
        if (Maids[page][j]["vis"] == "true") {
            if (Maids[page][j]["data"]["mode"] == "static") {
                preStatic = true;
            }
            if (MODE != "VISOR" && !endMove || (!(Math.abs(Maids[page][j]["data"]["relBottom"]) > 0) && !(Math.abs(Maids[page][j]["data"]["relRight"]) > 0) && !(Maids[page][j]["data"]["centerV"] > 0) && !(Maids[page][j]["data"]["centerH"] > 0))) {
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX, Number(Maids[page][j]["y"]) + posY - pageYoffsetGeneral, 40, 40, Maids[page][j]["data"], null, j);

            } else if (!(Math.abs(Maids[page][j]["data"]["relBottom"]) > 0) && Math.abs(Maids[page][j]["data"]["relRight"]) > 0 && !(Maids[page][j]["data"]["centerV"] > 0)) {
                if (!(Maids[page][j]["data"]["absAlignX"] > 0)) {
                    Maids[page][j]["x"] = 1024 + Math.floor((areaW - 1024) / 2) - Maids[page][j]["data"]["relRight"];
                } else {
                    Maids[page][j]["x"] = areaW - Maids[page][j]["data"]["relRight"];
                }
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Maids[page][j]["x"] + posX, Number(Maids[page][j]["y"]) + posY - pageYoffsetGeneral, 40, 40, Maids[page][j]["data"], null, j);
            } else if (!(Math.abs(Maids[page][j]["data"]["relBottom"]) > 0) && Math.abs(Maids[page][j]["data"]["relRight"]) > 0 && Maids[page][j]["data"]["centerV"] > 0) {
                if (!(Maids[page][j]["data"]["absAlignX"] > 0)) {
                    Maids[page][j]["x"] = 1024 + Math.floor((areaW - 1024) / 2) - Maids[page][j]["data"]["relRight"];
                } else {
                    Maids[page][j]["x"] = areaW - Maids[page][j]["data"]["relRight"];
                }
                Maids[page][j]["y"] = Math.floor(areaH / 2 - Maids[page][j]["data"]["height"] / 2);
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Maids[page][j]["x"] + posX, Maids[page][j]["y"], 40, 40, Maids[page][j]["data"], null, j);
            } else if (Math.abs(Maids[page][j]["data"]["relBottom"]) > 0 && !(Math.abs(Maids[page][j]["data"]["relRight"]) > 0) && !(Maids[page][j]["data"]["centerH"] > 0)) {
                if (!(Maids[page][j]["data"]["absAlignY"] > 0)) {
                    Maids[page][j]["y"] = 768 + Math.floor((areaH - 768) / 2) - Maids[page][j]["data"]["relBottom"];
                } else {
                    Maids[page][j]["y"] = areaH - Maids[page][j]["data"]["relBottom"];
                }
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX, Maids[page][j]["y"], 40, 40, Maids[page][j]["data"], null, j);
            } else if (Math.abs(Maids[page][j]["data"]["relBottom"]) > 0 && !(Math.abs(Maids[page][j]["data"]["relRight"]) > 0) && Maids[page][j]["data"]["centerH"] > 0) {
                if (!(Maids[page][j]["data"]["absAlignY"] > 0)) {
                    Maids[page][j]["y"] = 768 + Math.floor((areaH - 768) / 2) - Maids[page][j]["data"]["relBottom"];
                } else {
                    Maids[page][j]["y"] = areaH - Maids[page][j]["data"]["relBottom"];
                }
                Maids[page][j]["x"] = Math.floor(areaW / 2 - Maids[page][j]["data"]["width"] / 2);
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Maids[page][j]["x"] + posX, Maids[page][j]["y"], 40, 40, Maids[page][j]["data"], null, j);
            } else if (Math.abs(Maids[page][j]["data"]["relBottom"]) > 0 && Math.abs(Maids[page][j]["data"]["relRight"]) > 0) {
                if (!(Maids[page][j]["data"]["absAlignX"] > 0)) {
                    Maids[page][j]["x"] = 1024 + Math.floor((areaW - 1024) / 2) - Maids[page][j]["data"]["relRight"];
                } else {
                    Maids[page][j]["x"] = areaW - Maids[page][j]["data"]["relRight"];
                }
                if (!(Maids[page][j]["data"]["absAlignY"] > 0)) {
                    Maids[page][j]["y"] = 768 + Math.floor((areaH - 768) / 2) - Maids[page][j]["data"]["relBottom"];
                } else {
                    Maids[page][j]["y"] = areaH - Maids[page][j]["data"]["relBottom"];
                }
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Maids[page][j]["x"] + posX, Maids[page][j]["y"], 40, 40, Maids[page][j]["data"], null, j);
            } else if (Maids[page][j]["data"]["centerH"] > 0 && Maids[page][j]["data"]["centerV"] > 0) {
                Maids[page][j]["y"] = Math.floor(areaH / 2 - Maids[page][j]["data"]["height"] / 2);
                Maids[page][j]["x"] = Math.floor(areaW / 2 - Maids[page][j]["data"]["width"] / 2);
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Maids[page][j]["x"] + posX, Maids[page][j]["y"], 40, 40, Maids[page][j]["data"], null, j);
            } else if (Maids[page][j]["data"]["centerH"] > 0 && !(Maids[page][j]["data"]["centerV"] > 0)) {
                Maids[page][j]["x"] = Math.floor(areaW / 2 - Maids[page][j]["data"]["width"] / 2);
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Maids[page][j]["x"] + posX, Number(Maids[page][j]["y"]) + posY - pageYoffsetGeneral, 40, 40, Maids[page][j]["data"], null, j);
            } else if (!(Maids[page][j]["data"]["centerH"] > 0) && Maids[page][j]["data"]["centerV"] > 0) {
                Maids[page][j]["y"] = Math.floor(areaH / 2 - Maids[page][j]["data"]["height"] / 2);
                eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX, Maids[page][j]["y"], 40, 40, Maids[page][j]["data"], null, j);
            }
        }
    }
    
}
function createMaidIni(page, posX, posY, refreshing, hideGuide) {
    preStatic = false;
    if (pagePosYLibrary[page]) {
        pageYoffsetGeneral = pagePosYLibrary[page];
    } else {
        pageYoffsetGeneral = 0;
    }
    context.clearRect(posX, 0, areaW, areaH);
    //drawRect(posX,0,areaW,areaH,"#2e2e2e",1,false);

    /*if(bookSelect==null && screenLibrary["HOME"] && screenLibrary["HOME"][String(page)]!=null && MODE=="VISOR" && !endMove){
     context.drawImage(screenLibrary["HOME"][String(page)],posX,0);
     }else if(screenLibrary[String(bookSelect)] && screenLibrary[String(bookSelect)][String(page)] && MODE=="VISOR" && !endMove){
     context.drawImage(screenLibrary[String(bookSelect)][String(page)],posX,0);
     }else{*/
    if (MODE != "PAGEGO" && MODE != "BOOKS") {
        drawMaids(page, posX, posY, hideGuide);
    }
    if (MODE == "EDITOR" && !hideGuide) {
        drawRect(Math.floor(areaW / 2 - 1024 / 2), -pageYoffsetGeneral, 1024, 672, "#ffffff", 1, true, "#eeeeee", "#dddddd");
        drawRect(Math.floor(areaW / 2 - 1024 / 2), 672 - pageYoffsetGeneral, 1024, areaH - 672 + pageYoffsetGeneral, "#ffffff", 1, true, "#dddddd");
        drawRect(Math.floor(areaW / 2 - 1024 / 2), Math.floor(areaH / 2 - 672 / 2), 1024, 672 + pageYoffsetGeneral, "#ffffff", 1, true, "#e9c9c9");
    }
    //capturo la pantalla
    /*if(endMove && MODE=="VISOR" && !iniTouchMovePageScroll && endFade &&!resizeIni){
     var screenShot=new Image();
     alert(theCanvas.toDataURL());
     screenShot.src=theCanvas.toDataURL("image/png");
     if(bookSelect!=null){
     if(!screenLibrary[String(bookSelect)]){
     screenLibrary[String(bookSelect)]=new Object();
     }
     screenLibrary[String(bookSelect)][String(page)]=screenShot;
     }else{
     if(!screenLibrary["HOME"]){
     screenLibrary["HOME"]=new Object();
     }
     screenLibrary["HOME"][String(page)]=screenShot;
     }
     }*/
    resizeIni = false;
    //}
    if (MODE == "EDITOR" && ALIGN == "GRID") {
        context.lineWidth = 1;
        context.strokeStyle = "#07aaff";
        var j = 0;
        context.save();
        context.globalAlpha = .2;
        while (j * sizeGrid < areaW) {
            context.beginPath();
            context.moveTo(j * sizeGrid + posBookX, 0);
            context.lineTo(j * sizeGrid + posBookX, areaH);
            context.stroke();
            context.closePath();
            j += 1;
        }
        j = 0;
        while (j * sizeGrid < areaH) {
            context.beginPath();
            context.moveTo(0, j * sizeGrid + Math.floor(pageYoffsetGeneral / sizeGrid) * sizeGrid - pageYoffsetGeneral);
            context.lineTo(areaW + posBookX, j * sizeGrid + Math.floor(pageYoffsetGeneral / sizeGrid) * sizeGrid - pageYoffsetGeneral);
            context.stroke();
            context.closePath();
            j += 1;
        }
        context.restore();
    }
    if (MODE == "VISOR" && navigationMode) {

        drawRect(0, areaH - 80, areaW, 80, "#000000", 1, false);
        context.drawImage(common.toolImages.refreshPB[1], areaW - 80, areaH - 80);
        context.drawImage(common.toolImages.pagesPB[1], 80 - visorAllow, areaH - 80);
        context.drawImage(common.toolImages.homePB[1], 160 - visorAllow, areaH - 80);
        drawText("normal 15px arial ", "middle", "center", "#ffffff", lanArray[lan], areaW - 200, areaH - 40);
        switch (permission) {
            case 0:
                if (arrayConfigHome["booksAllow"] == "0") {
                    context.drawImage(common.toolImages.booksPB[1], -visorAllow, areaH - 80);
                } else {
                    context.drawImage(common.toolImages.booksPB[1], 0, areaH - 80);
                    context.drawImage(common.toolImages.editarPB[1], areaW - 160, areaH - 80);
                }
                break;
            case 1:
                context.drawImage(common.toolImages.booksPB[1], -visorAllow, areaH - 80);
                context.drawImage(common.toolImages.editarPB[1], areaW - 160, areaH - 80);
                break;
            case 2:
                if (arrayConfigHome["booksAllow"] == "0") {
                    context.drawImage(common.toolImages.booksPB[1], -visorAllow, areaH - 80);
                } else {
                    context.drawImage(common.toolImages.booksPB[1], 0, areaH - 80);
                }
                break;
            default:
                break;
        }
        if ("ontouchmove" in document.documentElement) {

        } else {
            //context.drawImage(common.toolImages.avListBookPB[1],areaW-240+visorAllow,areaH-80);
            //context.drawImage(common.toolImages.reListBookPB[1],240-visorAllow,areaH-80);
        }
        context.globalAlpha = 1;


    } else if (MODE != "VISOR" && MODE != "PDF") {
        switch (SUBMODE) {
            case "PDF":
                break;
            case "EDITMAID":
                if (maidSelect) {
                    shapeMaid(maidSelect);
                } else {
                    maidSelect = false;
                    drawOptionsAddMaid();
                }
                centerX = 0;
                break;
            case "EDITMAIDLATERAL":
                centerX = 0;
                break;
            case "LISTMAID":
                break;
            case "MENUASOC":
                break;
            case "ASSOCIATE":
                break;
            case "MAINEDITOR":
                if (maidSelect) {
                    shapeMaid(maidSelect);
                } else {
                    maidSelect = false;
                    drawOptionsAddMaid();
                }
                break;
            default:

                break;
        }
        context.fillStyle = "#1a1a1a";
        context.fillRect(0, areaH - 80, areaW, 80);
        context.drawImage(common.toolImages.editorPanel[1], -dirEditMain, areaH - 80);
        context.drawImage(common.toolImages.refreshPB[1], areaW - 80 - dirEditMain, areaH - 80);
        context.drawImage(common.toolImages.editarPB[1], areaW - 160 - dirEditMain, areaH - 80);
        /*if(createMode){
         createMode();
         }*/
    }
    adjust = posX;
    context.drawImage(common.toolImages.marcaFlyPB[1], 4, 4);
    if (backPage != null) {
        context.drawImage(common.toolImages.backPB[1], 4, 80);
    }
    if (refreshing && MODE == "VISOR") {
        endMove = true;
        refreshTimeOut = window.setTimeout(refreshPage, 50);
    }
    if ((scrolleable && MODE == "VISOR" && endMove) || iniTouchMovePageScroll) {
        drawScrollGeneral();
    }
    //drawing page number
    if (MODE == "VISOR") {
        if (!navigationMode) {
            drawBallPages(0, 0);
            drawRect(4, areaH - 44, 80, 40, "#000000", 1, false);
            drawText("normal 15px arial ", "middle", "center", "#ffffff", (Number(numPage) + 1) + " | " + numPages, 44, areaH - 24);
            if (pages[pageFocus]["associate"] != "") {
                drawRect(88, areaH - 44, 160, 40, "#000000", 1, false);
                drawText("normal 15px arial ", "middle", "center", "#ffffff", assocMsg[lan], 168, areaH - 24);
            }
        } else {
            drawBallPages(0, 80);
            drawRect(4, areaH - 124, 80, 40, "#000000", 1, false);
            drawText("normal 15px arial ", "middle", "center", "#ffffff", (Number(numPage) + 1) + " | " + numPages, 44, areaH - 104);
            if (pages[pageFocus]["associate"] != "") {
                drawRect(88, areaH - 124, 160, 40, "#000000", 1, false);
                drawText("normal 15px arial ", "middle", "center", "#ffffff", assocMsg[lan], 168, areaH - 104);
            }
        }
    }
    if (overBallOn != null) {
        if (!navigationMode) {
            drawRect(areaW / 2 - 66, areaH - 206, 212, 156, "#000000", .5, false);
            drawRect(areaW / 2 - 60, areaH - 200, 200, 140, "#ffffff", 1, false);
            createMaidIniMiniBall(overBallOn, areaW / 2 - 50, areaH - 109);
        } else {
            drawRect(areaW / 2 - 66, areaH - 286, 212, 156, "#000000", .5, false);
            drawRect(areaW / 2 - 60, areaH - 280, 200, 140, "#ffffff", 1, false);
            createMaidIniMiniBall(overBallOn, areaW / 2 - 50, areaH - 189);
        }
        overBallOn = null;
    }

}
var modeIni = false;
function createMaidIniMini(page, posX, posY) {
    context.save();
    context.scale(100 / areaH, 100 / areaH);
    var varY = areaH * page;
    for (var j in Maids[page]) {
        eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX, Number(Maids[page][j]["y"]) + posY + varY, 40, 40, Maids[page][j]["data"], true);
    }
    context.restore();
}
function createMaidIniMiniBall(page, posX, posY) {
    context.save();
    context.scale(100 / areaH, 100 / areaH);
    posX = posX * areaH / 100;
    posY = posY * (areaH - 100) / 100;
    for (var j in Maids[page]) {
        eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX, Number(Maids[page][j]["y"]) + posY, 100, 100, Maids[page][j]["data"], true);
    }
    context.restore();
}
function createMiniPage(page, posX, posY) {
    context.save();
    context.scale(100 / areaH, 100 / areaH);
    for (var j in Maids[page]) {
        eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX * areaH / 100, Number(Maids[page][j]["y"]) + posY * areaH / 100, 40, 40, Maids[page][j]["data"], true);
    }
    context.restore();
}
var ballPagesWidth = 0;
var ballW = 25;
var ballPagesX = 0;
function drawBallPages(posX, PosY) {
    ballPagesWidth = numPages * ballW;
    if ("ontouchmove" in document.documentElement) {
        ballPagesX = areaW / 2 - ballPagesWidth / 2;
    } else {
        ballPagesX = (areaW + 80) / 2 - ballPagesWidth / 2;
    }
    context.save();
    context.lineWidth = 1;
    context.strokeStyle = "000000";
    for (var cont = 0; cont <= numPages - 1; cont++) {
        /*context.fillStyle="ffffff";
         context.fillRect(ballPagesX+ballW*cont,areaH-50,ballW,ballW+20);*/
        context.beginPath();
        context.font = "Bold 10px Verdana ";
        if (cont == pageFocus) {
            /*if(cont==2){
             context.fillStyle="ffffff";
             context.fillText("P",ballPagesX+ballW/2+ballW*cont+posX-4,areaH-ballW*2+4);
             }else{*/
            context.fillStyle = "000000";
            context.arc(ballPagesX + ballW / 2 + ballW * cont + posX, areaH - ballW - PosY, ballW / 4, 0, Math.PI * 2, true);
            context.fill();
            //}
        } else {
            /*if(cont==2){
             context.fillStyle="0099ff";
             context.fillText("P",ballPagesX+ballW/2+ballW*cont+posX-4,areaH-ballW*2+4);
             }else{*/
            context.fillStyle = "000000";
            context.arc(ballPagesX + ballW / 2 + ballW * cont + posX, areaH - ballW - PosY, ballW / 8, 0, Math.PI * 2, true);
            context.fill();
            //}
        }
        context.closePath();
    }
    context.fillStyle = "ffffff";
    context.font = "Bold 10px Verdana ";
    if (tempPermission == 1 && PosY > 0) {
        if (bookSelect != null) {
            if ("ontouchmove" in document.documentElement) {
                context.fillText(books[bookSelect]["id"], areaW / 2 - context.measureText(books[bookSelect]["id"]).width / 2 + posX, areaH - 50);
            } else {
                context.fillText(books[bookSelect]["id"], (areaW + 80) / 2 - context.measureText(books[bookSelect]["id"]).width / 2 + posX, areaH - 50);
            }
        } else {
            if ("ontouchmove" in document.documentElement) {
                context.fillText("HOME", areaW / 2 - Number(context.measureText("HOME").width) / 2 + posX, areaH - 50);
            } else {
                context.fillText("HOME", (areaW + 80) / 2 - Number(context.measureText("HOME").width) / 2 + posX, areaH - 50);
            }
        }
    }
    context.restore();
}
//move page left-right------------------------------------------------
function adjustPage(p, d) {
    if (p < 0 && d == 1) {
        p = numPages - 1;
    } else if (p >= numPages - 1 && d == 1) {
        numPage = 0;
        p = numPages - 1;
    } else if (p <= 0 && d == -1) {
        numPage = numPages - 1;
        p = 0;
    } else if (p == numPages && d == -1) {
        p = 0;
    }
    return p;
}
var velTween = 33;
function endMovePage() {
    //clearInterval(movPage);
    endMove = true;
    returnMoveX = 0;
    pageXvar = 0;
    pageX = 0;
    scrolleable = false;
    maxHeight = 0;
    BGImgH = 0;
    centerX = 0;
    posBookX = 0;
    pageFocus = numPage;
    if (numPage > Math.floor(areaH / 100)) {
        pageYoffset = (numPage - Math.floor(areaH / 100)) * 100;
    } else {
        pageYoffset = 0;
    }
    if (createMode) {
        //createMode();
        createMode = null;
    }
    if (MODE == "VISOR") {
        _static = false;
        createMaidIni(pageFocus, 0, 0, false);
       
        if (Number(arrayConfig.temp) > 0 && tempPermission == 2 && !navigationMode) {
            tempo = setInterval(automatic, Number(arrayConfig.temp));
            contTemp = Number(arrayConfig.temp) / 1000;
            writeTemp();
            contTemp = Number(arrayConfig.temp) / 1000 - 1;
            writeTempInterval = setInterval(writeTemp, 1000);
        }
    } else {
        if (Maids[numPage].length > 0) {
            maidSelect = Maids[numPage][Maids[numPage].length - 1];
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            shapeMaid(maidSelect);
        } else {
            maidSelect = false;
            detect = null;
        }
    }

}
var movPage;
function drawLeft() {
    pageXvar = pageXvar / 2;
    pageX += -1 * pageXvar;
    endMove = false;
    if (pageXvar <= 1) {
        assignListeners();
        resetParamsPage();
        endMovePage();
    } else {
        createMaidIni(adjustPage(numPage - 1, 1), pageX, 0);
        
        createMaidIni(numPage, areaW + pageX, 0);
    }
}
function drawRight() {
    pageXvar = pageXvar / 2;
    pageX += pageXvar;
    endMove = false;
    if (pageXvar <= 1) {
        assignListeners();
        resetParamsPage();
        endMovePage();
    } else {
        createMaidIni(adjustPage(numPage + 1, -1), pageX, 0);
        
        createMaidIni(numPage, -areaW + pageX, 0);
    }
}
//------------------------------------------------
function ImgLoaderPreload(img, page) {
    if (!imgLibrary[img]) {
        var rt = new Image();
        rt.crossOrigin = 'crossdomain.xml';
        rt.src = proxy + img;
        rt.onload = function() {
            imgLibrary[img] = rt;
            if (bookPreload) {
                books[page]["img"] = rt;
                loadBook(page + 1);
            } else {
                element += 1;
                PreloadImg(page);
            }
        }
        rt.onerror = function() {
            imgLibrary[img] = common.toolImages.errorImg[1];
            if (bookPreload) {
                books[page]["img"] = common.toolImages.avatarImg[1];
                loadBook(page + 1);
            } else {
                element += 1;
                PreloadImg(page);
            }
        }

    } else {
        if (bookPreload) {
            books[page]["img"] = imgLibrary[img];
            loadBook(page + 1);
            writeLoadStatus(page);
        } else {
            element += 1;
            PreloadImg(page);
        }
    }
}
function VideoPreload(img, page) {
    if (!imgLibrary[img]) {
        var rt = new Image();
        rt.crossOrigin = 'crossdomain.xml';
        rt.src = proxy + img;
        rt.onload = function() {
            writeLoadStatus(page);
            imgLibrary[img] = rt;
            if (bookPreload) {
                books[page]["img"] = rt;
                loadBook(page + 1);
            } else {
                element += 1;
                PreloadImg(page);
            }
        }
    } else {
        writeLoadStatus(page);
        if (bookPreload) {
            books[page]["img"] = imgLibrary[img];
            loadBook(page + 1);
        } else {
            element += 1;
            PreloadImg(page);
        }
    }
}
function refreshPage() {
    maidSelect = null;
    detect = null;
    context.save();
    context.globalAlpha = .2;
    context.fillStyle = "000000";
    context.fillRect(0, 0, areaW, areaH);
    context.globalAlpha = 1;
    context.fillStyle = "ffffff";
    context.fillText("Refreshing", areaW / 2, areaH / 2);
    refreshStatus = true;
    context.restore();
    iniPages(pageFocus);
}
var centerX;
function ImgLoaderFull(img, x, y, w, h, data, mini, pos) {
    if (!hideBG) {
        if(data["full"]== "false"){
            HTMLBG = "<div class='htmlItem' style='background:url("+img+") no-repeat center center;-webkit-background-size: cover;-moz-background-size: cover;-o-background-size: cover;background-size: cover;width:100%;height:"+maxHeight+"px;position:relative;opacity:" + data.alpha + ";'>";
        }else{
             HTMLBG = "<div class='htmlItem' style='background:url("+img+") no-repeat center center;-webkit-background-size: cover;-moz-background-size: cover;-o-background-size: cover;background-size: cover;width:100%;height:"+maxHeight+"px;position:relative;opacity:" + data.alpha + ";'>";
        }
        
        data["width"] = areaW;
        data["height"] = areaH;
        if (imgLibrary[img]) {
            var imgW = imgLibrary[img].naturalWidth;
            var imgH = imgLibrary[img].naturalHeight;
            var imgEndH;
            var imgEndW;
            centerX;
            var centerY;
            context.save();
            if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                /*context.globalAlpha=data["alpha"];
                 context.fillStyle="#ffffff";*/
                drawRect(x, y, areaW, areaH, "#000000", 1, false);
            }
            if (data["full"] == "false") {
                if (areaW * imgH / imgW < areaH) {
                    imgEndW = areaW;
                    imgEndH = imgEndW * imgH / imgW;
                    centerY = (areaH / 2 - imgEndH / 2);
                    centerX = 0;
                    context.drawImage(imgLibrary[img], x + Number(data["relX"]), centerY + y + Number(data["relY"]), imgEndW, imgEndH);
                } else {
                    imgEndH = areaH;
                    imgEndW = imgEndH * imgW / imgH;
                    centerX = (areaW / 2 - imgEndW / 2);
                    centerY = 0;
                    context.drawImage(imgLibrary[img], centerX + x + Number(data["relX"]), y + Number(data["relY"]), imgEndW, imgEndH);
                    centerX = 0;
                }
                scrolleable = false;
            } else {
                if (areaW * imgH / imgW < areaH) {
                    imgEndH = areaH;
                    imgEndW = imgEndH * imgW / imgH;
                    centerX = (areaW / 2 - imgEndW / 2);
                    centerY = 0;
                    //context.drawImage(imgLibrary[img],centerX+x+Number(data["relX"]),y+Number(data["relY"]),imgEndW,imgEndH);
                    if (SUBMODE != "BOOKS") {
                        if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                            context.drawImage(imgLibrary[img], -((imgH * areaW / areaH) / 2 - imgW / 2), 0, (imgH * areaW / areaH), imgH, x + Number(data["relX"]), y, areaW, areaH);
                        } else {
                            context.drawImage(imgLibrary[img], 0, 0, imgLibrary[img].naturalWidth, imgLibrary[img].naturalHeight, x + Number(data["relX"]), y + Number(data["relY"]), (thumbPageW - 20) * areaW / (thumbPageW - 20), (thumbPageW - 20) * areaW / (thumbPageW - 20));
                        }
                    }
                    scrolleable = false;

                } else {
                    imgEndW = areaW;
                    imgEndH = imgEndW * imgH / imgW;
                    centerY = (areaH / 2 - imgEndH / 2);
                    centerX = 0;
                    if (SUBMODE != "BOOKS") {
                        if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                            context.drawImage(imgLibrary[img], x + Number(data["relX"]), y + Number(data["relY"]), imgEndW, imgEndH);
                        } else {
                            context.drawImage(imgLibrary[img], 0, 0, imgLibrary[img].naturalWidth, imgLibrary[img].naturalHeight, x + Number(data["relX"]), y + Number(data["relY"]), (thumbPageW - 20) * areaW / (thumbPageW - 20), (thumbPageW - 20) * areaW / (thumbPageW - 20));

                        }
                    }
                    if (imgEndH > areaH) {
                        scrolleable = true;
                    } else {
                        scrolleable = false;
                    }
                }
            }
            BGImgH = imgEndH;
            if (!mini) {
                stablishedmaxHeight(BGImgH);
            }
            context.restore();
            pageElements[pos] = true;
        } else {
            drawRect(areaW / 2 - 100, areaH / 2 - 25, 200, 50, "#000000", 1, false);
            drawText("Normal 15px arial ", "middle", "center", "#ffffff", loadingMsg[lan], areaW / 2, areaH / 2);
            if (!imgLibraryStatus[img]) {
                imgLibraryStatus[img] = new Array();
                imgLibraryStatus[img][0] = pageFocus;
                var rt = new Image();
                rt.crossOrigin = 'crossdomain.xml';
                rt.src = proxy + escape(img);
                rt.onload = function() {
                    imgLibraryStatus[img][1] = true;
                    imgLibrary[img] = rt;
                    if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                        createMaidIni(pageFocus, posBookX, 0);
                    } else {
                        createPagesOrder();
                    }

                }
                rt.onerror = function() {
                    imgLibraryStatus[img][1] = true;
                    imgLibrary[img] = common.toolImages.errorImg[1];
                    if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                        createMaidIni(pageFocus, posBookX, 0);
                        pageElements[pos] = true
                    } else {
                        createPagesOrder();
                    }
                }
            }
        }
    }
}
function ImgLoader(img, x, y, w, h, data, mini, pos) {
    //--------HTML
    var HTMLStyles="";
    if(data.absAlignY && data.absAlignY!="null"){
        HTMLStyles+="bottom:0;";
    }else{
        
        
        if(data.relBottom==undefined || data.relBottom=="null"){
            HTMLStyles+="top:" + y + "px;";
        }else{
            
            HTMLStyles+="bottom:" +(maxHeight-y-Number(data.height))+ "px;";
        }
        
        
    }
    if(data.absAlignX &&  data.absAlignX!="null"){
        HTMLStyles+="right:0;";
    }else{
        if(data.relRight==undefined || data.relRight=="null"){
            HTMLStyles+="left:" + x + "px;";
        }else{
            
            HTMLStyles+="right:" +(areaW-x-Number(data.width))+ "px;";
        }
        
    }
    //,adH,full,adRight,face,link,relTx,relRot,relScaleX,relScaleY,contShow,relTy,ySkew,adLeft,alpha,size,text,xSkew,width,img,video,adW,relX,adBottom,height,relY,bold,color,adTop,contClick,centerH,relRight,absAlignX,relBottom,absAlignY,centerV
    if(data.fullPage && data.fullPage!=""){
         HTML[pos] = "<a href='"+data.fullPage+"' target='_blank'><div class='htmlItem' style='"+HTMLStyles+"position:absolute;opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>\
         <img src='" + img + "' style='-webkit-box-shadow: 0px 0px 0px rgba(0, 0, 0, 0) !important;box-shadow: 0px 0px 0px rgba(0, 0, 0, 0)!important;background:transparent !important;border:0 !important;width:" + data.width + "px;height:" + data.height + "px'/>\
        </div></a>";
    }else{
         HTML[pos] = "<div class='htmlItem' style='"+HTMLStyles+"position:absolute;opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>\
         <img src='" + img + "' style='-webkit-box-shadow: 0px 0px 0px rgba(0, 0, 0, 0) !important;box-shadow: 0px 0px 0px rgba(0, 0, 0, 0)!important;background:transparent !important;border:0 !important;width:" + data.width + "px;height:" + data.height + "px'/>\
        </div>";
    }
    
   
    context.save();
    context.translate(x + data["width"] / 2, y + data["height"] / 2);
    context.rotate(Number(data.relRot) * Math.PI / 180);
    context.translate(-(x + data["width"] / 2), -(y + data["height"] / 2));
    if (!mini) {
        stablishedmaxHeight(y + Number(data["height"]) + pageYoffsetGeneral);
    }
    if (imgLibrary[img]) {
        context.globalAlpha = Number(data["alpha"]);
        if (data["over"] == "true" && MODE == "VISOR") {
            //alert(OVER);
            if (!OVER || OVERMAID["data"]["img"] != img) {
                context.drawImage(imgLibrary[img], 0, 0, data["width"] / 2, data["height"], x, y, data["width"] / 2, data["height"]);
                pageElements[pos] = true;
            } else {
                context.drawImage(imgLibrary[img], Number(data["width"]) / 2, 0, data["width"] / 2, data["height"], x, y, data["width"] / 2, data["height"]);
                pageElements[pos] = true;
            }
        } else {
            context.drawImage(imgLibrary[img], x, y, data["width"], data["height"]);
            pageElements[pos] = true;
        }
    } else {
        if (!imgLibraryStatus[img]) {
            imgLibraryStatus[img] = new Array();
            imgLibraryStatus[img][0] = pageFocus;
            var rt = new Image();
            rt.crossOrigin = 'crossdomain.xml';
            rt.src = proxy + img;

            rt.onload = function() {
                imgLibraryStatus[img][1] = true;
                imgLibrary[img] = rt;
                if (SUBMODE != "BOOKS" && endFade) {
                    if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                        createMaidIni(pageFocus, posBookX, 0);
                    } else {
                        createPagesOrder();
                    }
                }

            }
            rt.onerror = function() {
                imgLibraryStatus[img][1] = true;
                imgLibrary[img] = common.toolImages.errorImg[1];
                if (MODE != "PAGEORDER" && MODE != "PAGEGO") {
                    createMaidIni(pageFocus, posBookX, 0);
                    pageElements[pos] = true;
                } else {
                    createPagesOrder();
                    pageElements[pos] = true;
                }
            }

        }
        context.fillStyle = "#000000";
        context.globalAlpha = .7;
        //context.globalAlpha=data["alpha"];
        context.fillRect(x + Number(data["relX"]), y + Number(data["relY"]), data["width"], data["height"]);

    }
    context.restore();

}
function Video(img, x, y, w, h, data, mini, pos) {
    for (var j in arrayVideos) {
        arrayVideos[j].style.pixelTop = y;
        arrayVideos[j].style.pixelLeft = x;
        arrayVideos[j].style.top = y;
        arrayVideos[j].style.left = x;
    }
    context.save();
    context.fillStyle = data["color"];
    context.globalAlpha = .5;
    context.fillRect(x + Number(data["relX"]), y + Number(data["relY"]), data["width"], data["height"]);
    context.restore();
    context.drawImage(common.toolImages.videoIco[1], x + Number(data["relX"]) + Number(data["width"]) / 2 - common.toolImages.videoIco[1].naturalWidth / 2, y + Number(data["relY"]) + Number(data["height"]) / 2 - common.toolImages.videoIco[1].naturalHeight / 2);
    pageElements[pos] = true;

}
function cleanVideos() {
    //videos propios
    if (videoStatus) {
        for (var j in arrayVideos) {
            document.body.removeChild(arrayVideos[j]);
        }
        videoStatus = false;
        arrayVideos = new Array();
    }
    //videos de youtube
    for (var j in arrayVideoYouTubeTemp) {
        document.body.removeChild(arrayVideoYouTubeTemp[j]);
    }
    arrayVideoYouTubeTemp = {};
    videoYouTubeStatus = false;
}
var arrayVideoYouTube = new Array();
var arrayVideoYouTubeTemp = new Array();
var videoYouTubeStatus = false;
function VideoYouTube(img, x, y, w, h, data, mini, pos) {

    //--------HTML
    var HTMLStyles="";
    if(data.absAlignY && data.absAlignY!="null"){
        HTMLStyles+="bottom:0;";
    }else{
        
        
        if(data.relBottom==undefined || data.relBottom=="null"){
            HTMLStyles+="top:" + y + "px;";
        }else{
            
            HTMLStyles+="bottom:" +(maxHeight-y-Number(data.height))+ "px;";
        }
        
        
    }
    if(data.absAlignX &&  data.absAlignX!="null"){
        HTMLStyles+="right:0;";
    }else{
        if(data.relRight==undefined || data.relRight=="null"){
            HTMLStyles+="left:" + x + "px;";
        }else{
            
            HTMLStyles+="right:" +(areaW-x-Number(data.width))+ "px;";
        }
        
    }

    var youtubeHTML = '<iframe class="htmlItemIFrame" style="width:' + data.width + 'px;height:' + data.height + 'px !important" src="http://www.youtube.com/embed/' + data["youtube"] + '" frameborder="0" allowfullscreen></iframe>';
    HTML[pos] = "<div class='htmlItem' style="+HTMLStyles+"position:absolute;text-align:" + data.align + ";font-family:" + data.face + ";font-size:" + data.size + "px;color:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>\
        " + youtubeHTML + "</div>";



    videoYouTubeStatus = true;
    if ("ontouchmove" in document.documentElement && !endMove && !iniTouchMovePageScroll) {
        context.save();
        context.fillStyle = data["color"];
        context.globalAlpha = .5;
        context.fillRect(x + Number(data["relX"]), y + Number(data["relY"]), data["width"], data["height"]);
        context.restore();
        context.drawImage(common.toolImages.youtubeIco[1], x + Number(data["relX"]) + Number(data["width"]) / 2 - common.toolImages.youtubeIco[1].naturalWidth / 2, y + Number(data["relY"]) + Number(data["height"]) / 2 - common.toolImages.youtubeIco[1].naturalHeight / 2);

    } else if (MODE == "VISOR" && (endMove || iniTouchMovePageScroll) && SUBMODE == "MAIN") {
        if (data["youtube"].indexOf("youtube.com") != -1 && data["youtube"].indexOf("?") != -1) {
            var videoData = new Array();
            videoData = data["youtube"].split("v=");
            data["youtube"] = videoData[1].substring(0, 11);
        }
        videoYouTubeStatus = true;
        if (!arrayVideoYouTube[data["youtube"]]) {
            var divYouTube = document.createElement("div");
            document.body.appendChild(divYouTube);
            divYouTube.innerHTML = '<iframe width="' + data["width"] + '" height="' + data["height"] + '" src="http://www.youtube.com/embed/' + data["youtube"] + '" frameborder="0" allowfullscreen></iframe>';

            divYouTube.style.position = "absolute";
            divYouTube.style.pixelLeft = Number(x);
            divYouTube.style.pixelTop = Number(y);
            divYouTube.style.left = Number(x);
            divYouTube.style.top = Number(y);
            divYouTube.style.pixelWidth = data["width"];
            divYouTube.style.pixelHeight = data["height"];
            divYouTube.style.backgroundColor = "black";
            /*var divYouTubeIFrame=document.createElement("iframe");
             divYouTubeIFrame.class="youtube-player";
             divYouTube.setAttribute('id',data["youtube"]);
             divYouTubeIFrame.src="http://www.youtube.com/embed/"+data["youtube"];
             divYouTubeIFrame.height=data["height"];
             divYouTubeIFrame.width=data["width"];
             divYouTubeIFrame.frameborder=0;
             divYouTube.appendChild(divYouTubeIFrame);*/
            arrayVideoYouTube[data["youtube"]] = divYouTube;
            arrayVideoYouTubeTemp[data["youtube"]] = divYouTube;
        } else if (!arrayVideoYouTubeTemp[data["youtube"]]) {
            var tempVid = arrayVideoYouTube[data["youtube"]];
            tempVid.firstChild.height = data["height"];
            tempVid.firstChild.width = data["width"];
            document.body.appendChild(tempVid);
            tempVid.style.position = "absolute";
            tempVid.style.pixelLeft = Number(x);
            tempVid.style.pixelTop = Number(y);
            tempVid.style.left = Number(x);
            tempVid.style.top = Number(y);
            arrayVideoYouTubeTemp[data["youtube"]] = tempVid;
        } else {
            arrayVideoYouTubeTemp[data["youtube"]].style.top = y + Number(data["relY"]);
            arrayVideoYouTubeTemp[data["youtube"]].style.pixelTop = y + Number(data["relY"]);
            arrayVideoYouTubeTemp[data["youtube"]].style.left = x + Number(data["relX"]);
            arrayVideoYouTubeTemp[data["youtube"]].style.pixelLeft = x + Number(data["relX"]);
        }

    } else {
        context.save();
        context.fillStyle = data["color"];
        context.globalAlpha = .2;
        context.fillRect(x + Number(data["relX"]), y + Number(data["relY"]), data["width"], data["height"]);
        context.restore();
        context.drawImage(common.toolImages.youtubeIco[1], x + Number(data["relX"]) + Number(data["width"]) / 2 - common.toolImages.youtubeIco[1].naturalWidth / 2, y + Number(data["relY"]) + Number(data["height"]) / 2 - common.toolImages.youtubeIco[1].naturalHeight / 2);

    }
    if (!mini) {
        stablishedmaxHeight(y + Number(data["height"]) + pageYoffsetGeneral);
    }
    pageElements[pos] = true;
}
function Rectangulo(img, x, y, w, h, data, mini, pos) {
    
    //--------HTML
    var HTMLStyles="";
    if(data.absAlignY && data.absAlignY!="null"){
        HTMLStyles+="bottom:0;";
    }else{
        
        
        if(data.relBottom==undefined || data.relBottom=="null"){
            HTMLStyles+="top:" + y + "px;";
        }else{
            
            HTMLStyles+="bottom:" +(maxHeight-y-Number(data.height))+ "px;";
        }
        
        
    }
    if(data.absAlignX &&  data.absAlignX!="null"){
        HTMLStyles+="right:0;";
    }else{
        if(data.relRight==undefined || data.relRight=="null"){
            HTMLStyles+="left:" + x + "px;";
        }else{
            
            HTMLStyles+="right:" +(areaW-x-Number(data.width))+ "px;";
        }
        
    }
    if(data.fullPage && data.fullPage!=""){
         HTML[pos] = "<a href='"+data.fullPage+"' target='_blank'><div class='htmlItem' style='"+HTMLStyles+"position:absolute;background:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>\
        </div></a>";
    }else{
        HTML[pos] = "<div class='htmlItem' style='"+HTMLStyles+"position:absolute;background:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>\
        </div>";
    }
    
    if (data["adBottom"] == "true") {

        context.save();
        context.fillStyle = data["color"];
        context.globalAlpha = data["alpha"];
        context.fillRect(x + Number(data["relX"]), areaH - data["height"], areaW, data["height"]);
        context.restore();
    } else if (data["adTop"] == "true") {

        context.save();
        context.fillStyle = data["color"];
        context.globalAlpha = data["alpha"];
        context.fillRect(x + Number(data["relX"]), 0, areaW, data["height"]);
        context.restore();
    } else if (data["adLeft"] == "true") {
        context.save();
        context.fillStyle = data["color"];
        context.globalAlpha = data["alpha"];
        context.fillRect(0, y + Number(data["relY"]), x + data["width"], data["height"]);
        context.restore();
    } else if (data["adRight"] == "true") {
        Maids[pageFocus][pos].x = 0;
        context.save();
        context.fillStyle = data["color"];
        context.globalAlpha = data["alpha"];
        context.fillRect(x + Number(data["relX"]), y + Number(data["relY"]), areaW, data["height"]);
        context.restore();
    } else {
        context.save();
        context.translate(x + data["width"] / 2, y + data["height"] / 2);
        context.rotate(Number(data.relRot) * Math.PI / 180);
        context.translate(-(x + data["width"] / 2), -(y + data["height"] / 2));
        context.fillStyle = data["color"];
        context.globalAlpha = data["alpha"];
        context.fillRect(x + Number(data["relX"]), y + Number(data["relY"]), data["width"], data["height"]);
        context.restore();
        if (!mini) {
            stablishedmaxHeight(y + Number(data["height"]) + pageYoffsetGeneral);
        }
    }
    pageElements[pos] = true;
}
function BGColor(img, x, y, w, h, data, mini, pos) {
    context.save();
    context.fillStyle = data["color"];
    context.globalAlpha = data["alpha"];
    if (!mini) {
        context.fillRect(x, 0, areaW, areaH);
    } else {
        context.fillRect(x, y, areaW, areaH);
    }
    context.restore();
    pageElements[pos] = true;
}
function Text(img, x, y, w, h, data, mini, pos) {
    context.save();
    context.translate(Number(x) + Number(data.width) / 2, Number(y) + Number(data.height) / 2);
    context.rotate(Number(data.relRot) * Math.PI / 180);
    context.translate(-(Number(x) + Number(data.width) / 2), -(Number(y) + Number(data.height) / 2));
    txt = unescape(data["text"][lan]);
    
    if (txt == "undefined") {
        txt = unescape(data["text"]["migration"]);
    }
    var jumpAt = Number(data["width"]); // N�mero de caracteres por l�nea.
    var lineHeight;
    lineHeight = Number(data["lineHeight"]); // Ancho de cada l�nea.
    var size;
    size = Number(data["size"]); // Ancho de cada l�nea.
    context.fillStyle = data["color"];
    context.globalAlpha = data["alpha"];
    var bold = "";
    if (data['bold'] && data['bold'] == "1") {
        var bold = "Bold";
        var HTMLBOLD="font-weight:bold;";
    } else {
        bold = "";
        HTMLBOLD="";
    }
    var italic = "";
    if (data['italic'] && data['italic'] == "1") {
        var italic = "italic";
        var HTMLITALIC="font-style:italic;";
    }else{
        HTMLITALIC="";
    }
    context.textBaseline = "top";
    var texto;
    var textoLineBreaks = txt.split("\n");
    var lineBreak = 0;
    var cont = 0;
    for (var k in textoLineBreaks) {
        texto = getLines(context, textoLineBreaks[k], Number(data['width']), data['size'], data['face'], bold, italic);
        for (var j in texto) {
            if (data.align == "right") {
                var xAlign = x + jumpAt - context.measureText(texto[j]).width;
            } else if (data.align == "center") {
                xAlign = x + jumpAt / 2 - context.measureText(texto[j]).width / 2;
            } else {
                console.log(x);
                xAlign = x;
            }
            if(texto.length==1){
                context.fillText(texto[j], xAlign, y );
            }else{
               context.fillText(texto[j], xAlign, y + (lineHeight * cont)); 
            }
            if (data['underlined'] && data['underlined'] == "1") {
                context.lineWidth = 1;
                context.strokeStyle = data["color"];
                context.beginPath();
                context.moveTo(xAlign, y + (lineHeight * cont)+Number(data.size)+4);
                context.lineTo(xAlign + context.measureText(texto[j]).width, y + (lineHeight * cont)+Number(data.size)+4);
                context.stroke();
                context.closePath();
            }
            cont++;
            data["height"] = cont * Number(data["lineHeight"]) + Number(data["size"]);
            lineBreak += lineHeight * cont;
            //data["height"]=lineHeight*(cont-1)+size;
        }
    }
     context.restore();
    //--------HTML
    var HTMLStyles="";
    if(data.absAlignY && data.absAlignY!="null"){
        HTMLStyles+="bottom:0;";
    }else{
        if(data.relBottom==undefined || data.relBottom=="null"){
            HTMLStyles+="top:" + y + "px;";
            if (textoLineBreaks.length == 1){
                HTMLStyles+="top:" + y + "px;";
            }else{
                HTMLStyles+="top:" + (Number(y) - (Number(data.lineHeight) - Number(data.size)) / 2) + "px;left:" + x + "px;";
            }
        }else{
            HTMLStyles+="bottom:" +(maxHeight-y-Number(data.height))+ "px;";
        }
    }
    if(data.absAlignX &&  data.absAlignX!="null"){
        HTMLStyles+="right:0;";
    }else{
        if(data.relRight==undefined || data.relRight=="null"){
            HTMLStyles+="left:" + x + "px;";
        }else{
            HTMLStyles+="right:" +(areaW-x-Number(data.width))+ "px;";
        }
    }
    if (data['underlined'] && data['underlined'] == "1"){
        HTMLStyles+="text-decoration:underline;";
    }
    if (data.lineHeight == 0) {
        if(data.fullPage && data.fullPage!=""){
         HTML[pos] = "<a href='"+data.fullPage+"' target='_blank'><div class='htmlItem' style='"+HTMLBOLD+HTMLITALIC+"position:absolute;display:table;margin-top:0;text-align:" + data.align + ";font-family:" + data.face + ";font-size:" + data.size + "px;color:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;"+HTMLStyles+"opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>" + data["text"][lan] + "</div></a>"
        }else{
          HTML[pos] = "<div class='htmlItem' style='"+HTMLBOLD+HTMLITALIC+"position:absolute;display:table;margin-top:0;text-align:" + data.align + ";font-family:" + data.face + ";font-size:" + data.size + "px;color:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;"+HTMLStyles+"opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);'>" + data["text"][lan] + "</div>";
        }
    } else {
        if(data.fullPage && data.fullPage!=""){
            HTML[pos] = "<a href='"+data.fullPage+"' target='_blank'><div class='htmlItem' style='"+HTMLBOLD+HTMLITALIC+"position:absolute;display:table;margin-top:0;text-align:" + data.align + ";font-family:" + data.face + ";font-size:" + data.size + "px;color:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;"+HTMLStyles+";opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);line-height:" + data.lineHeight + "px'>" + data["text"][lan] + "</div></a>";
        }else{
           HTML[pos] = "<div class='htmlItem' style='"+HTMLBOLD+HTMLITALIC+"position:absolute;display:table;margin-top:0;text-align:" + data.align + ";font-family:" + data.face + ";font-size:" + data.size + "px;color:" + data.color + ";width:" + data.width + "px;height:" + data.height + "px;"+HTMLStyles+";opacity:" + data.alpha + ";-ms-transform: rotate(" + data.relRot + "deg);-webkit-transform: rotate(" + data.relRot + "deg); transform: rotate(" + data.relRot + "deg);line-height:" + data.lineHeight + "px'>" + data["text"][lan] + "</div>";
        }
    }
   
    if (!mini) {
        stablishedmaxHeight(y + Number(data["height"]) + pageYoffsetGeneral);
    }
    pageElements[pos] = true;
}
function getLines(ctx, phrase, maxPxLength, size, face, bold, italic) {
    //break the text area text into lines based on "box" width
    var wa = phrase.split(" "),
            phraseArray = [],
            lastPhrase = "",
            l = maxPxLength,
            measure = 0;
    ctx.font = eval("'" + bold + " " + italic + " " + size + "px " + face + "'");
    for (var i = 0; i < wa.length; i++) {
        var w = wa[i];
        measure = ctx.measureText(lastPhrase + w).width;

        if (measure < l && i != 0) {
            lastPhrase += (" " + w);
        } else if (measure < l) {
            lastPhrase += (w);
        } else {
            phraseArray.push(lastPhrase);
            lastPhrase = w;
        }
        if (i === wa.length - 1) {
            phraseArray.push(lastPhrase);
            break;
        }
    }

    return phraseArray;
}

var posBookX = 0;
var posBookY = 0;
var openOps = true;
//show books

var selPageListBook = 0;//page of thumbs
//var numPages=0;//page of thumbs
var contXListBook = 0;
var contYListBook = 0;
var posYListBook = 4;
var posXListBook = 0;
var altern;
function drawBGsquare() {
    altern = 1;
    var ini = numfil * numcol * selPageListBook;
    var fin = (numfil * numcol * (selPageListBook + 1)) - 1;

    if (SUBMODE == "BOOKS") {
        pageScroll(ini, fin);
    }
    contXListBook = 0;
    contYListBook = 0;
    posYListBook = 0;
    posXListBook = 0;

}
var posXBooks = 0;
function showListBookCollection() {
    drawBGIMG(imgLibrary["BG"]);
    drawBGsquare();
    var ini = numfil * numcol * selPageListBook;
    var fin = (numfil * numcol * (selPageListBook + 1)) - 1;
    contXListBook = 0;
    contYListBook = 0;
    posYListBook = 0;
    posXListBook = 0;

    for (var k = ini; k <= fin; k++) {
        if (books[k]) {
            if (books[k].Public == "1" || permission == 1) {
                drawRect(posXListBook + posXBooks + 4, posYListBook + 4, thumbAvatarW - 8, thumbAvatarH - 8, "#ffffff", .3, false);
                if (books[k].image) {
                    if (books[k].image.indexOf("http://") != -1) {
                        context.drawImage(imgLibrary[books[k].image], posXListBook + posXBooks + 4, posYListBook + 4, thumbAvatarW - 8, thumbAvatarH - 8);
                    } else {
                        if (imgLibrary[env + books[k].image]) {
                            context.drawImage(imgLibrary[env + books[k].image], posXListBook + posXBooks + 4, posYListBook + 4, thumbAvatarW - 8, thumbAvatarH - 8);
                        } else {
                            context.drawImage(imgLibrary[books[k].image], posXListBook + posXBooks + 4, posYListBook + 4, thumbAvatarW - 8, thumbAvatarH - 8);
                        }

                    }
                } else {
                    drawBall(posXListBook + posXBooks + thumbAvatarW / 2, posYListBook + thumbAvatarH / 2, 20, "#000000");
                    context.drawImage(common.toolImages.booksPB[1], posXListBook + posXBooks + thumbAvatarW / 2 - 40, posYListBook + thumbAvatarH / 2 - 40);
                }
                if (bookSelect == k) {
                    drawRect(posXListBook + posXBooks + 4, posYListBook + thumbAvatarH - 44, thumbW - 8, 40, "#000000", 1, false);
                    //drawText("Bold 10px verdana ","top","","#ffffff",k+1,posXListBook+190+posXBooks,posYListBook+180);
                    drawText("Bold 10px verdana ", "middle", "center", "#ffffff", books[k]["Title"], posXListBook + posXBooks + thumbAvatarW / 2, posYListBook + thumbAvatarH - 20);
                } else {
                    drawRect(posXListBook + posXBooks + 4, posYListBook + 4, thumbW - 8, 40, "#000000", 1, false);
                    drawText("Bold 10px verdana ", "middle", "center", "#ffffff", books[k]["Title"], posXListBook + posXBooks + thumbAvatarW / 2, posYListBook + 24);
                }
            } else {
                context.save();
                context.globalAlpha = .5;
                context.drawImage(common.toolImages.lockPB[1], posXListBook + 140 + posXBooks, posYListBook + 140);
                context.restore();
                drawText("Normal 20px arial ", "middle", "center", "#666666", "( PRIVATE BLOC )", posXListBook + 100 + posXBooks, posYListBook + 100);
            }
            /*context.save();
             var cont=0;
             for (var j in books[k]){
             context.font= "normal 12px arial ";
             context.textAlign = "left";
             context.fillStyle="#07aaff";
             context.fillText(j+":"+books[k][j],posXListBook+posXBooks+thumbAvatarW+10,posYListBook+10+(cont*20));
             cont++;
             }*/



            contXListBook += 1;
            if (contXListBook > numcol - 1) {
                contXListBook = 0;
                contYListBook += 1;
            }
            /*posXListBook=sepX*contXListBook;
             posYListBook=sepY*contYListBook;*/
            posXListBook = thumbW * contXListBook;
            posYListBook = thumbH * contYListBook;
        } else {
            break;
        }
    }
}
function pageScroll(ini, fin) {
    drawRect(4, areaH - 120, 200, 36, "#000000", 1);
    drawText("Bold 14px arial ", "middle", "center", "#ffffff", "Page: " + (selPageListBook + 1) + " | " + numPagesBook, 104, areaH - 100);
    drawBall(40, areaH - 40, 20, "#000000");
    context.drawImage(common.toolImages.booksPB[1], 0, areaH - 80);
    //draw av
    if (selPageListBook < numPagesBook - 1) {
        context.drawImage(common.toolImages.avListBookPB[1], areaW - 60, areaH - 80);
        context.globalAlpha = .5;
        context.drawImage(common.toolImages.reListBookPB[1], 80, areaH - 80);
        context.globalAlpha = 1;
    } else {
        selPageListBook = numPagesBook - 1;
    }
    if (selPageListBook >= 1) {
        context.globalAlpha = .5;
        context.drawImage(common.toolImages.avListBookPB[1], areaW - 60, areaH - 80);
        context.globalAlpha = 1;
        context.drawImage(common.toolImages.reListBookPB[1], 80, areaH - 80);
    } else {
        thumbPage = 0;
    }
    //draw pages
    var pageX = 140;
    context.save();
    context.textAlign = "center";
    for (var k = 0; k <= numPagesBook - 1; k++) {
        //context.fillRect(pageX+(40*k)+1,areaH-37,34,34);
        if (k == selPageListBook) {
            drawBall(pageX + (80 * k) + 40, areaH - 40, 20, "#ffffff");
            drawText("Bold 14px arial ", "middle", "center", "#000000", k + 1, pageX + (80 * k) + 40, areaH - 40);
        } else {
            drawBall(pageX + (80 * k) + 40, areaH - 40, 20, "#000000");
            drawText("Bold 14px arial ", "middle", "center", "#ffffff", k + 1, pageX + (80 * k) + 40, areaH - 40);

        }
    }
}
function iniParamsListBook() {
    contX = 0;
    contY = 0;
    //calculate canvas size
    if (numfil == 0) {
        numfil = 1;
    }
    if (selPageListBook <= 0) {
        selPageListBook = 0;
    } else if (selPageListBook >= numPagesBook - 1) {
        selPageListBook = numPagesBook - 1;
    }
    showListBookCollection();
}
//------------------------------
function showBooks() {
    showListBookCollection();
}

//open books
var posPageX = 0;
var posPageY = 0;
var showPagesTween;
function showPages() {
    posBookX = 100 * areaW / areaH + 50;
    posBookXAv = 100 * areaW / areaH + 50;
    showPagesTween = setInterval(drawPages, 33);
}
function drawPages() {
    posBookXAv = Math.floor(posBookXAv / 4);
    //posBookX=(100*areaW/areaH+50)-centerX-posBookXAv;
    posBookX = (100 * areaW / areaH + 50) - posBookXAv;
    if (posBookXAv <= 0) {
        clearInterval(showPagesTween);
        commonDrawPages();
    } else {
        commonDrawPages();
    }
}
function commonDrawPages() {
    context.save();
    context.fillStyle = "0099ff";
    context.globalAlpha = 1;
    context.fillRect(0, 0, 100 * areaW / areaH + 50, areaH);
    context.restore();
    for (var j in pages) {
        context.save();
        context.globalAlpha = 1;
        context.fillStyle = "ffffff";
        context.fillRect(0, 100 * j, 100 * areaW / areaH + 50, 100);
        createMaidIniMini(j, 0, 0);
        context.restore();
    }
    context.fillStyle = "0099ff";
    context.fillRect(5, pageFocus * 100 - pageYoffset + 5, 30, 90);
    context.fillStyle = "ffffff";
    context.globalAlpha = 1;
    context.fillRect(100 * areaW / areaH, 0, 50, areaH);
    var ScrollPage = pageYoffset * (areaH - 40) / ((numPages * 100) - areaH);
    if (numPages > Math.floor(areaH / 100)) {
        context.fillStyle = "0099ff";
        context.globalAlpha = 1;
        context.fillRect(Math.floor(100 * areaW / areaH), 0, 50, areaH);
        context.fillStyle = "ffffff";
        context.fillRect(Math.floor(100 * areaW / areaH) + 5, ScrollPage + 5, 40, 30);
    }
    createMaidIni(pageFocus, posBookX, 0);
    createAdv(areaW - posBookX);

}
function createAdv(x) {
    context.save();
    context.fillStyle = "0099ff";
    context.globalAlpha = 1;
    context.fillRect(x, 0, 250, areaH);
    context.font = "normal 20px Georgia ";
    context.fillStyle = "#ffffff";
    context.textBaseline = "top";
    context.fillText("Espacio", x + 10, 100);
    context.fillText("Publicitario", x + 10, 120);
    context.restore();
}
function hidePages() {
    posBookXAv = Math.floor(posBookXAv / 2);
    posBookX -= posBookXAv;
    if (posBookXAv <= 1) {
        OLDSUBMODE = "MAIN";
        SUBMODE = "MAIN";
        posBookX = 0;
        posBookXAv = 0;
        clearInterval(showPagesTween);
        if (createMode) {
            createMode();
            toMAIN();
        } else {
            endMove = true;
        }
        createMaidIni(pageFocus, posBookX, 0);
    } else {

        context.save();
        context.fillStyle = "0099ff";
        context.globalAlpha = 1;
        context.fillRect(0, 0, 100 * areaW / areaH + 50, areaH);
        context.restore();
        for (var j in pages) {
            context.save();
            context.globalAlpha = 1;
            context.fillStyle = "ffffff";
            context.fillRect(0, 100 * j, 100 * areaW / areaH + 50, 100);
            createMaidIniMini(j, 0, 0);
            context.restore();
        }
        context.fillStyle = "0099ff";
        context.fillRect(5, pageFocus * 100 - pageYoffset + 5, 30, 90);
        var ScrollPage = pageYoffset * (areaH - 40) / ((numPages * 100) - areaH);
        if (numPages > Math.floor(areaH / 100)) {
            context.fillStyle = "0099ff";
            context.globalAlpha = 1;
            context.fillRect(Math.floor(100 * areaW / areaH), 0, 50, areaH);
            context.fillStyle = "ffffff";
            context.fillRect(Math.floor(100 * areaW / areaH) + 5, ScrollPage + 5, 40, 30);
        }
        createMaidIni(pageFocus, posBookX, 0);
        createAdv(areaW - posBookX);

    }
}
var avY = 0;
function scrollPage() {
    if (Math.floor(avY) == 0) {
        clearInterval(scrollPagesTween);
        avY += 1 * direction;
        commonDrawPages();
    } else {
        context.save();
        context.fillStyle = "1a1a1a";
        context.globalAlpha = 1;
        context.fillRect(0, 0, 100 * areaW / areaH + 50, areaH);
        context.restore();
        for (var j in pages) {
            context.save();
            context.globalAlpha = 1;
            context.fillStyle = "ffffff";
            context.fillRect(0, 100 * j, 100 * areaW / areaH + 50, 100);
            createMaidIniMini(j, 0, -(pageYoffset + avY * direction) * areaH / 100);
            context.restore();
        }
        context.fillStyle = "0099ff";
        context.fillRect(0, pageFocus * 100 - (pageYoffset + avY * direction) + 5, 30, 90);
        if (numPages > Math.floor(areaH / 100)) {
            context.fillStyle = "0099ff";
            context.globalAlpha = 1;
            context.fillRect(Math.floor(100 * areaW / areaH), 0, 50, areaH);
            context.fillStyle = "ffffff";
            context.fillRect(Math.floor(100 * areaW / areaH) + 5, (clickY + avY * direction) + 5, 40, 30);
        }
        createMaidIni(pageFocus, posBookX, -pageYoffsetGeneral);
        createAdv(areaW - posBookX);
        avY = avY / 2;
    }
}
var iniScrollGeneral = false;
function drawScrollGeneral() {
    iniScrollGeneral = true;
    context.save();
    context.fillStyle = "#000000";
    context.globalAlpha = .5;
    context.fillRect(areaW - 50 + posBookX, 10, 30, areaH - 80);
    context.fillStyle = "#ffffff";
    context.globalAlpha = .5;
    context.fillRect(areaW - 45 + posBookX, 30 + pageYoffsetGeneral * (areaH - 80 - 40) / (maxHeight - areaH) - 10, 20, 20);
    context.restore();
}
var avYGeneral = 0;
var touchMoveIni;
var touchMoveEnd;
var iniTouchMove = false;
var iniTouchMovePageScroll = false;
function pageScrollFollow(e) {
    context.save();
    var contentY = e.clientY;
    if (contentY >= areaH - 120) {
        contentY = areaH - 120;
    } else if (contentY <= 0) {
        contentY = 0;
    }
    scrollPageYGeneral = pageYoffsetGeneral;
    pageYoffsetGeneral = Math.floor((maxHeight - areaH) * contentY / (areaH - 120));
    createMaidIni(pageFocus, 0, 0);
    context.fillStyle = "000000";
    context.globalAlpha = .5;
    context.fillRect(areaW - 40, 0, 40, areaH - 80);
    context.fillStyle = "ffffff";
    context.globalAlpha = .5;
    context.fillRect(areaW - 40, contentY, 40, 40);
    context.restore();
}
var detect;
var OVER = false;
var OVERMAID;

detectCollision = function(x, y) {
    var clip;
    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j]["data"]["relRot"] == 0) {
            var widthMed = 1;
            if (Maids[pageFocus][j]["data"]["over"] == "true") {
                widthMed = 2;
            }
            if (x >= Number(Maids[pageFocus][j]["x"]) && x <= Number(Maids[pageFocus][j]["data"]["width"]) / widthMed + Number(Maids[pageFocus][j]["x"]) && y + pageYoffsetGeneral >= Number(Maids[pageFocus][j]["y"]) && y + pageYoffsetGeneral <= Number(Maids[pageFocus][j]["data"]["height"]) + Number(Maids[pageFocus][j]["y"]) && !FULLIMG) {

                if (Maids[pageFocus][j]["lock"] != "true") {
                    if ((Maids[pageFocus][j]["data"]["fullPage"] && Maids[pageFocus][j]["data"]["fullPage"] != "false") || y > areaH - 80) {
                        theCanvas.style.cursor = "pointer";
                        OVER = true;
                        OVERMAID = Maids[pageFocus][j];
                    } else {
                        theCanvas.style.cursor = "default";
                        if (OVER) {
                            OVER = false;
                        }
                        OVER = false;

                    }
                    clip = Maids[pageFocus][j];
                } else {
                    theCanvas.style.cursor = "default";
                    OVER = false;
                    if (OVER) {
                        OVER = false;
                    }
                }
            }
        } else {
            //calculate x,y width maid-rotation
            var X = (x - (Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2)) * Math.cos(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (y - (Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2)) * Math.sin(Number(-Number(Maids[pageFocus][j]["data"]["relRot"])) * Math.PI / 180);
            var Y = (x - (Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2)) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (y - (Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2)) * Math.cos(-Number(Number(Maids[pageFocus][j]["data"]["relRot"])) * Math.PI / 180);

            var X = X + (Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2);
            var Y = Y + (Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2);


            if (X >= Number(Maids[pageFocus][j]["x"]) && X <= Number(Maids[pageFocus][j]["data"]["width"]) / widthMed + Number(Maids[pageFocus][j]["x"]) && Y + pageYoffsetGeneral >= Number(Maids[pageFocus][j]["y"]) && Y + pageYoffsetGeneral <= Number(Maids[pageFocus][j]["data"]["height"]) + Number(Maids[pageFocus][j]["y"])) {
                if (Maids[pageFocus][j]["lock"] != "true") {
                    if ((Maids[pageFocus][j]["data"]["fullPage"] && Maids[pageFocus][j]["data"]["fullPage"] != "false") || Y > areaH - 80) {
                        theCanvas.style.cursor = "pointer";
                        OVER = true;
                        OVERMAID = Maids[pageFocus][j];
                    } else {
                        theCanvas.style.cursor = "default";
                        OVER = false;
                        if (OVER) {
                            OVER = false;
                        }

                    }
                    clip = Maids[pageFocus][j];
                } else {
                    theCanvas.style.cursor = "default";
                    OVER = false;
                    if (OVER) {
                        OVER = false;
                    }
                }
            }
        }
    }
    if (clip) {
        return clip;
    } else {
        return false;
    }
    createMaidIni(pageFocus, 0, 0);
}

var snapObjectDesv = 5;
detectAlign = function(x, y) {
    var detectArray = new Array(false, false, false, false, 0, 0);
    var detectAlignMaid = new Array();
    var _x = x;
    var _y = y;
    if (maidSelect.data.relRot != 0) {
        var newCoord = testRot(x, y);
        x = newCoord[0];
        y = newCoord[1];
    }
    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j] != maidSelect) {
            var X1 = (-snapObjectDesv - Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            var X2 = (snapObjectDesv - Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X1 = X1 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            X2 = X2 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            if (maidSelect.data.relRot == 0) {
                var X = (-Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
                X = X + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            } else {
                X = _x;
            }
            if (x > Math.floor(X1) && x < Math.floor(X2)) {
                detectArray[0] = true;
                detectArray[4] = X;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = _x;
            }
            X1 = (-snapObjectDesv - Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X2 = (snapObjectDesv - Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X1 = X1 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            X2 = X2 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            if (maidSelect.data.relRot == 0) {
                X = (-Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
                X = X + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            } else {
                X = _x;
            }
            if (x > Math.floor(X1) && x < Math.floor(X2)) {
                detectArray[0] = true;
                detectArray[4] = X;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = _x;
            }
            X1 = (-snapObjectDesv + Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X2 = (snapObjectDesv + Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X1 = X1 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            X2 = X2 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            if (maidSelect.data.relRot == 0) {
                X = (Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
                X = X + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            } else {
                X = _x;
            }
            if (x > Math.floor(X1) && x < Math.floor(X2)) {
                detectArray[1] = true;
                detectArray[4] = X;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = _x;
            }
            X1 = (-snapObjectDesv + Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X2 = (snapObjectDesv + Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            X1 = X1 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            X2 = X2 + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            if (maidSelect.data.relRot == 0) {
                X = (Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) - (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.sin(-Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
                X = X + Number(Maids[pageFocus][j]["x"]) + Number(Maids[pageFocus][j]["data"]["width"]) / 2;
            } else {
                X = _x;
            }
            if (x > Math.floor(X1) && x < Math.floor(X2)) {
                detectArray[1] = true;
                detectArray[4] = X;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = _x;
            }
        }
    }
    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j] != maidSelect) {

            var Y1 = (-Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (-snapObjectDesv - Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            var Y2 = (snapObjectDesv - Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (snapObjectDesv - Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y1 = Y1 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y2 = Y2 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            var Y = (-Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y = Y + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            if (y > Math.floor(Y1) && y < Math.floor(Y2)) {
                detectArray[2] = true;
                detectArray[5] = Y;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[5] = _y;
            }
            Y1 = (-Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (-snapObjectDesv + Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y2 = (snapObjectDesv - Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (snapObjectDesv + Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y1 = Y1 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y2 = Y2 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y = (-Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y = Y + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;

            if (y > Math.floor(Y1) && y < Math.floor(Y2)) {
                detectArray[3] = true;
                detectArray[5] = Y;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[5] = _y;
            }
            Y1 = (Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (-snapObjectDesv - Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y2 = (snapObjectDesv + Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (snapObjectDesv - Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y1 = Y1 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y2 = Y2 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y = (Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (-Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y = Y + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            if (y > Math.floor(Y1) && y < Math.floor(Y2)) {
                detectArray[2] = true;
                detectArray[5] = Y;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[5] = _y;
            }
            Y1 = (Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (-snapObjectDesv + Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y2 = (snapObjectDesv + Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (snapObjectDesv + Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y1 = Y1 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y2 = Y2 + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            Y = (Number(Maids[pageFocus][j]["data"]["width"]) / 2) * Math.sin(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180) + (Number(Maids[pageFocus][j]["data"]["height"]) / 2) * Math.cos(Number(Maids[pageFocus][j]["data"]["relRot"]) * Math.PI / 180);
            Y = Y + Number(Maids[pageFocus][j]["y"]) + Number(Maids[pageFocus][j]["data"]["height"]) / 2;
            if (y > Math.floor(Y1) && y < Math.floor(Y2)) {
                detectArray[3] = true;
                detectArray[5] = Y;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[5] = _y;
            }
        }
    }
    return new Array(detectArray, detectAlignMaid);
}
detectAlignRot = function(x, y) {

    var detectArray = new Array(false, false, false, false, 0, 0);
    var detectAlignMaid = new Array();

    var newCoord = testRot(x, y);
    _x = newCoord[0];
    _y = newCoord[1];

    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j] != maidSelect) {
            if (_x > Number(Maids[pageFocus][j].x) - snapObjectDesv && _x < Number(Maids[pageFocus][j].x) + snapObjectDesv) {
                detectArray[0] = true;
                detectArray[4] = Maids[pageFocus][j].x;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = x;
            }
            if (_x > Number(Maids[pageFocus][j].x) + Number(Maids[pageFocus][j].data.width) - snapObjectDesv && _x < Number(Maids[pageFocus][j].x) + Number(Maids[pageFocus][j].data.width) + snapObjectDesv) {
                detectArray[0] = true;
                detectArray[4] = Number(Maids[pageFocus][j].x) + Number(Maids[pageFocus][j].data.width);
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = x;
            }

        }
    }
    newCoord = testRot(x + maidSelect.height, y);
    _x = newCoord[0];
    _y = newCoord[1];
    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j] != maidSelect) {
            if (x > Number(Maids[pageFocus][j].x) - snapObjectDesv && x < Number(Maids[pageFocus][j].x) + snapObjectDesv) {
                detectArray[0] = true;
                detectArray[4] = Maids[pageFocus][j].x;
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = x;
            }
            if (x > Number(Maids[pageFocus][j].x) + Number(Maids[pageFocus][j].data.width) - snapObjectDesv && x < Number(Maids[pageFocus][j].x) + Number(Maids[pageFocus][j].data.width) + snapObjectDesv) {
                detectArray[0] = true;
                detectArray[4] = Number(Maids[pageFocus][j].x) + Number(Maids[pageFocus][j].data.width);
                detectAlignMaid.push(Maids[pageFocus][j]);
                break;
            } else {
                detectArray[4] = x;
            }

        }
    }
    return new Array(detectArray, detectAlignMaid);
}
//recording data
function getXMLHTTPRequestPage() {
    try {
        req = new XMLHttpRequest();
    } catch (err1) {
        try {
            req = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (err2) {
            try {
                req = new ActiveXObject("Microsoft.XMLHTTP");
            } catch (err3) {
                req = false;
            }
        }
    }
    return req;
}
var http = getXMLHTTPRequestPage(); // creo una instancia del objeto XMLHTTPRequest.
function sendVar(variable1) {
    
    
   
    MODE="VISOR";
    createMaidIni(pageFocus, 0, 0, false, true);
    var dataURL = theCanvas.toDataURL("image/png");
    MODE="EDITOR";
    
    
    
    
    var HTMLString = "";
    for (var j in HTML) {
        HTMLString += HTML[j];
    }
    var recordHTML="";
    if(HTMLBG!=""){
        recordHTML =HTMLBG + HTMLString + "</div>";
    }else{
        recordHTML ="<div style='height:" + maxHeight + "px;position:relative'>" + HTMLString + "</div>";
    }
    
    
    
    context.save();
    context.fillStyle = "#1a1a1a";
    context.fillRect(Math.floor(areaW / 2 - 200), Math.floor(areaH / 2 - 100), 400, 200);
    context.fillStyle = "#ffffff";
    drawText("Bold 14px arial ", "", "center", "#ffffff", "Loadin...", Math.floor(areaW / 2), Math.floor(areaH / 2 - 50));
    var httpTemp = getXMLHTTPRequestPage();
    http = httpTemp;
    var urlRecordPage = "ed/save.php";
    if (toMainConfig && !creatingBook && !recordAvatar) {
        toMainConfig = false;
        var URL = root + "xml/" + xmlDestiny + ".xml";
        var URLdir = root + "xml/" + xmlDestiny ;
    } else if (creatingBook || recordAvatar || loadFont || loadTemp || loadCard) {
        recordAvatar = false;
        URL = homeRoot + "xml/" + xmlDestiny + ".xml";
        URLdir = homeRoot + "xml/" + xmlDestiny ;
    } else {
        if (books[bookSelect]) {
            URL = homeRoot + books[bookSelect]["id"] + "/xml/" + xmlDestiny + ".xml";
            URLdir = homeRoot + books[bookSelect]["id"] + "/xml/" + xmlDestiny ;
        } else {
            URL = homeRoot + "xml/" + xmlDestiny + ".xml";
            URLdir = homeRoot + "xml/" + xmlDestiny ;
        }
    }
    context.restore();
    var CUERPO = escape(variable1);
    http.open("POST", urlRecordPage, true); // fijando los parametros para el env�o de datos.
    http.onreadystatechange = handler; // Qu� funci�n utilizar en caso de que el estado de la petici�n cambie.
    http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    delForms();
    delPageForms();
    if (permission) {
        http.send("CUERPO=" + CUERPO + "&URL=" + URL +"&URLdir="+URLdir+"&html="+recordHTML+"&img="+dataURL); // enviar petici�n.
    } else {
        alert("You are in a demo, you can not load contents!!!!");
        returnToEditor();
    }
}
var iniBookhttp;
function iniBook(variable1) { // funcion encargada de inviar la variable al archivo php llamado index.php.
    var iniBookhttpTemp = getXMLHTTPRequestPage();
    iniBookhttp = iniBookhttpTemp;
    urlRecordPage = "ed/createBook.php";
    alert(urlRecordPage);
    MODE = "VISOR";
    OLDSUBMODE = "MAIN";
    SUBMODE = "MAIN";
    toMAIN();
    /*books.sort(function(a, b){
     var nameA=a.id.toLowerCase(), nameB=b.id.toLowerCase()
     if (nameA < nameB) //sort string ascending
     return -1
     if (nameA > nameB)
     return 1
     return 0 //default return value (no sorting)
     })*/
    iniBookhttp.open("POST", urlRecordPage, true); // fijando los parametros para el env�o de datos.
    iniBookhttp.onreadystatechange = bookCreated; // Qu� funci�n utilizar en caso de que el estado de la petici�n cambie.
    iniBookhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    alert(homeRoot + variable1);
    iniBookhttp.send("BOOK=" + homeRoot + variable1); // enviar petici�n.
}
function bookCreated() {
    if (iniBookhttp.readyState == 4) {
        if (iniBookhttp.status == 200) {
            //delForms();

            iniBookRecord = false;
            pageFocus = 0;
            root = books[numBooks - 1]["associate"] + "/";
            bookSelect = numBooks - 1;
            pageFocus = 0;
            pages = new Array;
            Maids = new Array;
            configArray[1] = new Array(pageXML, "book", "pages");
            numPage = 0;
            numPages = 0;
            numBooks = 0;
            posBookX = 0;
            posPageX = 0;
            scrollPageY = 0;
            pageYoffset = 0;
            avY = 0;
            resetParamsPage();
            posBookX = 0;
            posBookXAv = 0;
            bookPreload = true;
            if (local) {
                url = root + "xml/" + "config.xml?" + randomRoot();
            } else {
                url = proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + "config.xml") + '&env=' + env + '&random=' + randomRoot();
            }
            
            getXML();
        }
    }
}
function handler() {
    if (http.readyState == 4) {
        if (http.status == 200) {
            if (creatingBook) {
                creatingBook = false;
                iniBook(books[numBooks - 1]["id"]);
            } else if (creatingPage) {
                creatingPage = false;
                pageFocus = numPages - 1;
                recordPage();
            } else if (loadFont) {
                alert("Record " + xmlDestiny + " OK!!!!");
                loadFont = false;
                recordPage();
            } else if (loadTemp) {
                alert("Record " + xmlDestiny + " OK!!!!");
                loadTemp = false;
                associateRecord();
            } else if (loadCard) {
                alert("Record " + xmlDestiny + " OK!!!!");
                loadCard = false;
                if (bookSelect != null) {
                    associateRecord();
                }
            } else {
                if (oldPage != "") {
                    alert(oldPage + " deleted");
                    oldPage = "";
                }
                if (MODE != "PAGEORDER") {
                    refreshPage();
                }
            }
            //alert(http.responseText); // El texto de respuesta del archivo index.php lo muestra como una alerta.
        }
    }
}
var xmlDestiny;
function recordPage() {
    if (oldPage == "") {
        xmlDestiny = pages[pageFocus]["id"];
        var configText = "";
        configText += "<?xml version='1.0' encoding='utf-8' ?>";
        configText += "\n<configuration>";
        configText += '\n<interface permission="' + loadPermission + '" pageStaticAv="' + pages[pageFocus].pageStaticAv + '" pageStaticRe="' + pages[pageFocus].pageStaticRe + '">';
        for (var j in Maids[pageFocus]) {
            configText += '\n<item>';
            configText += '\n<id type="' + Maids[pageFocus][j]["type"] + '" x="' + Maids[pageFocus][j]["x"] + '" y="' + Maids[pageFocus][j]["y"] + '">' + Maids[pageFocus][j]["id"] + '</id>';
            configText += "\n<w>" + Maids[pageFocus][j]["data"]["width"] + "</w>";
            configText += "\n<h>" + Maids[pageFocus][j]["data"]["height"] + "</h>";
            configText += "\n<asoc>" + Maids[pageFocus][j]["asoc"] + "</asoc>";
            configText += "\n<vis>" + Maids[pageFocus][j]["vis"] + "</vis>";
            configText += "\n<lock>" + Maids[pageFocus][j]["lock"] + "</lock>";
            configText += "\n<data>";
            for (var k in Maids[pageFocus][j]["data"]) {
                if (k != "text") {
                    configText += "\n<" + k + ">" + Maids[pageFocus][j]["data"][k] + "</" + k + ">";
                } else {
                    if (Maids[pageFocus][j]["data"][k]["es"] != undefined) {
                        configText += "\n<" + k + ">";
                        for (var l in arrayLan) {
                            configText += "\n<" + arrayLan[l] + ">" + Maids[pageFocus][j]["data"][k][arrayLan[l]] + "</" + arrayLan[l] + ">";
                        }
                        configText += "\n</" + k + ">";
                    } else {
                        configText += "\n<" + k + ">" + Maids[pageFocus][j]["data"][k]["migration"] + "</" + k + ">";
                    }

                }
            }
            configText += "\n</data>";
            configText += "\n</item>";
        }
        configText += '\n</interface>';
        configText += "\n</configuration>";
    } else {
        xmlDestiny = oldPage;
        var configText = "";
        configText += "<?xml version='1.0' encoding='utf-8' ?>";
        configText += "\n<configuration>";
        configText += '\n<interface permission="' + loadPermission + '" pageStaticAv="' + pages[pageFocus].pageStaticAv + '" pageStaticRe="' + pages[pageFocus].pageStaticRe + '">';
        configText += '\n</interface>';
        configText += "\n</configuration>";
    }
    sendVar(configText);
}
function associateRecord() {
    //if(toMainConfig || bookSelect>=0){
    if (toMainConfig || recordAvatar || loadCard) {
        var pagesColl = pagesHome;
    } else {
        pagesColl = pages;
    }
    xmlDestiny = "config";
    var configText = "";
    configText += "<?xml version='1.0' encoding='utf-8' ?>";
    configText += "\n<configuration>";
    configText += '\n<config>';
    if (!loadCard) {
        for (var j in arrayConfig) {
            configText += '\n<' + j + ' >' + arrayConfig[j] + '</' + j + '>';
        }
    } else {
        for (var j in arrayConfigHome) {
            configText += '\n<' + j + ' >' + arrayConfigHome[j] + '</' + j + '>';
        }
    }
    configText += '\n</config>';
    configText += '\n<fonts>';
    configText += '\n<google>' + fonts.arrayFontsGoogle.join(",") + '</google>';
    configText += '\n<typekit>' + fonts.arrayFontsTypekit.join(",") + '</typekit>';
    configText += '\n<ascender>' + fonts.arrayFontsAscender.join(",") + '</ascender>';
    configText += '\n<monotype>' + fonts.arrayFontsMonotype.join(",") + '</monotype>';
    configText += '\n<fontdeck>' + fonts.arrayFontsFontdeck + '</fontdeck>';

    configText += '\n</fonts>';
    configText += '\n<book>';
    for (var j in pagesColl) {
        configText += '\n<item>';
        configText += '\n<id type="" x="" y="">' + pagesColl[j]["id"] + '</id>';
        configText += '\n<associate>' + pagesColl[j]["associate"] + '</associate>';
        configText += '\n<data/>';
        configText += '\n</item>';
    }
    configText += '\n</book>';
    configText += '\n<list>';
    for (var j in books) {
        configText += '\n<item>';
        configText += '\n<id type="" x="" y="">' + books[j]["id"] + '</id>';
        for (var k in books[j]) {
            if (k != "id" && k != "img") {
                configText += '\n<' + k + '>' + books[j][k] + '</' + k + '>';
            }
        }
        configText += '\n</item>';
    }
    configText += '\n</list>';
    configText += "\n</configuration>";
    sendVar(configText);
}
function stablishedmaxHeight(maxh) {
    if (maxh > maxHeight) {
        maxHeight = maxh;
    }
    if (maxHeight > areaH) {
        scrolleable = true;
    } else {
        scrolleable = false;
    }
}
var iniUpdateOrientation=false;
function updateOrientation() {
    if(iniUpdateOrientation){
        delForms();
        screenLibrary = new Object();
        for (j in pagePosYLibrary) {
            pagePosYLibrary[j] = 0;
        }
        areaW = window.innerWidth;
        areaH = window.innerHeight;
        numcol = Math.floor(areaW / thumbW);
        numfil = Math.floor((areaH - pageH) / thumbH);
        sepX = thumbW;
        sepY = thumbH;
        numPagesBook = Math.ceil(numBooks / (numcol * numfil));
        canvasCont.style.width = areaW;
        canvasCont.style.height = areaH;
        theCanvas.width = areaW;
        theCanvas.height = areaH;
        createMaidIni(pageFocus, posBookX, 0);
        FULLIMG = false;
        if (formActiv) {
            if (textAreaType == 1) {
                textArea.style.width = areaW;
                textArea.style.height = areaH - 80;
            } else if (textAreaType == 0) {
                formInputCont[0].style.top = areaH - 60;
            } else if (textAreaType == 2) {
                formInputCont[0].style.top = areaH - 60;
            } else if (textAreaType == 3) {
                formInputCont[0].style.left = areaW - widthScrollOpsMaid;
                formInputCont[0].style.top = formPosY + formOffsetY;
            }
        }
        if (SUBMODE == "BOOKS") {
            showListBookCollection();
        } else if (MODE == "PAGEORDER" || MODE == "PAGEGO") {
            col = Math.floor(areaW / thumbPageW);
            row = Math.floor((areaH - 80) / thumbPageW);
            numScreens = Math.ceil(numPages / (col * row));
            if (numScreen > numScreens - 1) {
                numScreen = numScreens - 1;
            }
            createPagesOrder();
        } else {
            maxHeight = 0;
            if (scrolleable && MODE == "VISOR") {
                createMaidIni(pageFocus, posBookX, 0);
            } else if (SUBMODE == "EDITMAIDLATERAL") {
                maxHeight = 0;
                createMaidIni(pageFocus, posBookX, 0);
                commonDrawEditMaid();
            } else {
                createMaidIni(pageFocus, posBookX, 0);
            }
        }
    }
}
//----------utils
//debugguer version
function debuggVersion(version) {
    //alert(version);
}
//clear Stage
function clearStage() {
    context.fillStyle = "#0099ff";
    context.fillRect(0, 0, areaW, areaH);
}
//resize
var resizeIni = false;
function resizeDoc(e) {
    if(canvasFreeFocus){
        canvasFreeResize();
    }
    context.clearRect(0, 0, areaW, areaH);
    resizeIni = true;
    for (j in pagePosYLibrary) {
        pagePosYLibrary[j] = 0;
    }
    screenLibrary = new Object();
    canvasCont.style.width = window.innerWidth;
    canvasCont.style.height = window.innerHeight;
    theCanvas.width = window.innerWidth;
    theCanvas.height = window.innerHeight;
    areaW = window.innerWidth;
    areaH = window.innerHeight;
    numcol = Math.floor(areaW / thumbW);
    numfil = Math.floor((areaH - pageH) / thumbH);
    /*sepX=thumbW+(areaW-(numcol*thumbW))/numcol;
     sepY=thumbH+((areaH-80-4)-(numfil*thumbH))/numfil;*/
    sepX = thumbW;
    sepY = thumbH;
    numPagesBook = Math.ceil(numBooks / (numcol * numfil));
    if (formActiv) {
        if (textAreaType == 1) {
            textArea.style.width = areaW;
            textArea.style.height = areaH - 80;
        } else if (textAreaType == 0) {
            formInputCont[0].style.top = areaH - 60;
        } else if (textAreaType == 2) {
            formInputCont[0].style.top = areaH - 60;
        } else if (textAreaType == 3) {
            formInputCont[0].style.left = areaW - widthScrollOpsMaid;
            formInputCont[0].style.top = formPosY + formOffsetY;
        }
    }
    FULLIMG = false;
    if (SUBMODE == "BOOKS") {
        showListBookCollection();
    } else if (MODE == "PAGEORDER" || MODE == "PAGEGO") {
        col = Math.floor(areaW / thumbPageW);
        row = Math.floor((areaH - 80) / thumbPageW);
        numScreens = Math.ceil(numPages / (col * row));
        if (numScreen > numScreens - 1) {
            numScreen = numScreens - 1;
        }
        createPagesOrder();
    } else {
        maxHeight = 0;
        if (scrolleable && MODE == "VISOR") {
            createMaidIni(pageFocus, posBookX, 0);
        } else if (SUBMODE == "EDITMAIDLATERAL") {
            createMaidIni(pageFocus, posBookX, 0);
            commonDrawEditMaid();
        } else {
            createMaidIni(pageFocus, posBookX, 0);
        }
    }
    context.globalAlpha = 1;
    if (createMode) {
        createMode();
    }
}

//random number
var top_level = 1000;
var bottom_level = 1;
function randomRoot() {
    var RANDOM = Math.floor(Math.random() * (top_level - (bottom_level - 1))) + bottom_level;
    return RANDOM;
}
//write multiline
function writeInfoMultiline(info, x, y) {
    var txt = info;
    var start = 0; // Car�cter por el que empezar
    var currentLine = 0; // L�nea en la que nos encontramos.
    var jumpAt = 200; // N�mero de caracteres por l�nea.
    var lineHeight = 20; // Ancho de cada l�nea.
    var str; // Auxiliar donde guardar el texto partido.
    context.font = "normal 9px Georgia ";
    context.fillStyle = "#ffffff";
    context.textBaseline = "top";
    while (start < txt.length)
    {
        str = info.substr(start, jumpAt);
        start += jumpAt;
        context.fillText(str, x, y + (lineHeight * currentLine++));
    }
}
//write normal
function writeInfo(info, x, y) {
    context.font = "normal 9px Georgia ";
    context.fillStyle = "#ffffff";
    context.textBaseline = "top";
    context.fillText(info, x, y);
}
//draw Img
function Img(src, x, y) {
    this.x = x;
    this.y = y;
    image = new Image();
    image.crossOrigin = 'crossdomain.xml';
    image.src = src;
    image.onload = function() {
        Images[src] = image;
        context.drawImage(image, x, y);
    }
    image.onerror = function() {
        Images[src] = common.toolImages.errorImg[1];
        context.drawImage(image, x, y);
    }
}
Img.prototype.draw = function(src, x, y) {
    context.drawImage(Images[src], x, y);
}
//events depending on mode
//first remove existing
//second add news
var listenersList = new Array(visordown, visorup, visormove);
function assignListeners() {
    if ("ontouchmove" in document.documentElement) {
        theCanvas.addEventListener("touchstart", listenersList[0], false);
        theCanvas.addEventListener("touchend", listenersList[1], false);
        theCanvas.addEventListener("touchmove", listenersList[2], false);

    } else {
        theCanvas.addEventListener("mousedown", listenersList[0], false);
        theCanvas.addEventListener("mouseup", listenersList[1], false);
        theCanvas.addEventListener("mousemove", listenersList[2], false);
    }
}
function removeListeners() {
    if ("ontouchmove" in document.documentElement) {
        theCanvas.removeEventListener("touchstart", listenersList[0], false);
        theCanvas.removeEventListener("touchend", listenersList[1], false);
        theCanvas.removeEventListener("touchmove", listenersList[2], false);

    } else {
        theCanvas.removeEventListener("mousedown", listenersList[0], false);
        theCanvas.removeEventListener("mouseup", listenersList[1], false);
        theCanvas.removeEventListener("mousemove", listenersList[2], false);
    }
}
function client(e) {
    e.preventDefault();
    if ("ontouchmove" in document.documentElement) {
        clickY = e.touches[0].clientY;
        clickX = e.touches[0].clientX;
    } else {
        clickY = e.clientY;
        clickX = e.clientX;
    }
    return clickX, clickY;
}
function toMAIN() {
    cleanVideos();
    delPageForms();
    delForms();
    iniTouchMovePageScroll = false;
    returnMoveX = 0;
    MODE = "VISOR";
    FULLIMG = false;
    SUBMODE = "MAIN";
    OLDSUBMODE = "MAIN";
    maidSelect = null;
    removeListeners();
    listenersList = new Array(visordown, visorup, visormove);
    assignListeners();
    resetParamsPage();
    if (createMode) {
        endMove = false;
        createMode();
        createMode = null;
    } else {
        Offsset = 0;
        if (!_static) {
            tween(theCanvas, "fade", {alpha: 100}, velFade, execCreateMaidIni, Quad_easeInOut, "VISOR", execCreateMaidIni);
        } else {
            _static = false;
        }
    }
    if (Number(arrayConfig.temp) > 0 && tempPermission == 2 && !navigationMode) {
        navigationMode = false;
        tempo = setInterval(automatic, Number(arrayConfig.temp));
        contTemp = Number(arrayConfig.temp) / 1000;
        writeTemp();
        contTemp = Number(arrayConfig.temp) / 1000 - 1;
        writeTempInterval = setInterval(writeTemp, 1000);
    }

}
var visorAllow = 0;
function visordown(e) {
    adjustPageStatic = 0;
    clearTimeout(refreshTimeOut);
    e.preventDefault();
    client(e);
    moveX = clickX;
    moveY = clickY;
    if (clickY >= 80 && clickY <= 160 && clickX <= 80 && backPage != null) {
        //vuelve a pagina anterior
        endMove = false;
        cleanVideos();
        moveToPage(backPage);
        backPage = null;
    } else if (clickX <= 80 && clickY <= 80) {
        //cambia el modo de navegación
        navigationMode = !navigationMode;
        createMaidIni(pageFocus, posBookX, 0);
        if (!navigationMode) {
            if (Number(arrayConfig.temp) > 0 && tempPermission == 2) {
                if (tempo) {
                    clearInterval(tempo);
                    clearInterval(writeTempInterval);
                }
                navigationMode = false;
                tempo = setInterval(automatic, Number(arrayConfig.temp));
                contTemp = Number(arrayConfig.temp) / 1000;
                writeTemp();
                contTemp = Number(arrayConfig.temp) / 1000 - 1;
                writeTempInterval = setInterval(writeTemp, 1000);
            }
        } else {
            clearInterval(tempo);
            clearInterval(writeTempInterval);
        }
    } else if (!navigationMode && !("ontouchmove" in document.documentElement) && (!scrolleable || (scrolleable && clickX < areaW - 40)) && theCanvas.style.cursor == "default") {
        //navegación limpia en sobremesa
        if (tempo) {
            clearInterval(tempo);
            clearInterval(writeTempInterval);
        }
        cleanVideos();
        backPage = null;
        pageXvar = areaW;
        pageX = 0;
        resetParamsPage();
        BGImgH = 0;
        if (clickX < areaW / 2) {
            if (pages[pageFocus].pageStaticRe && preStatic) {
                adjustPageStatic = pages[pageFocus].pageStaticRe - pageFocus + 1;
                if (Math.abs(adjustPageStatic) >= numPages - 1) {
                    adjustPageStatic = 0;
                }
                numPage = pages[pageFocus].pageStaticRe;
            } else {
                numPage -= 1;
                if (numPage < 0) {
                    numPage = numPages - 1;
                }
            }
            Offsset = 0;
            endMove = false;
            createMaidIni(numPage, -areaW, 0);
            tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
        } else {
            if (pages[pageFocus].pageStaticAv && preStatic) {
                adjustPageStatic = pages[pageFocus].pageStaticAv - pageFocus - 1;
                numPage = pages[pageFocus].pageStaticAv;
            } else {
                numPage += 1;
                if (numPage > numPages - 1) {
                    numPage = 0;
                }
            }
            endMove = false;
            Offsset = areaW;
            createMaidIni(numPage, areaW, 0);
            tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
        }
    }

    if (!FULLIMG) {
        if ((!lanSel && clickY >= areaH - 160 && clickY <= areaH - 80 && clickX > ballPagesX - visorAllow && clickX < ballPagesX + ballPagesWidth + visorAllow && navigationMode) || (clickY >= areaH - 80 && clickX > ballPagesX - visorAllow && clickX < ballPagesX + ballPagesWidth + visorAllow && !navigationMode)) {
            ballSell();
        }
        if (lanSel) {
            //lan selection
            if (clickX >= areaW - 240 && clickX <= areaW - 160 && clickY <= areaH - 80 && clickY >= areaH - Object.keys(lanArray).length * fontW) {
                var pos = -Math.floor((clickY - areaH + 80) / 40) - 1;
                lan = arrayLan[pos];
                lanSel = false;
                createMaidIni(pageFocus, posBookX, 0);
                drawText("normal 15px arial ", "middle", "center", "#ffffff", lanArray[lan], areaW - 200, areaH - 40);
            } else {
                lanSel = false;
                createMaidIni(pageFocus, posBookX, 0);
                drawText("normal 15px arial ", "middle", "center", "#ffffff", lanArray[lan], areaW - 200, areaH - 40);
            }

        }

        if ((clickX <= common.toolImages.rePB[1].width || clickX >= areaW - common.toolImages.avPB[1].width) && (clickY >= areaH / 2 - common.toolImages.rePB[1].height / 2 && clickY <= areaH / 2 + common.toolImages.rePB[1].height / 2)) {
            avRePage();
        } else if ((clickX <= common.toolImages.rePB[1].width || clickX >= areaW - common.toolImages.avPB[1].width) && (clickY >= areaH / 2 - common.toolImages.rePB[1].height / 2 && clickY <= areaH / 2 + common.toolImages.rePB[1].height / 2)) {
            avRePage();
        } else if (clickY >= areaH - 80 && navigationMode) {
            if (clickX < 80 - visorAllow) {
                endMove = false;
                cleanVideos();
                //go books
                if (numBooks == 0) {
                    alert("You do not have edited blocs");
                } else {
                    Offsset = 100;
                    tween(theCanvas, "fade", {alpha: 0}, velFade, toBOOKS, Quad_easeInOut, "VISOR", execCreateMaidIni);
                }
            } else if (clickX > 80 - visorAllow && clickX < 160 - visorAllow) {
                //go pages
                /*toPAGES();
                 showPages();*/
                endMove = false;
                cleanVideos();
                Offsset = 100;
                tween(theCanvas, "fade", {alpha: 0}, velFade, pageGo, Quad_easeInOut, "VISOR", execCreateMaidIni);
            } else if (clickX > 160 - visorAllow && clickX < 240 - visorAllow) {
                //Vuelve a la Home
                cleanVideos();
                endMove = false;
                Offsset = 100;
                tween(theCanvas, "fade", {alpha: 0}, velFade, goHome, Quad_easeInOut, "VISOR", execCreateMaidIni);
            } else if ((clickX > 240 - visorAllow && clickX < ballPagesX) || (clickX > ballPagesX + ballPagesWidth && clickX < areaW - 240 + visorAllow)) {
                avRePage();
            } else if (clickY >= areaH - 80 && areaW - 240 < clickX && clickX < areaW - 160) {
                //go languages
                lanSel = !lanSel;
                createMaidIni(pageFocus, 0, 0);
                drawMenuLanSel();
            } else if (clickY >= areaH - 80 && areaW - 160 < clickX && clickX < areaW - 80 && permission != 2) {
                //go editor
                toEDITOR();
                createMaidIni(pageFocus, 0, 0);
                context.drawImage(common.toolImages.recordPB[1], 0, areaH - 80);
            } else if (clickY >= areaH - 80 && clickX >= areaW - 80) {
                //refresh
                resetParamsPage();
                refreshPage();
            }
        } else {
            if (scrolleable && clickX > areaW - 80) {
                endMove = false;
                iniTouchMovePageScroll = true;
                context.save();
                var contentY = clickY;
                if (contentY >= areaH - 80 - 10) {
                    contentY = areaH - 80 - 10;
                } else if (contentY <= 30) {
                    contentY = 30;
                }
                scrollPageYGeneral = pageYoffsetGeneral;
                pageYoffsetGeneral = (maxHeight - areaH) * (contentY - 30) / (areaH - 80 - 40);
                pagePosYLibrary[pageFocus] = pageYoffsetGeneral;
                createMaidIni(pageFocus, 0, 0);
            } else if ("ontouchmove" in document.documentElement && e.touches.length > 0) {
                //clearInterval(returnMoveTween);
            }
        }



    }
}
var overBallOn = null;
function overBall() {
    var pos = 0;
    pos = Math.floor((clickX - ballPagesX) / ballW);
    overBallOn = pos;

}
function ballSell() {
//go page ball
    cleanVideos();
    var pos = 0;
    if ("ontouchmove" in document.documentElement) {
        pos = Math.floor((clickX - ballPagesX) / ballW);
    } else {
        pos = Math.floor((clickX - ballPagesX) / ballW);
    }
    pageXvar = areaW;
    posPageX = 0;
    pageX = 0;
    numPage = pos;
    resetParamsPage();
    BGImgH = 0;
    backPage = null;
    if (pos < pageFocus) {
        if (numPage < 0) {
            numPage = numPages - 1;
        }
        adjustPageStatic = numPage - pageFocus + 1;
        if (Math.abs(adjustPageStatic) >= numPages - 1) {
            adjustPageStatic = 0;
        }
        endMove = false;
        Offsset = 0;
        createMaidIni(numPage, -areaW, 0);
        tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, "VISOR", null);

    } else {
        if (numPage > numPages - 1) {
            numPage = 0;
        }
        endMove = false;
        adjustPageStatic = numPage - pageFocus - 1;
        Offsset = areaW;
        createMaidIni(numPage, areaW, 0);
        tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
    }
}
function avRePage() {
    //va a página pulsando sobre el espacio entre bolas y flechas
    cleanVideos();
    backPage = null;
    pageXvar = areaW;
    pageX = 0;
    resetParamsPage();
    BGImgH = 0;
    if (clickX > areaW / 2) {
        numPage = Number(numPage) + 1;
        if (numPage > numPages - 1) {
            numPage = 0;
        }
        if (pages[pageFocus].pageStaticAv && preStatic) {
            adjustPageStatic = pages[pageFocus].pageStaticAv - pageFocus - 1;
            if (Math.abs(adjustPageStatic) >= numPages - 1) {
                adjustPageStatic = 0;
            }
            numPage = pages[pageFocus].pageStaticAv;
        } else {
            if (numPage > numPages - 1) {
                numPage = 0;
            }
        }
        endMove = false;
        createMaidIni(numPage, areaW, 0);
        Offsset = areaW;
        tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
    } else {
        numPage = Number(numPage) - 1;
        if (numPage < 0) {
            numPage = numPages - 1;
        }
        if (pages[pageFocus].pageStaticRe && preStatic) {
            adjustPageStatic = pages[pageFocus].pageStaticRe - pageFocus + 1;
            if (Math.abs(adjustPageStatic) >= numPages - 1) {
                adjustPageStatic = 0;
            }
            numPage = pages[pageFocus].pageStaticRe;
        } else {
            if (numPage < 0) {
                numPage = numPages - 1;
            }
        }
        Offsset = 0;
        endMove = false;
        tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
    }
}

function goHome() {
    bookSelect = null;
    Offsset = 0;
    tween(theCanvas, "fade", {alpha: 100}, velFade, goHome0, Quad_easeInOut, "PAGEGO", drawHome);
}
function drawHome() {
    drawRect(0, 0, areaW, areaH, "#2d2d2d", 1, false);
    //drawBGIMG(imgLibrary["BG"]);
    if (bookSelect == null) {
        drawText("normal 25px arial ", "middle", "center", "#ffffff", "HOME", areaW / 2, areaH - 50);
        context.drawImage(common.toolImages.avatarImg[1], Math.floor(areaW / 2 - common.toolImages.avatarImg[1].naturalWidth / 2), Math.floor(areaH / 2 - common.toolImages.avatarImg[1].naturalHeight / 2));
    } else {
        drawText("normal 25px arial ", "middle", "center", "#ffffff", books[selPos]["Title"], areaW / 2, areaH - 50);
        context.drawImage(books[bookSelect].img, Math.floor(areaW / 2 - books[bookSelect].img.naturalWidth / 2), Math.floor(areaH / 2 - books[bookSelect].img.naturalHeight / 2));
    }
}


function goHome0() {
    cleanVideos();
    //go Home
    pageFocus = 0;
    root = homeRoot;
    pageFocus = 0;
    pages = new Array;
    Maids = new Array;
    configArray[1] = new Array(pageXML, "book", "pages");
    numPage = 0;
    numPages = 0;
    numBooks = 0;
    posBookX = 0;
    posPageX = 0;
    bookPreload = true;
    resetParamsPage();
    posBookX = 0;
    posBookXAv = 0;
    if (local) {
        url = root + "xml/" + "config.xml";
    } else {
        url = proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + "config.xml") + '&env=' + env;
    }
    getXML();
}
var adjustPageStatic = 0;
function visorup(e) {
    adjustPageStatic = 0;
    e.preventDefault();
    OVER = false;
    if (OLDSUBMODE == "MAIN" && !FULLIMG) {
        clearInterval(returnMoveTween);
        if ("ontouchmove" in document.documentElement && clickX > 80 && clickY > 80) {
            if (clickY >= areaH - 80 && areaW - 240 < clickX && clickX < areaW - 160) {
                //go languages
                createMaidIni(pageFocus, 0, 0);
                drawMenuLanSel();
            } else if (!iniTouchMovePageScroll && clickY <= areaH - 80) {
                if (returnMoveX <= 10) {
                    switch (detectCollision(clickX, clickY)["type"]) {
                        case "genericLoaderImgFull/generic":
                            break;
                        case "genericBG/generic":
                            break;
                        case "genericVideo/generic":
                            createVideo(detectCollision(clickX, clickY))
                            break;
                        case "genericFont/generic":
                            createFullPage(detectCollision(clickX, clickY)["data"]["fullPage"], detectCollision(clickX, clickY)["data"]["mode"]);
                            break;
                        case "genericLoaderImg/generic":
                            if (detectCollision(clickX, clickY)["data"]["fullPage"] == "true") {
                                createFullImg(detectCollision(clickX, clickY)["data"]["img"]);
                            } else {
                                createFullPage(detectCollision(clickX, clickY)["data"]["fullPage"], detectCollision(clickX, clickY)["data"]["mode"]);
                            }
                            break;
                    }
                } else if (returnMoveX > 10 && returnMoveX < 200 && clickY <= areaH - 80) {
                    clearInterval(returnMoveTween);
                    endMove = false;
                    returnMoveTween = setInterval(eval("returnMove" + returnMoveDir), 33);
                } else if (returnMoveX > 200 && clickY <= areaH - 80) {
                    clearInterval(returnMoveTween);
                    backPage = null;
                    BGImgH = 0;
                    if (returnMoveDir == "Av") {
                        if (pages[pageFocus].pageStaticAv && preStatic) {
                            adjustPageStatic = pages[pageFocus].pageStaticAv - pageFocus - 1;
                            numPage = pages[pageFocus].pageStaticAv;
                        } else {
                            if (numPage > numPages - 1) {
                                numPage = 0;
                            }
                        }
                        endMove = false;
                        Offsset = areaW - (moveX - clickX);
                        createMaidIni(numPage, areaW, 0);
                        tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
                    } else {
                        if (pages[pageFocus].pageStaticRe && preStatic) {
                            adjustPageStatic = pages[pageFocus].pageStaticRe - pageFocus + 1;
                            if (Math.abs(adjustPageStatic) >= numPages - 1) {
                                adjustPageStatic = 0;
                            }
                            numPage = pages[pageFocus].pageStaticRe;
                        } else {
                            if (numPage < 0) {
                                numPage = numPages - 1;
                            }
                        }
                        Offsset = clickX - moveX;
                        endMove = false;
                        createMaidIni(numPage, -areaW, 0);
                        tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
                    }
                }
            } else {
                endMove = true;
                createMaidIni(pageFocus, 0, 0);
                detectMove = false;
            }
        } else if (clickY >= 160 && clickY <= 80 && clickX <= 80 && backPage != null) {
            endMove = false;
            moveToPage(backPage);
            backPage = null;
        } else if (clickX > 80 && clickY <= areaH - 80) {
            if (!iniTouchMovePageScroll) {
                switch (detectCollision(clickX, clickY)["type"]) {
                    case "genericLoaderImgFull/generic":
                        break;
                    case "genericBG/generic":
                        break;
                    case "genericVideo/generic":
                        createVideo(detectCollision(clickX, clickY))
                        break;
                    case "genericFont/generic":
                        createFullPage(detectCollision(clickX, clickY)["data"]["fullPage"], detectCollision(clickX, clickY)["data"]["mode"]);
                        break;
                    case "genericLoaderImg/generic":
                        if (detectCollision(clickX, clickY)["data"]["fullPage"] == "true") {
                            createFullImg(detectCollision(clickX, clickY)["data"]["img"]);
                        } else {
                            createFullPage(detectCollision(clickX, clickY)["data"]["fullPage"], detectCollision(clickX, clickY)["data"]["mode"]);
                        }
                        break;
                    default:
                        break;
                }
            } else {
                endMove = true;
                iniTouchMovePageScroll = false;
                createMaidIni(pageFocus, 0, 0);
                detectMove = false;
            }
        }

    } else if (FULLIMG) {
        toMAIN();
    } else {
        OLDSUBMODE = "MAIN";
    }
    iniTouchMovePageScroll = false;
}
var moveX;
var moveY;
function visormove(e) {
    e.preventDefault();
    client(e);
    if (!FULLIMG) {
        if (iniTouchMovePageScroll) {
            var contentY = clickY;
            if (contentY >= areaH - 80 - 10) {
                contentY = areaH - 80 - 10;
            } else if (contentY <= 30) {
                contentY = 30;
            }
            scrollPageYGeneral = pageYoffsetGeneral;
            pageYoffsetGeneral = (maxHeight - areaH) * (contentY - 30) / (areaH - 80 - 40);
            pagePosYLibrary[pageFocus] = pageYoffsetGeneral;
            createMaidIni(pageFocus, 0, 0);
        } else if ("ontouchmove" in document.documentElement && !iniTouchMovePageScroll) {
            if (tempo) {
                clearInterval(writeTempInterval);
                clearInterval(tempo);
            }
            cleanVideos();
            endMove = false;
            if (clickX < moveX) {
                posBookX = -(moveX - clickX);
                if (pages[pageFocus].pageStaticAv && preStatic) {
                    numPage = pages[pageFocus].pageStaticAv;
                    createMaidIni(numPage, areaW - (moveX - clickX), 0);
                    createMaidIni(pageFocus, -(moveX - clickX), 0);
                } else {
                    if (pageFocus == numPages - 1) {
                        numPage = 0;
                        createMaidIni(numPage, areaW - (moveX - clickX), 0);
                        createMaidIni(pageFocus, -(moveX - clickX), 0);
                    } else {
                        numPage = Number(pageFocus) + 1;
                        createMaidIni(numPage, areaW - (moveX - clickX), 0);
                        createMaidIni(pageFocus, -(moveX - clickX), 0);
                    }
                }
                returnMoveDir = "Av";
                returnMoveX = moveX - clickX;
            } else if (clickX > moveX) {
                posBookX = clickX - moveX;
                if (pages[pageFocus].pageStaticRe && preStatic) {
                    numPage = pages[pageFocus].pageStaticRe;
                    createMaidIni(numPage, -areaW + (clickX - moveX), 0);
                    createMaidIni(pageFocus, clickX - moveX, 0);
                } else {
                    if (pageFocus == 0) {
                        numPage = numPages - 1;
                        createMaidIni(numPage, -areaW + (clickX - moveX), 0);
                        createMaidIni(pageFocus, clickX - moveX, 0);
                    } else {
                        numPage = pageFocus - 1;
                        createMaidIni(numPage, -areaW + (clickX - moveX), 0);
                        createMaidIni(pageFocus, clickX - moveX, 0);
                    }
                }
                returnMoveDir = "Re";
                returnMoveX = clickX - moveX;
            }
        } else if (!iniTouchMovePageScroll) {
            if ((!lanSel && clickY >= areaH - 160 && clickY <= areaH - 80 && clickX > ballPagesX - visorAllow && clickX < ballPagesX + ballPagesWidth + visorAllow && navigationMode) || (clickY >= areaH - 80 && clickX > ballPagesX - visorAllow && clickX < ballPagesX + ballPagesWidth + visorAllow && !navigationMode)) {
                overBall();
            } else if (((clickX <= common.toolImages.rePB[1].width || clickX >= areaW - common.toolImages.avPB[1].width) && (clickY >= areaH / 2 - common.toolImages.rePB[1].height / 2 && clickY <= areaH / 2 + common.toolImages.rePB[1].height / 2)) || (clickX <= 80 && clickY <= 80) || (backPage != null && clickX <= 80 && clickY >= 80 && clickY <= 160)) {
                overBallOn = null;
                theCanvas.style.cursor = "pointer";
            } else if (!detectCollision(clickX, clickY)) {
                theCanvas.style.cursor = "default";
                overBallOn = null;
            }
            if (ini) {
                createMaidIni(pageFocus, 0, 0);
                if (clickX <= areaW / 4) {
                    context.drawImage(common.toolImages.rePB[1], 4, areaH / 2 - common.toolImages.rePB[1].height / 2);
                } else if (clickX >= 3 * areaW / 4) {
                    context.drawImage(common.toolImages.avPB[1], areaW - common.toolImages.avPB[1].width - 4, areaH / 2 - common.toolImages.avPB[1].height / 2);
                }
            }
        }
    }
    if (lanSel) {
        drawMenuLanSel();
    }

}
//tween av re
/*var overRe=new tweenAv(common.toolImages.rePB,0,-80);
 var overAv=new tweenAv(common.toolImages.avPB,1,areaW);
 function tweenAv(pb,op,posfinal){
 this.active=false;
 var _y=posfinal;
 var Tween;
 var draw=function(){
 _y = _y + (op*(areaW-80) - _y) / 3;
 createMaidIni(pageFocus,posBookX,-pageYoffsetGeneral);	
 context.save();
 context.globalAlpha=.1;
 context.fillStyle = "1a1a1a";
 context.fillRect(_y,0,80,areaH);
 context.restore();
 context.drawImage(pb[1],_y+posBookX,areaH/2-pb[1].naturalHeight/2);
 if(Math.abs(Math.ceil(_y))==op*(areaW-80)+1){
 stop();
 }
 }
 this.stop=function(){
 clearInterval(Tween);
 }
 this.start=function(){
 _y=posfinal;
 Tween=setInterval(draw,33);
 }
 
 }*/
//----------

var returnMoveDir;
var returnMoveX;
var returnMoveTween;
function returnMoveAv() {
    returnMoveX = Math.floor(returnMoveX / 2);
    createMaidIni(numPage, areaW - returnMoveX, 0);
    createMaidIni(pageFocus, -returnMoveX, 0);
    if (returnMoveX <= 0) {
        clearInterval(returnMoveTween);
        posPageX = 0;
        pageX = 0;
        numPage = pageFocus;
        maxHeight = 0;
        BGImgH = 0;
        createMaidIni(pageFocus, 0, 0, false);
        if (Number(arrayConfig.temp) > 0 && tempPermission == 2 && !navigationMode) {
            tempo = setInterval(automatic, Number(arrayConfig.temp));
            contTemp = Number(arrayConfig.temp) / 1000;
            writeTemp();
            contTemp = Number(arrayConfig.temp) / 1000 - 1;
            writeTempInterval = setInterval(writeTemp, 1000);
        }
        endMove = true;
    }
}
function returnMoveRe() {
    returnMoveX = Math.floor(returnMoveX / 2);
    createMaidIni(numPage, -areaW + returnMoveX, 0);
    createMaidIni(pageFocus, returnMoveX, 0);
    if (returnMoveX <= 0) {
        clearInterval(returnMoveTween);
        posPageX = 0;
        pageX = 0;
        numPage = pageFocus;
        maxHeight = 0;
        BGImgH = 0;
        createMaidIni(pageFocus, 0, 0, false);
        if (Number(arrayConfig.temp) > 0 && tempPermission == 2 && !navigationMode) {
            tempo = setInterval(automatic, Number(arrayConfig.temp));
            contTemp = Number(arrayConfig.temp) / 1000;
            writeTemp();
            contTemp = Number(arrayConfig.temp) / 1000 - 1;
            writeTempInterval = setInterval(writeTemp, 1000);
        }
        endMove = true;
    }
}
function resetParamsPage() {
    scrollPageYGeneral = 0;
    pageYoffsetGeneral = 0;
    avYGeneral = 0;
    maxHeight = 0;
}
//events for status "PAGES"
function toPAGES() {
    OLDSUBMODE = "PAGES";
    SUBMODE = "PAGES";
    removeListeners();
    listenersList = new Array(pagesdown, pagesup, pagesmove);
    assignListeners();
}
function pagesdown(e) {
    e.preventDefault();
    client(e);
    var pos = Math.floor((clickY + pageYoffset) / 100);
    if (pos <= numPages - 1 && clickX <= 100 * areaW / areaH) {
        pageXvar = areaW;
        posPageX = 0;
        pageX = 0;
        numPage = pos;
        resetParamsPage();
        BGImgH = 0;
        clearInterval(showPagesTween);
        posBookX = 200;
        posBookXAv = 200;
        endMove = false;
        backPage = null;
        showPagesTween = setInterval(hidePages, 33);
        createMode = function() {
            if (pos < pageFocus) {
                clearInterval(movPage);
                //removeListeners();
                direction = 1;
                movPage = setInterval(drawRight, velTween);
            } else {
                clearInterval(movPage);
                //removeListeners();
                direction = -1;
                movPage = setInterval(drawLeft, velTween);
            }
        }
    } else if (clickX <= 200 && pos <= numPages - 1 && clickX > 100 * areaW / areaH) {
        clearInterval(scrollPagesTween);
        if (clickY > areaH - 40) {
            clickY = areaH - 40;
        }
        scrollPageY = pageYoffset;
        pageYoffset = Math.floor(((numPages * 100) - areaH) * clickY / (areaH - 40));
        if (pageYoffset < scrollPageY) {
            avY = scrollPageY - pageYoffset;
            direction = 1;
            scrollPagesTween = setInterval(scrollPage, 33);
        } else {
            avY = pageYoffset - scrollPageY;
            direction = -1;
            scrollPagesTween = setInterval(scrollPage, 33);
        }
    } else {
        clearInterval(showPagesTween);
        posBookX = 200;
        posBookXAv = 200;
        endMove = false;
        showPagesTween = setInterval(hidePages, 33);
        createMode = null;
        toMAIN();
    }

}
function pagesmove(e) {
    e.preventDefault();

}
function pagesup(e) {
    e.preventDefault();

}
//events for status "PAGES"function createMai
function toBOOKS() {
    oldBookSel = bookSelect;
    cleanVideos();
    OLDSUBMODE = "BOOKS";
    SUBMODE = "BOOKS";
    removeListeners();
    listenersList = new Array(booksdown, booksup, booksmove);
    assignListeners();
    Offsset = 0;
    tween(theCanvas, "fade", {alpha: 100}, velFade, showListBookCollection, Quad_easeInOut, "VISOR", showListBookCollection);
}
var adjustPageBook = 0;
function booksdown(e) {
    e.preventDefault();
    client(e);
    posBook();
    if (books[selPos]) {
        theCanvas.style.cursor = "pointer";
        bookSelect = selPos;
    } else {
        theCanvas.style.cursor = "default";
        bookSelect = oldBookSel;
    }
    moveX = clickX;
    if (clickX > 100 && clickX < 140 && clickY > areaH - 80) {
        adjustPageBook = 0;
        selPageListBook -= 1;
        if (selPageListBook < 0) {
            selPageListBook = 0;
        } else {
            Offsset = 0;
            tween(theCanvas, "rePageBook", {x: areaW}, velTweenBook, showListBookCollection, Quad_easeInOut, "VISOR", showListBookCollection);
        }
    } else if (clickX > 140 && clickX < (areaW - 40) && clickY > areaH - 80) {
        var pos = Math.floor((clickX - 140) / 40);
        adjustPageBook = Math.abs(pos - selPageListBook) - 1;
        if (pos > selPageListBook) {
            selPageListBook = pos;
            Offsset = areaW;
            tween(theCanvas, "avPageBook", {x: 0}, velTweenBook, showListBookCollection, Quad_easeInOut, "VISOR", showListBookCollection);
        } else {
            selPageListBook = pos;
            Offsset = 0;
            tween(theCanvas, "rePageBook", {x: areaW}, velTweenBook, showListBookCollection, Quad_easeInOut, "VISOR", showListBookCollection);
        }
    } else if (clickX > (areaW - 40) && clickY > areaH - 80) {
        adjustPageBook = 0;
        selPageListBook += 1;
        if (selPageListBook > numPagesBook - 1) {
            selPageListBook = numPagesBook - 1;
        } else {
            Offsset = areaW;
            tween(theCanvas, "avPageBook", {x: 0}, velTweenBook, showListBookCollection, Quad_easeInOut, "VISOR", showListBookCollection);
        }
    } else if (clickY > areaH - 80) {
        Offsset = 100;
        tween(theCanvas, "fade", {alpha: 0}, velFade, toMAIN, Quad_easeInOut, "VISOR", showListBookCollection);
    }
}
var oldBookSel;
function booksmove(e) {
    e.preventDefault();
    client(e);
    posBook();
    if (books[selPos]) {
        theCanvas.style.cursor = "pointer";
        bookSelect = selPos;
    } else {
        theCanvas.style.cursor = "default";
        bookSelect = oldBookSel;
    }
    showListBookCollection();
    if ("ontouchmove" in document.documentElement) {
        returnMoveX = clickX - moveX;
        if (returnMoveX < 0) {
            if (selPageListBook < numPagesBook - 1) {
                selPageListBook += 1;
                posXBooks = areaW + returnMoveX;
                showListBookCollection();
                selPageListBook -= 1;
                posXBooks = returnMoveX;
                showListBookCollection();
            }
        } else {
            if (selPageListBook > 0) {
                selPageListBook -= 1;
                posXBooks = -areaW + returnMoveX;
                showListBookCollection();
                selPageListBook += 1;
                posXBooks = returnMoveX;
                showListBookCollection();
            }
        }
    }

}
function posBook() {
    var pos = 0;
    var eX = Math.floor(clickX / sepX);
    var eY = Math.floor(clickY / sepY);
    if (eY == 0 && eX == 0) {
        pos = 0;
    } else if (eY == 0) {
        pos = eX;
    } else if (eX == 0) {
        pos = numcol * eY;
    } else {
        pos = numcol * eY + eX;
    }
    pos += (numfil * numcol) * selPageListBook;
    selPos = pos;
}
function booksup(e) {
    e.preventDefault();
    posBook();
    if (Math.abs(returnMoveX) < 10) {
        theCanvas.style.cursor = "default";
        removeListeners();
        listenersList = new Array();
        if (clickX <= sepX * numcol && clickY < sepY * numfil && selPos <= numBooks - 1) {
            Offsset = 100;
            if ((books[selPos].Public == "0" || books[selPos].Public == "undefined" || books[selPos].Public == undefined) && permission != 1) {

                bookSelect = oldBookSel;
                listenersList = new Array(booksdown, booksup, booksmove);
                assignListeners();
                showListBookCollection();
            } else {
                tween(theCanvas, "fade", {alpha: 0}, velFade, startBook0, Quad_easeInOut, "PAGEGO", showListBookCollection);
            }
        } else {
            Offsset = 100;
            tween(theCanvas, "fade", {alpha: 0}, velFade, toMAIN, Quad_easeInOut, "VISOR", showListBookCollection);
        }
    } else if (Math.abs(returnMoveX) > 10 && Math.abs(returnMoveX) < 200) {
        if (moveX > clickX) {
            adjustPageBook = 0;
            selPageListBook += 1;
            if (selPageListBook > numPagesBook - 1) {
                selPageListBook = numPagesBook - 1;
            } else {
                Offsset = areaW + returnMoveX;
                tween(theCanvas, "rePageBook", {x: areaW}, velTweenBook, showListBookCollection, Quad_easeOut, "VISOR", showListBookCollection);
            }
        } else {
            adjustPageBook = 0;
            selPageListBook += 1;
            if (selPageListBook < 0) {
                selPageListBook = 0;
            } else {
                Offsset = returnMoveX;
                tween(theCanvas, "avPageBook", {x: 0}, velTweenBook, showListBookCollection, Quad_easeOut, "VISOR", showListBookCollection);
            }
        }
    } else {
        if (moveX > clickX) {
            adjustPageBook = 0;
            selPageListBook += 1;
            if (selPageListBook > numPagesBook - 1) {
                selPageListBook = numPagesBook - 1;
            } else {
                Offsset = areaW + returnMoveX;
                tween(theCanvas, "avPageBook", {x: 0}, velTweenBook, showListBookCollection, Quad_easeOut, "VISOR", showListBookCollection);
            }
        } else {
            adjustPageBook = 0;
            selPageListBook -= 1;
            if (selPageListBook < 0) {
                selPageListBook = 0;
            } else {
                Offsset = returnMoveX;
                tween(theCanvas, "rePageBook", {x: areaW}, velTweenBook, showListBookCollection, Quad_easeOut, "VISOR", showListBookCollection);
            }
        }
    }
    returnMoveX = 0;
}
var selPos;
function startBook0() {
    Offsset = 0;
    tween(theCanvas, "fade", {alpha: 100}, velFade, startBook, Quad_easeInOut, "PAGEGO", drawBook);
}
function drawBook() {
    drawRect(0, 0, areaW, areaH, "#2d2d2d", 1, false);
    drawBGIMG(imgLibrary["BG"]);
    context.drawImage(books[selPos]["img"], Math.floor(areaW / 2 - books[selPos]["img"].naturalWidth / 2), Math.floor(areaH / 2 - books[selPos]["img"].naturalHeight / 2));
    drawText("normal 25px arial ", "middle", "center", "#ffffff", books[selPos]["Title"], areaW / 2, areaH - 50);


}
function startBook() {
    drawRect(0, 0, areaW, areaH, "#2d2d2d", 1, false);
    drawBGIMG(imgLibrary["BG"]);
    drawText("normal 25px arial ", "middle", "center", "#ffffff", books[selPos]["Title"], areaW / 2, areaH - 50);
    context.drawImage(books[selPos]["img"], Math.floor(areaW / 2 - books[selPos]["img"].naturalWidth / 2), Math.floor(areaH / 2 - books[selPos]["img"].naturalHeight / 2));
    pageFocus = 0;
    root = books[selPos]["associate"] + "/";
    bookSelect = selPos;
    pageFocus = 0;
    pages = new Array;
    Maids = new Array;
    configArray[1] = new Array(pageXML, "book", "pages");
    numPage = 0;
    numPages = 0;
    numBooks = 0;
    posBookX = 0;
    posPageX = 0;
    scrollPageY = 0;
    pageYoffset = 0;
    avY = 0;
    resetParamsPage();
    posBookX = 0;
    posBookXAv = 0;
    bookPreload = true;
    if (local) {
        url = root + "xml/" + "config.xml?" + randomRoot();
    } else {
        url = proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + "config.xml") + '&env=' + env + '&random=' + randomRoot();
    }
    window.setTimeout(getXML, 50);
}
function startFavouriteBook() {
    drawRect(0, 0, areaW, areaH, "#2d2d2d", 1, false);
    drawBGIMG(imgLibrary["BG"]);
    drawText("normal 25px arial ", "middle", "center", "#ffffff", books[selPos]["Title"], areaW / 2, areaH - 50);
    context.drawImage(books[selPos]["img"], Math.floor(areaW / 2 - books[selPos]["img"].naturalWidth / 2), Math.floor(areaH / 2 - books[selPos]["img"].naturalHeight / 2));
    pageFocus = 0;
    root = books[selPos]["associate"] + "/";
    bookSelect = selPos;
    pageFocus = 0;
    pages = new Array;
    Maids = new Array;
    configArray[1] = new Array(pageXML, "book", "pages");
    numPage = 0;
    numPages = 0;
    numBooks = 0;
    posBookX = 0;
    posPageX = 0;
    scrollPageY = 0;
    pageYoffset = 0;
    avY = 0;
    resetParamsPage();
    posBookX = 0;
    posBookXAv = 0;
    bookPreload = true;
    if (local) {
        url = root + "xml/" + "config.xml?" + randomRoot();
    } else {
        url = proxy + '?yws_path=' + encodeURIComponent(root + "xml/" + "config.xml") + '&env=' + env + '&random=' + randomRoot();
    }
    window.setTimeout(getXML, 50);
}
//events for status "EDITOR"
function toEDITOR() {
    if (SUBMODE == "ASSOCIATE") {
        resetParamsPage();
        iniPagesAsoc(pageFocus);
    }
    if (maidSelect) {
        //delForms();
    } else {
        maidSelect = Maids[pageFocus][Maids[pageFocus].length - 1];
    }
    if (maidSelect != null) {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    }
    if (Maids[pageFocus].length == 0) {
        maidSelect = false;//Para permitir añadir maids si no hay ninguno;
    }
    cleanVideos();
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "MAINEDITOR";
    SUBMODE = "MAINEDITOR";
    removeListeners();
    listenersList = new Array(editordown, editorup, editormove);
    assignListeners();

}
var maidSelect;//contain last maid select
var opsMaidSelect = new Array();//contain last maid select
function editordown(e) {
    e.preventDefault();
    client(e);
    if (clickY >= areaH - 80) {
        if (clickX < 80) {
            maxHeight = 0;
            if (permission) {
                recordPage();
            } else {
                alert("No te podemos dejar grabar desde aqu�, esto es una demo!!!!!");
            }
        } else if (areaW - 160 < clickX && clickX < areaW - 80) {
            endMove = true;
            toMAIN();
        } else if (clickX >= areaW - 80) {
            maidSelect = null;
            refreshPage();
        } else if (clickX <= 160 && clickX >= 80) {
            clearInterval(showPagesTween);
            OLDSUBMODE = "EDITMAID";
            SUBMODE = "EDITMAID";
            createMaidIni(pageFocus, 0, 0);
            context.drawImage(common.toolImages.recordPB[1], 0, areaH - 80);
            if (maidSelect) {
                switch (maidSelect["type"]) {
                    case "genericLoaderImg/generic":
                        opsMaidSelect = new Array(["TO AVATAR", toAvatar, true], ["DUPLICATE", duplicateMaid, true], ["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["IMG", imgMaid, true], ["GO", goPage, true], ["ALPHA", alphaMaid, true], ["WIDTH", widthMaid, true], ["HEIGHT", heightMaid, true], ["ORIGINAL", originalMaid, true]);
                        break;
                    case "genericVideo/generic":
                        opsMaidSelect = new Array(["DUPLICATE", duplicateMaid, true], ["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["IMG", imgMaid, true], ["VIDEO", videoMaid, true], ["ALPHA", alphaMaid, true], ["WIDTH", widthMaid, true], ["HEIGHT", heightMaid, true], ["ORIGINAL", originalMaid, true]);
                        break;
                    case "genericYouTube/generic":
                        opsMaidSelect = new Array(["DUPLICATE", duplicateMaid, true], ["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["IMG", imgMaid, true], ["ID", idMaid, true], ["ALPHA", alphaMaid, true], ["WIDTH", widthMaid, true], ["HEIGHT", heightMaid, true], ["ORIGINAL", originalMaid, true]);
                        break;
                    case "genericFont/generic":
                        opsMaidSelect = new Array(["DUPLICATE", duplicateMaid, true], ["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["COLORIZE", colorFontMaid, true], ["ALPHA", alphaMaid, true], ["SIZE", sizeFontMaid, true], ["FONT", fontFaceMaid, true], ["BOLD", boldFontMaid, true], ["TEXTO", textoMaid, true], ["GO", goPage, true], ["WIDTH", widthMaid, true], ["HEIGHT", heightMaid, true]);
                        break;
                    case "generic/generic":
                        opsMaidSelect = new Array(["DUPLICATE", duplicateMaid, true], ["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["COLORIZE", colorFontMaid, true], ["ALPHA", alphaMaid, true], ["WIDTH", widthMaid, true], ["HEIGHT", heightMaid, true]);
                        break;
                    case "genericLoaderImgFull/generic":
                        opsMaidSelect = new Array(["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["IMG", imgMaid, true], ["ALPHA", alphaMaid, true], ["FULL", fullBGImgMaid, true]);
                        break;
                    case "genericBG/generic":
                        opsMaidSelect = new Array(["DELETE", deleteMaid, true], ["COPY", copyMaid, true], ["PASTE", pasteMaid, true], ["IMG", imgMaid, true], ["ALPHA", alphaMaid, true], ["COLORIZE", colorFontMaid, true]);
                        break;
                }
                gotoMenuEditMaid();
            }
            else {
                alert("No maid select");
            }

        } else if (clickX <= 240 && clickX >= 160) {
            if (pages[pageFocus]["associate"] != "") {
                opsMaidSelect = new Array(["DESASOCIAR", desassociatePage, true]);
            } else {
                opsMaidSelect = new Array(["MAIDS", null, false], ["LIST", listMaid, true], ["BLOCS", null, false], ["CARD", card, true], ["NEW BLOC", newBook, true], ["PAGE:" + pageFocus, null, false], ["CHANGE ORDER", changePageOrder, true], ["DELETE PAGE", delPage, true], ["NEW PAGE", newPage, true], ["DUPLICATE PAGE", dupPage, true], ["COPY PAGE", copyPageAsoc, true], ["PASTE PAGE", pastePageAsoc, true], ["ASOCIATE", associatePage, true], ["DEASOCIATE", desassociatePage, true], ["SNAP", null, false], ["Snap to Maid", lineAlign, true], ["Snap to Grid", gridAlign, true], ["NO Snap", noAlign, true], ["Tempo:", null, false], ["ANGELS TEMP", addTemp, true], ["Tools:", null, false], ["CREATE IMG", createImg, true], ["CREATE PDF", createPDF, true], ["FONTS GOOGLE:", null, false], ["ADD FONT GOOGLE", addFontGoogle, true], ["ADD FONT TYPEKIT", addFontTypekit, false], ["ADD FONT ASCENDER", addFontAscender, true], ["ADD FONT MONOTYPE", addFontMonotype, false], ["ADD FONT FONTDECK", addFontFontdeck, false]);
            }
            gotoMenuEditMaid();
        } else if (clickX <= 320 && clickX >= 240) {
            directEditor(duplicateMaid);
        } else if (clickX <= 400 && clickX >= 320) {
            directEditor(copyMaid);
        } else if (clickX <= 480 && clickX >= 400) {
            SUBMODE = "DIRECTEDITOR";
            pasteMaid();
        } else if (clickX <= 560 && clickX >= 480) {
            directEditor(deleteMaid);
        } else if (clickX <= 640 && clickX >= 560) {
            directEditor(scaleMaid);
        } else if (clickX <= 720 && clickX >= 640) {
            directEditor(embedCode);
        } else if (clickX <= 800 && clickX >= 720) {
            directEditor(menuAsoc);
        } else if (clickX <= 880 && clickX >= 800) {
            directEditor(subirFOTO);
        }
    } else if (clickY > areaH - 120 && clickY < areaH - 80) {
        var pos = Math.floor(clickX / 40);
        execMaidMenuOpt(pos);
        createMaidIni(pageFocus, 0, 0);
    } else {
        xRot = clickX;
        yRot = clickY;
        maidSelect = detectCollision(clickX, clickY);
        if (pages[pageFocus]["associate"] != "") {
            alert("You are in an associate content you have no permission to edit it");
        } else if (maidSelect && maidSelect["type"] != "genericLoaderImgFull/generic" && maidSelect["type"] != "genericBG/generic") {
            //save data pos of maidselect for scaling
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            detect = maidSelect;
            var _x = Number(maidSelect.x);
            var _y = Number(maidSelect.y);
            detectMoveOfssetX = clickX - _x;
            detectMoveOfssetY = clickY - _y;
            detectMove = true;
        }
        //if maid is rotated
        if (maidSelect && Number(maidSelect["data"]["relRot"]) != 0) {
            var _X = (clickX - (Number(maidSelect["x"]) + Number(maidSelect["data"]["width"]) / 2)) * Math.cos(-Number(maidSelect["data"]["relRot"]) * Math.PI / 180) - (clickY - (Number(maidSelect["y"]) + Number(maidSelect["data"]["height"]) / 2)) * Math.sin(Number(-Number(maidSelect["data"]["relRot"])) * Math.PI / 180);
            var _Y = (clickX - (Number(maidSelect["x"]) + Number(maidSelect["data"]["width"]) / 2)) * Math.sin(-Number(maidSelect["data"]["relRot"]) * Math.PI / 180) + (clickY - (Number(maidSelect["y"]) + Number(maidSelect["data"]["height"]) / 2)) * Math.cos(-Number(Number(maidSelect["data"]["relRot"])) * Math.PI / 180);
            clickX = _X + (Number(maidSelect["x"]) + Number(maidSelect["data"]["width"]) / 2);
            clickY = _Y + (Number(maidSelect["y"]) + Number(maidSelect["data"]["height"]) / 2);
        }
        if (clickX >= dataMode[0] - 20 && clickX <= dataMode[0] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + 20) {
            if (!rotation) {
                scaleHand = TL;
            } else {
                scaleHand = rotateHand;
            }
        } else if (clickX >= dataMode[0] - 20 && clickX <= dataMode[0] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] + dataMode[3] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + dataMode[3] + 20) {
            if (!rotation) {
                scaleHand = BL;
            } else {
                scaleHand = rotateHand;
            }
        } else if (clickX >= dataMode[0] + dataMode[2] - 20 && clickX <= dataMode[0] + dataMode[2] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + 20) {
            if (!rotation) {
                scaleHand = TR;
            } else {
                scaleHand = rotateHand;
            }
        } else if (clickX >= dataMode[0] + dataMode[2] - 20 && clickX <= dataMode[0] + dataMode[2] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] + dataMode[3] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + dataMode[3] + 20) {
            if (!rotation) {
                scaleHand = BR;
            } else {
                scaleHand = rotateHand;
            }
        }
        createMaidIni(pageFocus, 0, 0);
        if (!maidSelect) {
            drawOptionsAddMaid();
        }

    }
}
function directEditor(func) {
    if (maidSelect) {
        SUBMODE = "DIRECTEDITOR";
        func();
    } else {
        if (func == pasteMaid && maidCopy) {
            SUBMODE = "DIRECTEDITOR";
            func();
        } else if (func == menuAsoc) {
            SUBMODE = "DIRECTEDITOR";
            func();
        } else {
            alert("No maid select!!!!!!");
        }
    }
}
function shapeMaid(maid) {
    context.save();
    context.translate(Number(maid.x) + Number(maid.data.width) / 2 + posBookX, Number(maid.y) + Number(maid.data.height) / 2);
    context.rotate(Number(maid.data.relRot) * Math.PI / 180);
    context.translate(-(Number(maid.x) + Number(maid.data.width) / 2 + posBookX), -(Number(maid.y) + Number(maid.data.height) / 2));
    context.globalAlpha = 1;
    /*context.strokeStyle = "#0099ff";
    context.lineWidth = 1;
    context.strokeRect(Number(maid["x"]) + posBookX, maid["y"] - pageYoffsetGeneral, maid["data"]["width"], maid["data"]["height"]);*/
    context.globalAlpha = 1;
    context.strokeStyle = "#0099ff";
    context.strokeRect(Number(maid["x"]) + posBookX, maid["y"] - pageYoffsetGeneral, maid["data"]["width"], maid["data"]["height"]);
    if (maid == maidSelect) {
        context.drawImage(common.toolImages.TLpb[1], dataMode[0] + posBookX, dataMode[1] - pageYoffsetGeneral);
        context.drawImage(common.toolImages.BLpb[1], dataMode[0] + posBookX, dataMode[1] + dataMode[3] - common.toolImages.BLpb[1].naturalHeight - pageYoffsetGeneral);
        context.drawImage(common.toolImages.TRpb[1], dataMode[0] + dataMode[2] - common.toolImages.TRpb[1].naturalWidth + posBookX, dataMode[1] - pageYoffsetGeneral);
        context.drawImage(common.toolImages.BRpb[1], dataMode[0] + dataMode[2] - common.toolImages.BRpb[1].naturalWidth + posBookX, dataMode[1] + dataMode[3] - common.toolImages.BRpb[1].naturalHeight - pageYoffsetGeneral);
        //----create x,y,w,h,info
        drawRect(theCanvas.width-110,10,100,95,"#000000",1,false);
        drawText("normal 12px verdana ", "middle", "left", "#fff", "x:  "+maid["x"]+"px", theCanvas.width-100, 25);
        drawText("normal 12px verdana ", "middle", "left", "#fff", "y:  "+maid["y"]+"px", theCanvas.width-100, 45);
        drawText("normal 12px verdana ", "middle", "left", "#fff", "w:  "+maid["data"]["width"]+"px", theCanvas.width-100, 65) ;
        drawText("normal 12px verdana ", "middle", "left", "#fff", "h:  "+maid["data"]["height"]+"px", theCanvas.width-100, 85) 
    }
    context.restore();
    drawMenuMaidType();
}
function drawMenuMaidType() {
    switch (maidSelect["type"]) {
        case "genericFont/generic":
            drawOptionsFont();
            break;
        case "genericLoaderImg/generic":
            drawOptionsImg();
            break;
        case "genericLoaderImgFull/generic":
            drawOptionsBGImg();
            break;
        case "generic/generic":
            drawOptionsRect();
            break;
        case "genericYouTube/generic":
            drawOptionsYoutube();
            break;
        default:
            break;
    }
}
function gotoMenuEditMaid() {
    if (opsMaidSelect.length * opsMaidH > areaH) {
        posEditMaidX = -common.toolImages.editMaidBG[1].naturalWidth - 40;
    } else {
        posEditMaidX = -common.toolImages.editMaidBG[1].naturalWidth;
    }
    scrolleableOpsMaid = false;
    offsetYOpsMaid = 0;
    posBookX = posEditMaidX;
    posBookXAv = -posEditMaidX;
    toEDITMAID();
    showEdit();
}
function editormove(e) {
    e.preventDefault();
    client(e);

    if (detectMove && !scaleHand) {
        if (clickX - detectMoveOfssetX + Number(detect["data"]["width"]) >= (areaW - 40)) {
            clickX = (areaW - 40) - Number(detect["data"]["width"]) + detectMoveOfssetX;
        } else if (clickX - detectMoveOfssetX <= 0) {
            //clickX=detectMoveOfssetX;
        }
        if (clickY - detectMoveOfssetY + Number(detect["data"]["height"]) >= areaH - pageYoffsetGeneral && (detect["type"] == "genericYouTube/generic" || detect["type"] == "genericVideo/generic")) {
            clickY = areaH - pageYoffsetGeneral - Number(detect["data"]["height"]) + detectMoveOfssetY;
        } else if (clickY - detectMoveOfssetY <= 0) {
            //clickY=detectMoveOfssetY;
        }
        if (ALIGN == "GRID") {
            detect["x"] = Math.floor((clickX - detectMoveOfssetX) / sizeGrid) * sizeGrid;
            detect["y"] = Math.floor((clickY - detectMoveOfssetY) / sizeGrid) * sizeGrid;
        } else if (ALIGN == "LINE") {
            /*if(maidSelect.data.relRot!=0){
             var _x=(-Number(maidSelect.data.width)/2)*Math.cos(Number(maidSelect.data.relRot) * Math.PI / 180 )-(Number(maidSelect.data.height)/2*Math.sin(Number(maidSelect.data.relRot) * Math.PI / 180 ));
             var _y=(-Number(maidSelect.data.width)/2)*Math.sin(Number(maidSelect.data.relRot) * Math.PI / 180 )+(Number(maidSelect.data.height)/2)*Math.sin(Number(maidSelect.data.relRot) * Math.PI / 180 );
             _x=_x+Number(maidSelect.x)+Number(maidSelect.data.width)/2;
             _y=_y+Number(maidSelect.y)+Number(maidSelect.data.height)/2;
             detectMoveOfssetX=clickX-_x;
             detectMoveOfssetY=clickY-_y;
             }*/
            var detectXY = detectAlign(clickX - detectMoveOfssetX, clickY - detectMoveOfssetY);
            detect["x"] = detectXY[0][4];
            detect["y"] = detectXY[0][5];
        } else {
            detect["x"] = clickX - detectMoveOfssetX;
            detect["y"] = clickY - detectMoveOfssetY;
        }
    } else {
        detect = detectCollision(clickX, clickY);
        if (scaleHand) {
            scaleHand(clickX, clickY);
        }
    }
    if (detect || maidSelect) {
        if (maidSelect) {
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        }
        createMaidIni(pageFocus, 0, 0);
        if (detect) {
            shapeMaid(detect);
        }
        if (ALIGN == "LINE" && detectMove) {
            //if(maidSelect.data.relRot==0){
            var detectXY = detectAlign(detect["x"], detect["y"]);
            /*}else{
             var detectXY=detectAlignRot(detect["x"],detect["y"]);
             }*/

            if (detectXY[1].length > 0) {
                for (var j in detectXY[1]) {
                    context.strokeStyle = "#07aaff";
                    context.save();
                    if (detectXY[1][j].data.relRot != 0) {
                        context.translate(Number(detectXY[1][j].x) + Number(detectXY[1][j].data.width) / 2, Number(detectXY[1][j].y) + Number(detectXY[1][j].data.height) / 2);
                        context.rotate(Number(detectXY[1][j].data.relRot) * Math.PI / 180);
                        context.translate(-(Number(detectXY[1][j].x) + Number(detectXY[1][j].data.width) / 2), -(Number(detectXY[1][j].y) + Number(detectXY[1][j].data.height) / 2));
                    }
                    context.strokeRect(detectXY[1][j]["x"], detectXY[1][j]["y"] - pageYoffsetGeneral, detectXY[1][j]["data"]["width"], detectXY[1][j]["data"]["height"]);
                    context.restore();
                    if (detectXY[0][0] || detectXY[0][1]) {
                        context.lineWidth = 1;
                        context.strokeStyle = "#07aaff";
                        context.beginPath();
                        if (maidSelect.data.relRot != 0) {
                            if (detectXY[0][1]) {
                                context.moveTo(Number(detectXY[1][j].x) + Number(detectXY[1][j].data.width), 0);
                                context.lineTo(Number(detectXY[1][j].x) + Number(detectXY[1][j].data.width), areaH);
                            } else {
                                context.moveTo(detectXY[1][j].x, 0);
                                context.lineTo(detectXY[1][j].x, areaH);
                            }

                        } else {
                            context.moveTo(detectXY[0][4], 0);
                            context.lineTo(detectXY[0][4], areaH);
                        }
                        context.stroke();
                        context.closePath();
                    }
                    if (detectXY[0][2] || detectXY[0][3]) {
                        context.lineWidth = 1;
                        context.strokeStyle = "#07aaff";
                        context.beginPath();
                        if (maidSelect.data.relRot != 0) {
                            context.moveTo(detectXY[1][j].y, 0);
                            context.lineTo(detectXY[1][j].y, areaH);
                        } else {
                            context.moveTo(0, detectXY[0][5]);
                            context.lineTo(areaW, detectXY[0][5]);
                        }

                        context.stroke();
                        context.closePath();
                    }

                }

            }
        }
    } else {
        createMaidIni(pageFocus, 0, 0);
        drawOptionsAddMaid();
    }



}
theCanvas.addEventListener('dragover', dragOver, false);
theCanvas.addEventListener('dragenter', dragEnter, false);
theCanvas.addEventListener('drop', drop, false);
function dropEnter(e) {

}

var dropURL;
var ext;
var oriName;
function dragOver(e) {
    e.preventDefault();
}
function dragEnter(e) {
    e.preventDefault();
}
function drop(e) {
    client(e);
    if (e.preventDefault)
        e.preventDefault(); // stops the browser from redirecting off to the text.
    //alert(e.dataTransfer.getData(type) );
    var files = e.dataTransfer.files;
    var file = files;
    if (files) {
        file = files[0];
        if (file) {
            dropURL = file.name;
            oriName = file.name;
            /*if (file.size > 800000) {
                alert("El tamaño de la imagen es demasiado alto, más de 800k. Reduce su tamaño y vuelve a intentarlo");
            } else if (file.size <= 400000 || file.size > 200000) {
                alert("El tamaño de la imagen es alto, más de 200k. Puede tardar un poco en ser subida");
                ext = dropURL.split(".");
                processImage(file);
            } else {
                ext = dropURL.split(".");
                processImage(file);
            }*/
            alert("La subida de imágenes puede tardar, se paciente");
                ext = dropURL.split(".");
                processImage(file);

        } else {
            alert(e.dataTransfer.getData("name"));
            dropFromBrowser(e.dataTransfer.getData("URL"));
        }
    }
    return false;
}
function  processImage(file) {
    if (!file.type.match('image.*')) {
        return;
    }
    alert("processing");
    var reader = new FileReader();
    reader.onloadend = this.onReaderLoadEnd;
    reader.readAsDataURL(file);
}
function onReaderLoadEnd(event) {
    sendDrop(event.target.result);
    alert("processing2");
    //returnToEditor();

}
function sendDrop(variable1) { // funcion encargada de inviar la variable al archivo php llamado index.php.
    var httpTemp = getXMLHTTPRequestPage();
    http = httpTemp;
    if (bookSelect) {
        alert(bookSelect);
        urlRecordPage = "ed/saveImg.php?name=" + oriName + "&ext=" + ext[1] + "&URL=" + homeRoot + books[bookSelect]["id"] + "/img/&endName=" + dropURL;
    } else {
        urlRecordPage = "ed/saveImg.php?name=" + oriName + "&ext=" + ext[1] + "&URL=" + homeRoot + "img/&endName=" + dropURL;
    }
    var CUERPO = variable1;
    http.open("POST", urlRecordPage, true); // fijando los parametros para el env�o de datos.
    http.onreadystatechange = handlerDrop; // Qu� funci�n utilizar en caso de que el estado de la petici�n cambie.
    http.setRequestHeader('Content-Type', 'application/upload');
    http.send(CUERPO); // enviar petici�n.
}
function dropFromBrowser(url) {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "ImgLoader";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["type"] = "genericLoaderImg/generic";
    newItem["data"]["img"] = url;
    var rt = new Image();
    rt.crossOrigin = 'crossdomain.xml';
    rt.src = proxy + newItem["data"]["img"];
    rt.onload = function() {
        imgLibrary[newItem["data"]["img"]] = rt;
        newItem["x"] = 10;
        newItem["y"] = 10;
        newItem["w"] = rt.naturalWidth;
        newItem["h"] = rt.naturalHeight;
        newItem["data"]["width"] = rt.naturalWidth;
        newItem["data"]["height"] = rt.naturalHeight;
        maidSelect = newItem;
        Maids[pageFocus].push(newItem);
        createMaidIni(pageFocus, 0, 0);
    }
    rt.onerror = function() {
        imgLibrary[newItem["data"]["img"]] = common.toolImages.errorImg[1];
        newItem["x"] = 10;
        newItem["y"] = 10;
        newItem["w"] = rt.naturalWidth;
        newItem["h"] = rt.naturalHeight;
        newItem["data"]["width"] = rt.naturalWidth;
        newItem["data"]["height"] = rt.naturalHeight;
        maidSelect = newItem;
        Maids[pageFocus].push(newItem);
        createMaidIni(pageFocus, 0, 0);
    }
}
function handlerDrop() {
    alert("Se ha guardado");
    delForms();
    delPageForms();
    if (http.readyState == 4) {
        if (http.status == 200) {
            var newItem = new cloneObject(modelMaid);
            newItem["function"] = "ImgLoader";
            newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
            newItem["type"] = "genericLoaderImg/generic";
            if (bookSelect) {
                newItem["data"]["img"] = env + homeRoot + books[bookSelect]["id"] + "/" + "img/" + dropURL;
            } else {
                newItem["data"]["img"] = env + homeRoot + "img/" + dropURL;
            }
            var rt = new Image();
            rt.crossOrigin = 'crossdomain.xml';
            rt.src = proxy + newItem["data"]["img"];
            rt.onload = function() {
                imgLibrary[newItem["data"]["img"]] = rt;
                newItem["x"] = 100;
                newItem["y"] = 100;
                newItem["w"] = rt.naturalWidth;
                newItem["h"] = rt.naturalHeight;
                newItem["data"]["width"] = rt.naturalWidth;
                newItem["data"]["height"] = rt.naturalHeight;
                maidSelect = newItem;
                Maids[pageFocus].push(newItem);
                createMaidIni(pageFocus, 0, 0);
            }
            rt.onerror = function() {
                imgLibrary[newItem["data"]["img"]] = common.toolImages.errorImg[1];
                newItem["x"] = 100;
                newItem["y"] = 100;
                newItem["w"] = rt.naturalWidth;
                newItem["h"] = rt.naturalHeight;
                newItem["data"]["width"] = rt.naturalWidth;
                newItem["data"]["height"] = rt.naturalHeight;
                maidSelect = newItem;
                Maids[pageFocus].push(newItem);
                createMaidIni(pageFocus, 0, 0);
            }


        }

    }
}
function editorup(e) {
    e.preventDefault();
    detect = null;
    detectMove = false;
    scaleHand = null;
    if (maidSelect != null && detect) {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    }
    createMaidIni(pageFocus, 0, 0);

}
//to edit main
function toEDITMAID() {
    MODE = "EDITOR";
    OLDSUBMODE = "EDITMAID";
    SUBMODE = "EDITMAIDLATERAL";
    removeListeners();
    listenersList = new Array(editMaidDown, editMaidUp, editMaidMove);
    assignListeners();
}
function editMaidDown(e) {
    clearInterval(showPagesTween);
    e.preventDefault();
    client(e);
    if (scrolleableOpsMaid && clickX > areaW + posEditMaidX && clickX < areaW + posEditMaidX + hideScrollPosEditMaidX) {
        startScrollOpsMaid = true;
        if (clickY < widthScrollOpsMaid / 2) {
            clickY = widthScrollOpsMaid / 2;
        } else if (clickY > areaH - widthScrollOpsMaid / 2) {
            clickY = areaH - widthScrollOpsMaid / 2;
        }
        if (startScrollOpsMaid && clickX > areaW + posEditMaidX && clickX < areaW + posEditMaidX + hideScrollPosEditMaidX) {
            offsetYOpsMaid = -(opsMaidSelect.length * opsMaidH - areaH) * (clickY - widthScrollOpsMaid / 2) / (areaH - widthScrollOpsMaid);
            commonDrawEditMaid();
        }
    } else if (clickX > areaW + posEditMaidX && opsMaidSelect.length - 1 >= Math.floor(clickY / opsMaidH)) {
        var pos = Math.floor((clickY - offsetYOpsMaid) / opsMaidH);
        if (opsMaidSelect[pos][2]) {
            formPosY = pos * opsMaidH;
            formOffsetY = offsetYOpsMaid;
            opsMaidSelect[pos][1]();
        } else {
            alert("Unauthorized!!!!!");
        }
    } else {
        delPageForms();
        delForms();
        toEDITOR();
        posBookX = -200;
        posBookXAv = 200;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
        showPagesTween = setInterval(hideEditMaid, 33);
    }
}
function editMaidMove(e) {
    e.preventDefault();
    client(e);
    if (startScrollOpsMaid && clickX > areaW + posEditMaidX && clickX < areaW + posEditMaidX + widthScrollOpsMaid) {
        if (clickY < widthScrollOpsMaid / 2) {
            clickY = widthScrollOpsMaid / 2;
        } else if (clickY > areaH - widthScrollOpsMaid / 2) {
            clickY = areaH - widthScrollOpsMaid / 2;
        }
        offsetYOpsMaid = -(opsMaidSelect.length * opsMaidH - areaH) * (clickY - widthScrollOpsMaid / 2) / (areaH - widthScrollOpsMaid);
        if (formActiv) {
            formOffsetY = offsetYOpsMaid;
            imgMaid();
        }
        commonDrawEditMaid();

    }
}

function editMaidUp(e) {
    e.preventDefault();
    startScrollOpsMaid = false;
}
var widthScrollOpsMaid = 200;
var offsetYOpsMaid = 0;
var startScrollOpsMaid = false;
var posEditMaidX = -200;
var hideScrollPosEditMaidX = 40;
var posPageX = 0;
var posPageY = 0;
var dirEditMain = 1;
var showEditorTween;
var posBookXAv = 0;
function showEdit() {
    dirEditMain = -1;
    offsetYOpsMaid = 0;
    clickY = widthScrollOpsMaid / 2;
    showPagesTween = setInterval(drawEditMaid, 33);
}
function drawEditMaid() {
    posBookXAv = Math.floor(posBookXAv / 4);
    //posBookX=posEditMaidX+centerX+posBookXAv;
    posBookX = posEditMaidX + posBookXAv;
    if (posBookXAv <= 0) {
        clearInterval(showPagesTween);
        //posBookX=posEditMaidX+centerX;
        posBookX = posEditMaidX;
        if (opsMaidSelect.length * opsMaidH > areaH) {
            scrolleableOpsMaid = true;
        }
        commonDrawEditMaid();


    } else {
        commonDrawEditMaid();
    }

}
var opsMaidH = 40;
var scrolleableOpsMaid = false;
function commonDrawEditMaid() {
    context.save();
    context.fillStyle = "666666";
    context.globalAlpha = 1;
    context.fillRect(areaW + posEditMaidX, 0, -posEditMaidX, areaH);
    context.restore();
    for (var j in opsMaidSelect) {
        context.save();
        context.font = "normal 15px Arial ";
        context.textBaseline = "top";
        if (opsMaidSelect[j][2]) {
            context.fillStyle = "#666666";
            context.drawImage(common.toolImages.editMaidBG[1], areaW - 200, opsMaidH * j + offsetYOpsMaid);
        } else {
            context.fillStyle = "#ffffff";
        }
        context.fillText(opsMaidSelect[j][0], areaW - 180, opsMaidH * j + 12 + offsetYOpsMaid);
        context.restore();
    }
    if (scrolleableOpsMaid) {
        context.save();
        context.fillStyle = "ffffff";
        context.fillRect(areaW + posEditMaidX + 2, clickY - widthScrollOpsMaid / 2 + 2, hideScrollPosEditMaidX - 4, widthScrollOpsMaid - 4);
        context.restore();
        scrolleableOpsMaid = true;
    }
    createMaidIni(pageFocus, posBookX, 0);

}

function hideEditMaid() {
    posBookXAv = Math.floor(posBookXAv / 4);
    posBookX = dirEditMain * posBookXAv;
    if (posBookXAv <= 1) {
        posBookX = 0;
        posBookXAv = 0;
        clearInterval(showPagesTween);
        commonDrawEditMaid();
        if (createMode) {
            createMode();
        }
    } else {
        commonDrawEditMaid();
    }
}
//maid ops methods 
function returnToEditor() {
    cleanVideos();
    delForms();
    delPageForms();
    if (SUBMODE == "MAINEDITOR") {
        posBookX = -widthScrollOpsMaid;
        posBookXAv = widthScrollOpsMaid;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
        showPagesTween = setInterval(hideEditMaid, 33);
    } else {
        posBookX = 0;
        posBookXAv = 0;
        createMode = null;
        toEDITOR();
    }
    createMaidIni(pageFocus, 0, 0);
}
function rotateMaid() {

}
var rootPage = "";
function copyPageAsoc() {
    if (root.indexOf("http://") == -1) {
        rootPage = env + root + "xml/" + pages[pageFocus]["id"];
    } else {
        rootPage = root + "xml/" + pages[pageFocus]["id"];
    }
    alert(rootPage);
    returnToEditor();
}



function pastePageAsoc() {
    var originPage;
    if (root.indexOf("http://") == -1) {
        originPage = env + root + "xml/" + pages[pageFocus]["id"];
    } else {
        originPage = root + "xml/" + pages[pageFocus]["id"];
    }
    if (textArea.value == "") {
        alert("Todavía no has seleccionado la página que quieres asociar");
    } else if (originPage == textArea.value) {
        alert("No puedes asociar la página consigo misma");
    } else {
        SUBMODE = "ASSOCIATE";
        pages[pageFocus]["associate"] = textArea.value;
    }
    returnToEditor();
}
function desassociatePage() {
    pages[pageFocus]["associate"] = "";
    SUBMODE = "ASSOCIATE";
    returnToEditor();
}
var toMainConfig = false;
var recordAvatar = false;
function toAvatar() {
    if (bookSelect != null) {
        toMainConfig = true;
        recordAvatar = true;
        books[bookSelect].image = maidSelect["data"]["img"];
        books[bookSelect].img = imgLibrary[maidSelect["data"]["img"]];
        returnToEditor();
        associateRecord();
    } else {
        alert("You are not in a bloc, you are in the environment");
    }
}
function duplicateMaid() {
    var newItem = new cloneObject(maidSelect);
    maidSelect = newItem;
    dataMode = new Array(Number(maidSelect["x"]) + 10, Number(maidSelect["y"]) + 10, Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    detect = newItem;
    Maids[pageFocus].push(newItem);
    maidSelect["x"] = Number(maidSelect["x"]) + 10;
    maidSelect["y"] = Number(maidSelect["y"]) + 10;
    maidSelect["id"] = "clip" + Maids[pageFocus].length;
    if (maidSelect["type"] == "genericYouTube/generic" && arrayVideoYouTube[maidSelect["data"]["youtube"]]) {
        maidSelect["data"]["youtube"] = String(Maids[pageFocus].length);
    }
    returnToEditor();
}
function cloneObject(source_) {
    for (var item in source_) {
        if (typeof source_[item] == 'object') {
            this[item] = new cloneObject(source_[item]);
        } else {
            this[item] = source_[item];
        }
    }
}
function deleteMaid() {
    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j] == maidSelect) {
            Maids[pageFocus].splice(j, 1);
            maidSelect = Maids[pageFocus][Maids[pageFocus].length - 1];
            if (maidSelect) {
                detect = maidSelect;
                dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
                shapeMaid(maidSelect);
            } else {
                detect = null;
            }

            break;
        }
    }
    returnToEditor();
}
function cutMaid() {
    var newItem = new cloneObject(maidSelect);
    maidCopy = newItem;
    directEditor(deleteMaid);
}
var maidCopy = null;
function copyMaid() {
    var newItem = new cloneObject(maidSelect);
    maidCopy = newItem;
    returnToEditor();
}
function pasteMaid() {
    if (maidCopy != null) {
        var newItem = new cloneObject(maidCopy);
        maidSelect = newItem;
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        var bgColorExist = false;
        var bgImgExist = false;
        switch (maidCopy["type"]) {
            case "genericLoaderImgFull/generic":
                if (Maids[pageFocus].length > 0 && Maids[pageFocus][0]["type"] == "genericLoaderImgFull/generic") {
                    bgImgExist = true;
                }
                if (!bgImgExist) {
                    Maids[pageFocus].splice(0, 0, newItem);
                    Maids[pageFocus][0]["id"] = "BGIMG";
                } else {
                    alert("Ya existe un fondo de imagen, elimine primero el que existe si quiere pegar el nuevo");
                }
                break;
            case "genericBG/generic":
                if (Maids[pageFocus].length > 0 && Maids[pageFocus][0]["type"] == "genericLoaderImgFull/generic") {
                    bgImgExist = true;
                    alert("Recuerda que pusiste una imagen de fondo");
                }
                for (var j in Maids[pageFocus]) {
                    if (Maids[pageFocus][j]["type"] == "genericBG/generic") {
                        bgColorExist = j;
                        alert("solo puedes poner un fondo de color, eliminalo o cambia el color desde el panel del maid");
                        break;
                    }
                }
                if (bgImgExist && !bgColorExist) {
                    Maids[pageFocus].splice(1, 0, newItem);
                    Maids[pageFocus][0]["id"] = "BGCOLOR";
                } else if (!bgImgExist && !bgColorExist) {
                    Maids[pageFocus].splice(0, 0, newItem);
                    Maids[pageFocus][0]["id"] = "BGCOLOR";
                }
                break;
            default:
                var newItem = new cloneObject(maidCopy);
                maidSelect = newItem;
                Maids[pageFocus].push(newItem);
                Maids[pageFocus][Maids[pageFocus].length - 1]["id"] = "clip" + Maids[pageFocus].length;
                break;
        }
    } else {
        alert("Todav�a no ha copiado un item");
    }
    returnToEditor();
}
function colorFontMaid() {
    createForm("color");
}
function imgMaid() {
    createForm("img");
}
function videoMaid() {
    createForm("video");
}
function idMaid() {
    createForm("youtube");
}
function alphaMaid() {
    createForm("alpha");
}
function goPage() {
    createForm("fullPage");
}
function sizeFontMaid() {
    createForm("size");
}
function fontFaceMaid() {
    createForm("face");
}
function formatText() {
    toFormatText(true);
}
function boldFontMaid() {
    createForm("bold");
}

function fullBGImgMaid() {
    createForm("full");
}
function textoMaid() {
    createForm("text");
}

function widthMaid() {
    createForm("width");
}
function heightMaid() {
    createForm("height");
}
function originalMaid() {
    maidSelect["data"]["width"] = imgLibrary[maidSelect["data"]["img"]].naturalWidth;
    maidSelect["data"]["height"] = imgLibrary[maidSelect["data"]["img"]].naturalHeight;
    maidSelect["data"]["relRot"] = 0;
    if (SUBMODE == "SCALEMODE") {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        createMaidIni(pageFocus, posBookX, 0);
        createMode();
    } else {
        returnToEditor();
    }
}
function scaleMaid() {
    toSCALEMODE();
}
function embedCode() {
    toEMBEDCODE();
    createMode = drawEmbed;
    SUBMODE = "EMBEDCODE";
    createMaidIni(pageFocus, posBookX, 0);
    createMode();
}
//input form
var formInputCont = new Array();
var paramOld;
var textArea;
var textAreaType;
var formActiv;
var formOffsetY = 0;
var formPosY;
var posInputX;
function createForm(param) {

    delForms();
    posInputX = areaW - widthScrollOpsMaid;
    formActiv = true;
    valueForm = maidSelect["data"][param];
    paramOld = param;
    var formInput = document.createElement("div");
    formInput.style.overflow = "visible";
    formInput.style.position = 'absolute';
    formInput.style.left = posInputX;
    formInput.style.top = formPosY + formOffsetY;
    //formInput.style.background="green";
    document.body.appendChild(formInput);
    formInputCont.push(formInput);
    var form = document.createElement("form");
    textArea = document.createElement("textarea");
    textAreaType = 3;
    textArea.style.size = areaW;
    textArea.style.type = "text";
    textArea.style.id = "text";
    textArea.style.width = widthScrollOpsMaid;
    textArea.style.height = opsMaidH;
    textArea.value = maidSelect["data"][param];
    formInput.appendChild(form);
    form.appendChild(textArea);
}
var formPageInputCont = new Array();
var paramOldPage;
var textAreaPage;
var formActivPage;
var formOffsetYPage = 0;
var formPosYPage;
var valuePageForm;
function createPageForm(param) {

    var posInputX = areaW - widthScrollOpsMaid;
    delPageForms();
    formActivPage = true;
    valuePageForm = pages[pageFocus]["associate"];
    paramOldPage = param;
    var formInput = document.createElement("div");
    formInput.style.overflow = "visible";
    formInput.style.position = 'absolute';
    formInput.style.left = posInputX;
    formInput.style.top = formPosY + formOffsetYPage;
    //formInput.style.background="green";
    document.body.appendChild(formInput);
    formPageInputCont.push(formInput);
    var form = document.createElement("form");
    textArea = document.createElement("textarea");
    textArea.style.size = areaW;
    textArea.style.type = "text";
    textArea.style.id = "text";
    textArea.style.width = widthScrollOpsMaid;
    textArea.style.height = opsMaidH;
    textArea.value = pages[pageFocus]["associate"];
    formInput.appendChild(form);
    form.appendChild(textArea);
}
function delPageForms() {
    if (formActivPage) {
        for (var j in formPageInputCont) {
            pages[pageFocus][paramOldPage] = textArea.value;
            document.body.removeChild(formPageInputCont[j]);
            formPageInputCont.splice(j, 1);
            createMaidIni(pageFocus, posBookX, 0);
        }
    }
    if (paramOldPage == "associate") {
        resetParamsPage();
        refreshPage();
    }
    formActiv = false;
    formActivPage = false;
}
function delForms() {
    for (var j in formInputCont) {
        document.body.removeChild(formInputCont[j]);
        formInputCont.splice(j, 1);
        createMaidIni(pageFocus, posBookX, 0);
    }
    formActiv = false;
    formActivPage = false;
}
function keepStage() {
    areaW = window.innerWidth;
    areaH = window.innerHeight;
    numcol = Math.floor(areaW / thumbW);
    numfil = Math.floor((areaH - pageH) / thumbH) - 1;
    /*sepX=thumbW+(areaW-(numcol*thumbW))/numcol;
     sepY=thumbH+((areaH-80-4)-(numfil*thumbH))/numfil;*/
    sepX = thumbW;
    sepY = thumbH;
    numPagesBook = Math.ceil(numBooks / (numcol * numfil));
    theCanvas.width = areaW;
    theCanvas.height = areaH;
    canvasCont.style.width = areaW;
    canvasCont.style.height = areaH;
}
var ALIGN = null;
function lineAlign() {
    ALIGN = "LINE";
    returnToEditor();
}
function gridAlign() {
    toGRIDSNAP();
}
function clipAlign() {
    ALIGN = "CLIP";
    returnToEditor();
}
function noAlign() {
    ALIGN = null;
    returnToEditor();
}
function associatePage() {
    createPageForm("associate");
}
//events for status "SCALEMODE"
function toSCALEMODE() {
    if (maidSelect) {
        //delForms();
    }
    delPageForms();
    formActiv = false;

    removeListeners();
    listenersList = new Array(scaleModeDown, scaleModeUp, scaleModeMove);
    assignListeners();
    if (SUBMODE != "DIRECTEDITOR") {
        posBookX = -200;
        posBookXAv = 200;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
    }
    MODE = "EDITOR";
    OLDSUBMODE = "SCALEMODE";
    SUBMODE = "SCALEMODE";
    dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    createMode = drawMenuScale;
    showPagesTween = setInterval(hideEditMaid, 33);


}
drawMenuScale = function() {
    var x = dataMode[0];
    var y = dataMode[1];
    var w = dataMode[2];
    var h = dataMode[3];
    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 80, areaW, 80);
    context.globalAlpha = 1;

    context.save();
    context.translate(Number(maidSelect.x) + Number(maidSelect.data.width) / 2, Number(maidSelect.y) + Number(maidSelect.data.height) / 2);
    context.rotate(Number(maidSelect.data.relRot) * Math.PI / 180);
    context.translate(-(Number(maidSelect.x) + Number(maidSelect.data.width) / 2), -(Number(maidSelect.y) + Number(maidSelect.data.height) / 2));
    context.strokeStyle = "ffffff";
    context.lineWidth = 1;
    context.strokeRect(x, y - pageYoffsetGeneral, w, h);
    context.globalAlpha = .5;
    context.strokeStyle = "07aaff";
    context.strokeRect(x, y - pageYoffsetGeneral, w, h);
    //drawRect(x-20,y-20-pageYoffsetGeneral,40,40,"#ffffff",.5,true);
    //drawRect(x+w-20,y-20-pageYoffsetGeneral,40,40,"#ffffff",.5,true);
    //drawRect(x-20,y+h-20-pageYoffsetGeneral,40,40,"#ffffff",.5,true);
    //drawRect(x+w-20,y+h-20-pageYoffsetGeneral,40,40,"#ffffff",.5,true);
    context.restore();

    context.drawImage(common.toolImages.TLpb[1], x, y);
    context.drawImage(common.toolImages.BLpb[1], x, y + h - common.toolImages.BLpb[1].naturalHeight);
    context.drawImage(common.toolImages.TRpb[1], x + w - common.toolImages.TRpb[1].naturalWidth, y);
    context.drawImage(common.toolImages.BRpb[1], x + w - common.toolImages.BRpb[1].naturalWidth, y + h - common.toolImages.BRpb[1].naturalHeight);




    context.fillStyle = "#ffffff";
    context.fillText("CLOSE", 20, areaH - 40);
    if (ratio) {
        context.fillText("PROP", 100, areaH - 40);
    } else {
        context.fillText("NO PROP", 100, areaH - 40);
    }
    context.fillText("ORIGINAL", 180, areaH - 40);
    if (rotation) {
        context.fillText("ROTATE", 260, areaH - 40);
    } else {
        context.fillText("SCALE", 260, areaH - 40);
    }
    context.fillText("X:" + maidSelect["x"], 340, areaH - 40);
    context.fillText("Y:" + maidSelect["y"], 420, areaH - 40);
    context.fillText("W:" + maidSelect["data"]["width"], 500, areaH - 40);
    context.fillText("H:" + maidSelect["data"]["height"], 580, areaH - 40);
    if (maidSelect["type"] == "genericLoaderImg/generic" || maidSelect["type"] == "genericLoaderImgFull/generic") {
        context.fillText("ratioX:" + Math.floor(100 * maidSelect["data"]["width"] / imgLibrary[maidSelect["data"]["img"]].naturalWidth) + "%", 660, areaH - 40);
        context.fillText("ratioY:" + Math.floor(100 * maidSelect["data"]["height"] / imgLibrary[maidSelect["data"]["img"]].naturalHeight) + "%", 740, areaH - 40);
    }

};
var scaleHand;
var createMode;
var dataMode;
var ratio = false;
var rotation = false;
function scaleModeDown(e) {
    e.preventDefault();
    client(e);
    if (clickX <= 80 && clickY >= areaH - 80) {
        createMode = null;
        returnToEditor();
    } else if (clickX >= 80 && clickX <= 160 && clickY >= areaH - 80) {
        ratio = !ratio;
        createMaidIni(pageFocus, 0, 0);
        createMode();
    } else if (clickX >= 160 && clickX <= 240 && clickY >= areaH - 80) {
        originalMaid();
    } else if (clickX >= 240 && clickX <= 320 && clickY >= areaH - 80) {
        rotation = !rotation;
    } else if (clickX >= dataMode[0] - 20 && clickX <= dataMode[0] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + 20) {
        scaleHand = TL;
    } else if (clickX >= dataMode[0] - 20 && clickX <= dataMode[0] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] + dataMode[3] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + dataMode[3] + 20) {
        scaleHand = BL;
    } else if (clickX >= dataMode[0] + dataMode[2] - 20 && clickX <= dataMode[0] + dataMode[2] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + 20) {
        scaleHand = TR;
    } else if (clickX >= dataMode[0] + dataMode[2] - 20 && clickX <= dataMode[0] + dataMode[2] + 20 && clickY + pageYoffsetGeneral >= dataMode[1] + dataMode[3] - 20 && clickY + pageYoffsetGeneral <= dataMode[1] + dataMode[3] + 20) {
        scaleHand = BR;
    } else {
        createMaidIni(pageFocus, 0, 0);
        if (detectCollision(clickX, clickY)) {
            maidSelect = detectCollision(clickX, clickY);
        }
        if (maidSelect["type"] != "genericLoaderImgFull/generic" && maidSelect["type"] != "genericBG/generic") {
            detect = maidSelect;
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            createMode();
            detectMoveOfssetX = clickX - detect["x"];
            detectMoveOfssetY = clickY - detect["y"];
            detectMove = true;
        } else {
            createMode();
        }
    }

}
function scaleModeMove(e) {
    e.preventDefault();
    client(e);
    if (detectMove) {
        detect["x"] = clickX - detectMoveOfssetX;
        detect["y"] = clickY - detectMoveOfssetY;
    } else {
        detect = detectCollision(clickX, clickY);
        if (!detect) {
            detect = new Object();
        }
        if (scaleHand) {
            scaleHand(clickX, clickY);
        }
    }
    if (detect) {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        createMaidIni(pageFocus, 0, 0);
        createMode();
        context.save();
        context.globalAlpha = 1;
        context.strokeStyle = "ffffff";
        context.lineWidth = 1;
        //context.strokeRect(detect["x"],detect["y"]-pageYoffsetGeneral,detect["data"]["width"],detect["data"]["height"]);
        context.restore();
    }
    if (maidSelect != null) {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        createMaidIni(pageFocus, 0, 0);
        createMode();
    }

}

function scaleModeUp(e) {
    e.preventDefault();
    detect = null;
    detectMove = false;
    scaleHand = null;
    if (maidSelect != null) {
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        createMaidIni(pageFocus, 0, 0);
        createMode();
    }
}

function testRot(x, y) {
    var _X = (x - (Number(maidSelect.x) + Number(maidSelect.data.width) / 2)) * Math.cos(-Number(maidSelect.data.relRot) * Math.PI / 180) - (y - (Number(maidSelect.y) + Number(maidSelect.data.height) / 2)) * Math.sin(Number(-Number(maidSelect.data.relRot)) * Math.PI / 180);
    var _Y = (x - (Number(maidSelect.x) + Number(maidSelect.data.width) / 2)) * Math.sin(-Number(maidSelect.data.relRot) * Math.PI / 180) + (y - (Number(maidSelect.y) + Number(maidSelect.data.height) / 2)) * Math.cos(-Number(Number(maidSelect.data.relRot)) * Math.PI / 180);
    x = _X + (Number(maidSelect.x) + Number(maidSelect.data.width) / 2);
    y = _Y + (Number(maidSelect.y) + Number(maidSelect.data.height) / 2);
    return new Array(x, y);
}
var xRot;
var yRot;

function TL(x, y) {
    if (Number(maidSelect.data.relRot) != 0) {
        var newCoord = testRot(x, y);
        x = newCoord[0];
        y = newCoord[1];
    }
    if (Number(maidSelect["data"]["width"]) + (maidSelect["x"] - x) <= 40) {
        x = -(40 - Number(maidSelect["data"]["width"]) - maidSelect["x"]);
    }
    if (Number(maidSelect["data"]["height"]) + (maidSelect["y"] - y) <= 40) {
        y = -(40 - Number(maidSelect["data"]["height"]) - maidSelect["y"]);
    }

    if (!ratio) {
        maidSelect["data"]["width"] = Number(maidSelect["data"]["width"]) + (maidSelect["x"] - x);
        maidSelect["data"]["height"] = Number(maidSelect["data"]["height"]) + (maidSelect["y"] - y);
        maidSelect["x"] = x;
        if (maidSelect["type"] != "genericFont/generic") {
            maidSelect["y"] = y;
        }
    } else {
        var oldW = Number(maidSelect["data"]["width"]);
        var oldH = Number(maidSelect["data"]["height"]);
        maidSelect["data"]["width"] = oldW + Number(maidSelect["x"]) - x;
        maidSelect["data"]["height"] = maidSelect["data"]["height"] * maidSelect["data"]["width"] / oldW;
        maidSelect["x"] = x;
        if (maidSelect["type"] != "genericFont/generic") {
            maidSelect["y"] = maidSelect["y"] + oldH - Number(maidSelect["data"]["height"]);
        }

    }

}
function BL(x, y) {
    if (Number(maidSelect.data.relRot) != 0) {
        var newCoord = testRot(x, y);
        x = newCoord[0];
        y = newCoord[1];
    }
    if (Number(maidSelect["data"]["width"]) + (maidSelect["x"] - x) <= 40) {
        x = -(40 - Number(maidSelect["data"]["width"]) - maidSelect["x"]);
    }
    if (y - maidSelect["y"] <= 40) {
        y = 40 + maidSelect["y"];
    }

    if (!ratio) {
        maidSelect["data"]["width"] = Number(maidSelect["data"]["width"]) + (maidSelect["x"] - x);
        maidSelect["data"]["height"] = y - maidSelect["y"];
        maidSelect["x"] = x;
    } else {
        var oldW = Number(maidSelect["data"]["width"]);
        maidSelect["data"]["width"] = oldW + Number(maidSelect["x"]) - x;
        maidSelect["data"]["height"] = maidSelect["data"]["height"] * maidSelect["data"]["width"] / oldW;
        maidSelect["x"] = x;
    }


}
function TR(x, y) {
    if (Number(maidSelect.data.relRot) != 0) {
        var newCoord = testRot(x, y);
        x = newCoord[0];
        y = newCoord[1];
    }
    if (x - maidSelect["x"] <= 40) {
        x = 40 + maidSelect["x"];
    }
    if (Number(maidSelect["data"]["height"]) + (maidSelect["y"] - y) <= 40) {
        y = -(40 - Number(maidSelect["data"]["height"]) - maidSelect["y"]);
    }
    if (!ratio) {
        maidSelect["data"]["width"] = x - maidSelect["x"];
        maidSelect["data"]["height"] = Number(maidSelect["data"]["height"]) + (maidSelect["y"] - y);
        if (maidSelect["type"] != "genericFont/generic") {
            maidSelect["y"] = y;
        }
    } else {
        var oldW = Number(maidSelect["data"]["width"]);
        var oldH = Number(maidSelect["data"]["height"]);
        maidSelect["data"]["width"] = x - maidSelect["x"];
        if (maidSelect["type"] != "genericFont/generic") {
            maidSelect["data"]["height"] = oldH * maidSelect["data"]["width"] / oldW;
        }
        maidSelect["y"] = maidSelect["y"] + oldH - Number(maidSelect["data"]["height"]);

    }

}
function BR(x, y) {
    if (Number(maidSelect.data.relRot) != 0) {
        var newCoord = testRot(x, y);
        x = newCoord[0];
        y = newCoord[1];
    }
    if (x - maidSelect["x"] <= 40) {
        x = 40 + maidSelect["x"];
    }
    if (y - maidSelect["y"] <= 40) {
        y = 40 + maidSelect["y"];
    }
    if (!ratio) {
        maidSelect["data"]["width"] = x - maidSelect["x"];
        maidSelect["data"]["height"] = y - maidSelect["y"];
    } else {
        var oldW = maidSelect["data"]["width"];
        maidSelect["data"]["width"] = x - maidSelect["x"];
        maidSelect["data"]["height"] = maidSelect["data"]["height"] * maidSelect["data"]["width"] / oldW;
    }
}
function rotateHand(x, y) {
    var a;
    if (xRot < Number(maidSelect.x) + Number(maidSelect.data.width) / 2) {
        if (yRot < Number(maidSelect.y) + Number(maidSelect.data.height) / 2) {
            a = Number(maidSelect["data"]["relRot"]) - (xRot - x);
        } else {
            a = Number(maidSelect["data"]["relRot"]) + (yRot - y);
        }
    } else {
        if (yRot < Number(maidSelect.y) + Number(maidSelect.data.height) / 2) {
            a = Number(maidSelect["data"]["relRot"]) + (y - yRot);

        } else {
            a = Number(maidSelect["data"]["relRot"]) - (x - xRot);
        }
    }
    if (a >= 360) {
        a = Number(maidSelect["data"]["relRot"] - 360);
    } else if (a < 0) {
        a = 360 + Number(maidSelect["data"]["relRot"]);
    }
    maidSelect["data"]["relRot"] = a;
    xRot = x;
    yRot = y;
}
//add maids
var modelMaid = new Object();
modelMaid["id"] = "";
modelMaid["type"] = "";
modelMaid["x"] = 100;
modelMaid["y"] = 100;
modelMaid["w"] = 100;
modelMaid["h"] = 100;
modelMaid["vis"] = "true";
modelMaid["asoc"] = "false";
modelMaid["lock"] = "false";
modelMaid["data"] = new Object();
modelMaid["data"]["adH"] = false;
modelMaid["data"]["full"] = true;
modelMaid["data"]["adRight"] = false;
modelMaid["data"]["face"] = "Verdana";
modelMaid["data"]["link"] = "";
modelMaid["data"]["relTx"] = 0;
modelMaid["data"]["relRot"] = 0;
modelMaid["data"]["relScaleX"] = 1;
modelMaid["data"]["relScaleY"] = 1;
modelMaid["data"]["contShow"] = 0;
modelMaid["data"]["relTy"] = 0;
modelMaid["data"]["ySkew"] = 0;
modelMaid["data"]["adLeft"] = false;
modelMaid["data"]["alpha"] = 1;
modelMaid["data"]["size"] = 40;
modelMaid["data"]["text"] = new Object();
modelMaid["data"]["text"]["es"] = "Texto";
modelMaid["data"]["text"]["en"] = "Text";
modelMaid["data"]["align"] = "left";
modelMaid["data"]["xSkew"] = 0;
modelMaid["data"]["width"] = 100;
modelMaid["data"]["img"] = "";
modelMaid["data"]["video"] = "";
modelMaid["data"]["adW"] = false;
modelMaid["data"]["relX"] = 0;
modelMaid["data"]["adBottom"] = false;
modelMaid["data"]["height"] = 100;
modelMaid["data"]["relY"] = 0;
modelMaid["data"]["bold"] = 0;
modelMaid["data"]["color"] = "#000000";
modelMaid["data"]["adTop"] = false;
modelMaid["data"]["contClick"] = 0;
modelMaid["data"]["lineHeight"] = 0;
/*case ("genericLoaderImgFull/generic"):
 Maids[page][j]["function"]="ImgLoaderFull";
 case ("genericLoaderImg/generic"):
 Maids[page][j]["function"]="ImgLoader";
 case ("generic/generic"):
 Maids[page][j]["function"]="Rectangulo";
 case ("genericBG/generic"):
 Maids[page][j]["function"]="BGColor";
 case ("genericFont/generic"):
 Maids[page][j]["function"]="Text";
 */
function addBgImg() {
    var bgImgExist = false;
    if (Maids[pageFocus].length > 0 && Maids[pageFocus][0]["type"] == "genericLoaderImgFull/generic") {
        bgImgExist = true;
    }
    if (!bgImgExist) {
        var newItem = new cloneObject(modelMaid);
        newItem["function"] = "ImgLoaderFull";
        newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
        newItem["type"] = "genericLoaderImgFull/generic";
        newItem["data"]["img"] = env + "img/BG.jpg";
        if (!imgLibrary[newItem["data"]["img"]]) {
            var rt = new Image();
            rt.crossOrigin = 'crossdomain.xml';
            rt.src = proxy + newItem["data"]["img"];
            rt.onload = function() {
                imgLibrary[newItem["data"]["img"]] = rt;
                newItem["x"] = 0;
                newItem["y"] = 0;
                newItem["w"] = rt.naturalWidth;
                newItem["h"] = rt.naturalHeight;
                newItem["data"]["width"] = rt.naturalWidth;
                newItem["data"]["height"] = rt.naturalHeight;
                newItem["data"]["relRot"] = 0;
                maidSelect = newItem;
                dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
                Maids[pageFocus].splice(0, 0, newItem);
                returnToEditor();
            }
            rt.onerror = function() {
                imgLibrary[newItem["data"]["img"]] = common.toolImages.errorImg[1];
                newItem["x"] = 0;
                newItem["y"] = 0;
                newItem["w"] = rt.naturalWidth;
                newItem["h"] = rt.naturalHeight;
                newItem["data"]["width"] = rt.naturalWidth;
                newItem["data"]["height"] = rt.naturalHeight;
                newItem["data"]["relRot"] = 0;
                maidSelect = newItem;
                dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
                Maids[pageFocus].splice(0, 0, newItem);
                returnToEditor();
            }
        } else {
            newItem["x"] = 0;
            newItem["y"] = 0;
            newItem["w"] = imgLibrary[newItem["data"]["img"]].naturalWidth;
            newItem["h"] = imgLibrary[newItem["data"]["img"]].naturalHeight;
            newItem["data"]["width"] = imgLibrary[newItem["data"]["img"]].naturalWidth;
            newItem["data"]["height"] = imgLibrary[newItem["data"]["img"]].naturalHeight;
            newItem["data"]["relRot"] = 0;
            maidSelect = newItem;
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            Maids[pageFocus].splice(0, 0, newItem);
            returnToEditor();
        }
    } else {
        alert("Ya existe una imagen de fondo elim�nala primero o cambiala desde el panel del maid");
        returnToEditor();
    }

}
var dropImg = "img/provImg.png";
function addImg() {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "ImgLoader";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["type"] = "genericLoaderImg/generic";
    newItem["data"]["img"] = env + dropImg;
    if (!imgLibrary[newItem["data"]["img"]]) {
        var rt = new Image();
        rt.crossOrigin = 'crossdomain.xml';
        rt.src = proxy + newItem["data"]["img"];
        rt.onload = function() {
            imgLibrary[newItem["data"]["img"]] = rt;
            newItem["x"] = areaW / 2 - rt.naturalWidth / 2;
            newItem["y"] = areaH / 2 - rt.naturalHeight / 2;
            newItem["w"] = rt.naturalWidth;
            newItem["h"] = rt.naturalHeight;
            newItem["data"]["width"] = rt.naturalWidth;
            newItem["data"]["height"] = rt.naturalHeight;
            maidSelect = newItem;
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            Maids[pageFocus].push(newItem);
            returnToEditor();
        }
        rt.onerror = function() {
            imgLibrary[newItem["data"]["img"]] = common.toolImages.errorImg[1];
            newItem["x"] = areaW / 2 - rt.naturalWidth / 2;
            newItem["y"] = areaH / 2 - rt.naturalHeight / 2;
            newItem["w"] = rt.naturalWidth;
            newItem["h"] = rt.naturalHeight;
            newItem["data"]["width"] = rt.naturalWidth;
            newItem["data"]["height"] = rt.naturalHeight;
            maidSelect = newItem;
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            Maids[pageFocus].push(newItem);
            returnToEditor();
        }
    } else {
        newItem["x"] = areaW / 2 - imgLibrary[newItem["data"]["img"]].naturalWidth / 2;
        newItem["y"] = areaH / 2 - imgLibrary[newItem["data"]["img"]].naturalHeight / 2;
        newItem["w"] = imgLibrary[newItem["data"]["img"]].naturalWidth;
        newItem["h"] = imgLibrary[newItem["data"]["img"]].naturalHeight;
        newItem["data"]["width"] = imgLibrary[newItem["data"]["img"]].naturalWidth;
        newItem["data"]["height"] = imgLibrary[newItem["data"]["img"]].naturalHeight;
        maidSelect = newItem;
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        Maids[pageFocus].push(newItem);
        returnToEditor();
    }

}
function addVideo() {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "Video";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["data"]["img"] = "img/video.png";
    newItem["video"] = "";
    newItem["type"] = "genericVideo/generic";
    newItem["w"] = 100;
    newItem["h"] = 100;
    newItem["data"]["width"] = 50;
    newItem["data"]["height"] = 50;
    newItem["x"] = 100;
    newItem["y"] = 100;
    maidSelect = newItem;
    dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    Maids[pageFocus].push(newItem);
    returnToEditor();
}
function addYoutube() {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "VideoYouTube";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["data"]["img"] = "img/youtube.png";
    newItem["type"] = "genericYouTube/generic";
    newItem["w"] = 100;
    newItem["h"] = 100;
    newItem["data"]["width"] = 100;
    newItem["data"]["height"] = 100;
    newItem["data"]["youtube"] = "5G76VJn7960";
    newItem["x"] = 100;
    newItem["y"] = 100;
    maidSelect = newItem;
    dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    Maids[pageFocus].push(newItem);
    returnToEditor();
}
function addText() {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "Text";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["type"] = "genericFont/generic";
    newItem["x"] = 100;
    newItem["y"] = 100;
    
    maidSelect = newItem;
    dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    Maids[pageFocus].push(newItem);
    returnToEditor();
}
function addShape() {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "Rectangulo";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["type"] = "generic/generic";
    newItem["x"] = 100;
    newItem["y"] = 100;
    newItem["w"] = 100;
    newItem["h"] = 100;
    newItem["data"]["width"] = 100;
    newItem["data"]["height"] = 100;
    newItem["data"]["color"] = "#000000";
    maidSelect = newItem;
    dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
    Maids[pageFocus].push(newItem);
    returnToEditor();
}
function addBgColor() {
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "BGColor";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["type"] = "genericBG/generic";
    newItem["x"] = 0;
    newItem["y"] = 0;
    newItem["w"] = areaW;
    newItem["h"] = areaH;
    newItem["data"]["width"] = areaW;
    newItem["data"]["height"] = areaH;

    var bgColorExist = false;
    var bgImgExist = false;
    if (Maids[pageFocus][0] && Maids[pageFocus][0]["type"] == "genericLoaderImgFull/generic") {
        bgImgExist = true;
        alert("Recuerda que pusiste una imagen de fondo");
    }
    for (var j in Maids[pageFocus]) {
        if (Maids[pageFocus][j]["type"] == "genericBG/generic") {
            bgColorExist = j;
            alert("solo puedes poner un fondo de color, eliminalo o cambia el color desde el panel del maid");
            break;
        }
    }
    if (bgImgExist && !bgColorExist) {
        maidSelect = newItem;
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        Maids[pageFocus].splice(1, 0, newItem);
    } else if (!bgImgExist && !bgColorExist) {
        Maids[pageFocus].splice(0, 0, newItem);
    }
    returnToEditor();
}
function addTemp() {
    createMode = drawMenuTextSize;
    toFormatText(false, "TEMP");
}
function createImg() {
    iniParamsCrop();
    createMode = drawCreateImg;
    toCreateImg(true, "CREATEIMG");
}
function createPDF() {
    createMode = drawCreatePDF;
    toCreatePDF(true, "CREATEPDF");
}
function addFontGoogle() {
    createMode = drawMenuTextSize;
    toFormatText(false, "FONTGOOGLE");
}
function addFontTypekit() {
    createMode = drawMenuTextSize;
    toFormatText(false, "FONTTYPEKIT");
}
function addFontAscender() {
    createMode = drawMenuTextSize;
    toFormatText(false, "FONTASCENDER");
}
function addFontMonotype() {
    createMode = drawMenuTextSize;
    toFormatText(false, "FONTMONOTYPE");
}
function addFontFontdeck() {
    createMode = drawMenuTextSize;
    toFormatText(false, "FONTFONTDECK");
}

//----------------
var showListMaidTween;
function listMaid() {
    posBookX = -widthScrollOpsMaid;
    posBookXAv = widthScrollOpsMaid;
    dirEditMain = -1;
    offsetYOpsMaid = 0;
    showPagesTween = setInterval(hideEditMaid, 33);
    createMode = function() {
        toLISTMAID();
    }
}
function toLISTMAID() {
    delForms();
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "MAINEDITOR";
    SUBMODE = "LISTMAID";
    removeListeners();
    listenersList = new Array(listMaiddown, listMaidup, listMaidmove);
    assignListeners();
    posBookX = -widthScrollOpsMaid;
    posBookXAv = widthScrollOpsMaid;
    dirEditMain = -1;
    clickY = widthScrollOpsMaid / 2;
    offsetYOpsMaid = 0;
    if (Maids[pageFocus].length * opsListMaidH > areaH) {
        posEditMaidX = -common.toolImages.editMaidBG[1].naturalWidth - 40;
    } else {
        posEditMaidX = -common.toolImages.editMaidBG[1].naturalWidth;
    }
    showListMaidTween = setInterval(drawListMaid, 33);
}
var dragItemNum;
function listMaiddown(e) {
    e.preventDefault();
    client(e);
    if (scrolleableListMaid && clickX > areaW + posEditMaidX && clickX < areaW + posEditMaidX + hideScrollPosEditMaidX) {
        startScrollListMaid = true;
        if (clickY < widthScrollOpsMaid / 2) {
            clickY = widthScrollOpsMaid / 2;
        } else if (clickY > areaH - widthScrollOpsMaid / 2) {
            clickY = areaH - widthScrollOpsMaid / 2;
        }
        if (startScrollListMaid && clickX > areaW + posEditMaidX && clickX < areaW + posEditMaidX + hideScrollPosEditMaidX) {
            offsetYOpsMaid = -(Maids[pageFocus].length * opsListMaidH - areaH) * (clickY - widthScrollOpsMaid / 2) / (areaH - widthScrollOpsMaid);
            commonDrawListMaid();
        }
    } else if (clickX > areaW + posEditMaidX && Maids[pageFocus].length - 1 >= Math.floor(clickY / opsListMaidH)) {
        var pos = Math.floor((clickY - offsetYOpsMaid) / opsListMaidH);
        if (clickX <= areaW - 160) {
            switch (Maids[pageFocus][pos]["lock"]) {
                case "true":
                    Maids[pageFocus][pos]["lock"] = "false";
                    break;
                default:
                    Maids[pageFocus][pos]["lock"] = "true";
                    break;
            }
            clickY = widthScrollOpsMaid / 2 - offsetYOpsMaid * (areaH - widthScrollOpsMaid) / (Maids[pageFocus].length * opsListMaidH - areaH);
        } else if (clickX >= areaW - 160 && clickX <= areaW - 120) {
            switch (Maids[pageFocus][pos]["vis"]) {
                case "true":
                    Maids[pageFocus][pos]["vis"] = "false";
                    break;
                default:
                    Maids[pageFocus][pos]["vis"] = "true";
                    break;
            }
            clickY = widthScrollOpsMaid / 2 - offsetYOpsMaid * (areaH - widthScrollOpsMaid) / (Maids[pageFocus].length * opsListMaidH - areaH);
        } else if (clickX >= areaW - 120) {
            SUBMODE = "DRAGUING";
            itemOffsetDrag = Math.floor((clickY - offsetYOpsMaid) / opsListMaidH) * opsListMaidH - (clickY - offsetYOpsMaid);
            dragItemNum = pos;
            if (scrolleableListMaid) {
                startScrollListMaid = true;
            }
        }
        createMaidIni(pageFocus, posBookX, 0);
        commonDrawListMaid();
    } else {
        posBookX = -200;
        posBookXAv = 200;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
        showListMaidTween = setInterval(hideListMaid, 33);
        createMode = function() {
            returnToEditor();
        }
    }
}
function swapItems(i) {
    //a�ado el que arrastro
    if (i < dragItemNum) {
        Maids[pageFocus].splice(i, 0, Maids[pageFocus][dragItemNum]);
        //elimino el que ya existe
        Maids[pageFocus].splice(dragItemNum + 1, 1);
    } else if (i > dragItemNum) {
        Maids[pageFocus].splice(i + 1, 0, Maids[pageFocus][dragItemNum]);
        //elimino el que ya existe
        Maids[pageFocus].splice(dragItemNum, 1);
    }
}
function listMaidmove(e) {
    e.preventDefault();
    client(e);
    if (startScrollListMaid) {
        if (SUBMODE != "DRAGUING") {
            if (clickY < widthScrollOpsMaid / 2) {
                clickY = widthScrollOpsMaid / 2;
            } else if (clickY > areaH - widthScrollOpsMaid / 2 && SUBMODE != "DRAGUING") {
                clickY = areaH - widthScrollOpsMaid / 2;
            }
            offsetYOpsMaid = -(Maids[pageFocus].length * opsListMaidH - areaH) * (clickY - widthScrollOpsMaid / 2) / (areaH - widthScrollOpsMaid);
        } else {

        }
        if (formActiv) {
            formOffsetY = offsetYOpsMaid;
            imgMaid();
        }
        commonDrawListMaid();
    } else if (SUBMODE == "DRAGUING") {
        commonDrawListMaid();
    }
}
function listMaidup(e) {
    e.preventDefault();
    if (SUBMODE == "DRAGUING") {
        SUBMODE = "LISTMAID";
        if (Math.floor((clickY - offsetYOpsMaid) / opsListMaidH) <= 0) {
            swapItems(0);
        } else {
            swapItems(Math.floor((clickY - offsetYOpsMaid) / opsListMaidH));
        }
        itemOffsetDrag = 0;
        if (clickY < widthScrollOpsMaid / 2) {
            clickY = widthScrollOpsMaid / 2;
        } else if (clickY > areaH - widthScrollOpsMaid / 2 && SUBMODE != "DRAGUING") {
            clickY = areaH - widthScrollOpsMaid / 2;
        }
        if (scrolleableListMaid) {
            offsetYOpsMaid = -(Maids[pageFocus].length * opsListMaidH - areaH) * (clickY - widthScrollOpsMaid / 2) / (areaH - widthScrollOpsMaid);
        }

    }
    commonDrawListMaid();
    startScrollListMaid = false;
}

function drawListMaid() {
    posBookXAv = Math.floor(posBookXAv / 4);
    posBookX = posEditMaidX + posBookXAv;
    if (posBookXAv <= 0) {
        clearInterval(showListMaidTween);
        posBookX = posEditMaidX;
        if (Maids[pageFocus].length * opsListMaidH > areaH) {
            scrolleableListMaid = true;
        } else {
            scrolleableListMaid = false;
        }
        commonDrawListMaid();
    } else {
        commonDrawListMaid();
    }
}
var opsListMaidH = 100;
var scrolleableListMaid = false;
var startScrollListMaid = false;
function commonDrawListMaid() {
    context.save();
    context.fillStyle = "1a1a1a";
    context.globalAlpha = 1;
    context.fillRect(areaW + posEditMaidX, 0, -posEditMaidX, areaH);
    context.restore();
    var scale = 1;
    var pushY = 0;
    for (var j in Maids[pageFocus]) {
        if (SUBMODE != "DRAGUING") {
            drawMaid();
        } else {
            if (j != dragItemNum) {
                if (j >= Math.floor((clickY - offsetYOpsMaid) / opsListMaidH) && j < dragItemNum) {
                    pushY = opsListMaidH;
                    if (scrolleableListMaid) {
                        offsetYOpsMaid = -(Maids[pageFocus].length * opsListMaidH - areaH) * (clickY - pushY) / (areaH - widthScrollOpsMaid);
                    }
                } else if (j <= Math.floor((clickY - offsetYOpsMaid) / opsListMaidH) && j > dragItemNum) {
                    pushY = -opsListMaidH;
                    if (scrolleableListMaid) {
                        offsetYOpsMaid = -(Maids[pageFocus].length * opsListMaidH - areaH) * (clickY + pushY) / (areaH - widthScrollOpsMaid);
                    }
                } else {
                    pushY = 0;
                }
                drawMaid();
            } else {
                pushY += opsListMaidH;
                //posY+=opsListMaidH;//modified optime code
            }
        }
    }
    if (SUBMODE == "DRAGUING") {
        drawMaidDragued();
    }
    function drawMaid() {
        context.fillStyle = "000000";
        context.fillRect((areaW - widthScrollOpsMaid), (opsListMaidH * j + offsetYOpsMaid) + pushY, (areaW - widthScrollOpsMaid), opsListMaidH - 1);
        context.save();
        context.fillStyle = "ffffff";
        context.font = "normal 10px Verdana ";
        context.textBaseline = "top";
        context.restore();
        context.save();
        if (Maids[pageFocus][j]["data"]["height"] > 100) {
            context.scale(opsListMaidH / areaH, opsListMaidH / areaH);
            scale = areaH / opsListMaidH;
        } else {
            scale = 1;
        }
        eval(Maids[pageFocus][j]["function"])(Maids[pageFocus][j]["data"]["img"], (areaW - widthScrollOpsMaid) * scale, (opsListMaidH * j + offsetYOpsMaid + pushY) * scale, 40, 40, Maids[pageFocus][j]["data"]);
        context.restore();
        context.fillStyle = "ffffff";
        context.fillText(Maids[pageFocus][j]["id"], areaW - 180, opsListMaidH * j + 12 + offsetYOpsMaid + pushY);
        if (Maids[pageFocus][j]["lock"] == "true") {
            context.drawImage(common.toolImages.lockPB[1], areaW - 200, opsListMaidH * j + 60 + offsetYOpsMaid + pushY);
        } else {
            context.drawImage(common.toolImages.unlockPB[1], areaW - 200, opsListMaidH * j + 60 + offsetYOpsMaid + pushY);
        }
        if (Maids[pageFocus][j]["vis"] == "true") {
            context.drawImage(common.toolImages.visPB[1], areaW - 160, opsListMaidH * j + 60 + offsetYOpsMaid + pushY);
        } else {
            context.drawImage(common.toolImages.novisPB[1], areaW - 160, opsListMaidH * j + 60 + offsetYOpsMaid + pushY);
        }
    }
    if (scrolleableListMaid && SUBMODE != "DRAGUING") {
        context.save();
        context.fillStyle = "ffffff";
        context.fillRect(areaW + posEditMaidX + 2, clickY - widthScrollOpsMaid / 2 + 2, hideScrollPosEditMaidX - 4, widthScrollOpsMaid - 4);
        context.restore();
        scrolleableOpsMaid = true;
    }
    createMaidIni(pageFocus, posBookX, 0);
}
function drawMaidDragued() {
    context.fillStyle = "000000";
    context.fillRect((areaW - widthScrollOpsMaid), clickY + itemOffsetDrag, (areaW - widthScrollOpsMaid), opsListMaidH - 1);
    context.save();
    context.fillStyle = "ffffff";
    context.font = "normal 10px Verdana ";
    context.textBaseline = "top";
    context.restore();
    context.save();
    if (Maids[pageFocus][dragItemNum]["data"]["height"] > 100) {
        context.scale(opsListMaidH / areaH, opsListMaidH / areaH);
        scale = areaH / opsListMaidH;
    } else {
        scale = 1;
    }
    eval(Maids[pageFocus][dragItemNum]["function"])(Maids[pageFocus][dragItemNum]["data"]["img"], (areaW - widthScrollOpsMaid) * scale, (clickY + itemOffsetDrag) * scale, 40, 40, Maids[pageFocus][dragItemNum]["data"]);
    context.restore();
    context.fillStyle = "ffffff";
    context.fillText(Maids[pageFocus][dragItemNum]["id"], areaW - 180, 12 + clickY + itemOffsetDrag);
    if (Maids[pageFocus][dragItemNum]["lock"] == "false") {
        context.drawImage(common.toolImages.unlockPB[1], areaW - 200, 60 + clickY + itemOffsetDrag);
    } else {
        context.drawImage(common.toolImages.lockPB[1], areaW - 200, 60 + clickY + itemOffsetDrag);
    }
    if (Maids[pageFocus][dragItemNum]["vis"] == "true") {
        context.drawImage(common.toolImages.visPB[1], areaW - 160, 60 + clickY + itemOffsetDrag);
    } else {
        context.drawImage(common.toolImages.novisPB[1], areaW - 160, 60 + clickY + itemOffsetDrag);
    }
}
function hideListMaid() {
    posBookXAv = Math.floor(posBookXAv / 4);
    posBookX = dirEditMain * posBookXAv;
    if (posBookXAv <= 1) {
        posBookX = 0;
        posBookXAv = 0;
        maxHeight = 0;
        clearInterval(showListMaidTween);
        createMaidIni(pageFocus, posBookX, 0);
        if (createMode) {
            createMode();
        }
    } else {
        commonDrawListMaid();
    }
}
// video creation
var isiPad = true;
var fireFox = false;
if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {
    fireFox = true;
}
var videoEmbedIpad = "";
var videoStatus = false;
var arrayVideos = new Array();
var videoShow;
function createVideo(maidVideo) {
    if (!videoStatus) {
    } else {
        clearInterval(videoShow);
        //document.body.removeChild(videoDiv);
    }
    if (isiPad || fireFox) {
        /*videoStatus=true;
         videoEmbedIpad+='<div  id="provCanvas" width='+maidVideo["data"]["width"]+' height='+maidVideo["data"]["height"]+'  style="color:red; position: relative; top: 0px; left: 0px;z-index:0"></div>';
         videoEmbedIpad+='<div id="contVideo" style="position: relative; top: '+maidVideo["y"]+'px; left: '+maidVideo["x"]+'px;z-index:1;margin-top:-'+areaH+'px">';
         videoEmbedIpad+='<video autoplay loop controls id="theVideo" width="'+maidVideo["data"]["width"]+'" height="'+maidVideo["data"]["height"]+'" poster="'+maidVideo["data"]["img"]+'">'
         videoEmbedIpad+='<source src="'+maidVideo["data"]["video"]+'" type="video/mp4; codecs=';
         videoEmbedIpad+='"avc1.42E01E, mp4a.40.2"';
         videoEmbedIpad+='" />';
         videoEmbedIpad+='<source src="http://http://demoivideo.betybyte.com/web_content/media/seraphim.webm" type="video/webm; codecs=';
         videoEmbedIpad+='"vp8, vorbis"';
         videoEmbedIpad+='" />';
         videoEmbedIpad+='<source src="http://demoivideo.betybyte.com/web_content/media/seraphim.ogv" type="video/ogg; codecs='
         videoEmbedIpad+='"theora, vorbis"';
         videoEmbedIpad+='" />';
         videoEmbedIpad+='</video>';
         videoIpadDiv.innerHtml=videoEmbedIpad;				
         //alert(maidVideo["data"]["video"]);
         document.getElementById('flashTable').innerHTML =videoEmbedIpad;
         document.getElementById('provCanvas').appendChild(canvasCont);
         alert(maidVideo["data"]["video"]);*/
        videoStatus = true;
        //videoEmbedIpad+='<div  id="provCanvas" width='+maidVideo["data"]["width"]+' height='+maidVideo["data"]["height"]+'  style="color:red; position: relative; top: 0px; left: 0px;z-index:0"></div>';
        //videoEmbedIpad+='<div id="contVideo" style="position: relative; top: '+maidVideo["y"]+'px; left: '+maidVideo["x"]+'px;z-index:100000000;margin-top:-'+areaH+'px">';
        /*videoEmbedIpad+='<video autoplay loop controls id="theVideo" width="'+maidVideo["data"]["width"]+'" height="'+maidVideo["data"]["height"]+'" poster="'+maidVideo["data"]["img"]+'">'
         videoEmbedIpad+='<source src="'+maidVideo["data"]["video"]+'" type="video/mp4; codecs=';
         videoEmbedIpad+='"avc1.42E01E, mp4a.40.2"';
         videoEmbedIpad+='" />';
         videoEmbedIpad+='<source src="http://http://demoivideo.betybyte.com/web_content/media/seraphim.webm" type="video/webm; codecs=';
         videoEmbedIpad+='"vp8, vorbis"';
         videoEmbedIpad+='" />';
         videoEmbedIpad+='<source src="http://demoivideo.betybyte.com/web_content/media/seraphim.ogv" type="video/ogg; codecs='
         videoEmbedIpad+='"theora, vorbis"';
         videoEmbedIpad+='" />';
         videoEmbedIpad+='</video>';*/
        //videoEmbedIpad+='</div>';
        //videoEmbedIpad+='<div id="contVideo" style="position: relative; top: '+maidVideo["y"]+'px; left: '+maidVideo["x"]+'px;z-index:1;margin-top:-'+areaH+'px"></div>';				
        //videoIpadDiv.innerHtml=videoEmbedIpad;
        var videoIpadDiv = document.createElement("div");
        videoIpadDiv.setAttribute('id', "contVideo");       //give id to it
        //set the inner styling of the div tag 
        videoIpadDiv.style.position = "absolute";
        videoIpadDiv.style.pixelLeft = maidVideo["x"];
        videoIpadDiv.style.pixelTop = maidVideo["y"];
        videoIpadDiv.style.left = maidVideo["x"];
        videoIpadDiv.style.top = maidVideo["y"];
        videoIpadDiv.style.pixelWidth = maidVideo["data"]["width"];
        videoIpadDiv.style.pixelHeight = maidVideo["data"]["height"];
        videoIpadDiv.style.backgroundColor = "black";
        var videoElement = document.createElement("video");
        videoElement.width = maidVideo["data"]["width"];
        videoElement.height = maidVideo["data"]["height"];
        videoIpadDiv.appendChild(videoElement);
        arrayVideos.push(videoIpadDiv);
        if (isiPad) {
            videoElement.src = maidVideo["data"]["video"] + ".mp4";
        } else {
            videoElement.src = maidVideo["data"]["video"] + ".webm";
            videoElement.src = maidVideo["data"]["video"] + ".ogv";
        }
        videoElement.controls = "controls";
        videoElement.autoplay = "autoplay";
        document.body.appendChild(videoIpadDiv);
    } else {
        var videoElement = document.createElement("video");

        videoDiv = document.createElement('div');
        document.body.appendChild(videoDiv);
        videoDiv.appendChild(videoElement);
        //videoDiv.setAttribute("style","display;none");
        videoDiv.style.display = "none";
        //videoElement.setAttribute("src","media/SophieEllisBextor-Bittersweet.mp4");
        var videoType = supportedVideoFormat(videoElement);
        alert("El formato de video soportado:" + videoType);
        /*if(isiPad){
         alert("media/SophieEllisBextor-Bittersweet.mp4");
         videoElement.setAttribute("src","media/SophieEllisBextor-Bittersweet.mp4");
         }else{
         videoElement.setAttribute("src",itemsCollection[imgClick]["masterNAME"]);
         (itemsCollection[imgClick]["masterNAME"]);
         }*/
        alert(maidVideo["data"]["video"]);
        videoElement.addEventListener("canplaythrough", videoLoaded, false);
        videoElement.setAttribute("src", maidVideo["data"]["video"]);
    }

    function videoLoaded() {
        videoStatus = true;
        videoElement.play();
        videoWori = videoElement.naturalWidth;
        videoHori = videoElement.naturalHeight;
        videoW = maidVideo["data"]["width"];
        if (videoHori * maidVideo["data"]["width"] / videoWori < maidVideo["data"]["height"]) {
            videoH = videoHori * maidVideo["data"]["width"] / videoWori;
        } else {
            videoH = maidVideo["data"]["height"];
            videoW = videoWori * maidVideo["data"]["height"] / videoHori;
        }
        videoX = maidVideo["x"];
        videoY = maidVideo["y"];
        context.globalAlpha = 1;
        context.fillStyle = "#ffffff";
        var mins = Math.floor(videoElement.duration / 60);
        var secs = Math.floor(videoElement.duration - (mins * 60));
        if (mins < 10) {
            mins = "0" + mins;
        }
        if (secs < 10) {
            secs = "0" + secs;
        }
        videoDuration = mins + ":" + secs;
        playStatus = true;
        videoShow = setInterval(drawVideo, 33);
    }
    function drawVideo() {
        totalBar = areaW - 240 - 100;
        //alert(videoX+" "+videoY+" "+videoW+" "+videoH);
        context.drawImage(videoElement, maidVideo["x"], maidVideo["y"], maidVideo["data"]["width"], maidVideo["data"]["height"]);
        //context.drawImage(listThumb,0,areaH-40);
        /*var mins=Math.floor(videoElement.currentTime/60);
         var secs=Math.floor(videoElement.currentTime-(mins*60));
         if(mins<10){
         mins="0"+mins;
         }
         if(secs<10){
         secs="0"+secs;
         }
         mins+":"+secs;
         context.font= "bold 10px verdana ";
         context.fillStyle= "#000000 ";
         context.fillRect(96,maidVideo["data"]["height"]-30,totalBar+8,22);
         context.fillStyle= "#ffffff ";
         context.fillText( mins+":"+secs,50, maidVideo["data"]["height"]-25);
         context.fillRect(100,maidVideo["data"]["height"]-26,totalBar,14);
         context.fillStyle= "#83af26 ";
         context.fillRect(100,maidVideo["data"]["height"]-26,totalBar*videoElement.currentTime/videoElement.duration,14);
         context.fillText( videoDuration,100+totalBar+20, maidVideo["data"]["height"]-25);*/
        /*if(fullScreen){
         context.drawImage(backFull,maidVideo["data"]["width"]-40,maidVideo["data"]["height"]-40);
         }else{
         context.drawImage(toFull,maidVideo["data"]["width"]-40,maidVideo["data"]["height"]-40);
         }*/
        /*if(playStatus){
         context.drawImage(pause,maidVideo["data"]["width"]-120,maidVideo["data"]["height"]-40);
         }else{
         context.drawImage(play,maidVideo["data"]["width"]-120,maidVideo["data"]["height"]-40);
         context.drawImage(playVideo,maidVideo["data"]["width"]/2-playVideo.naturalWidth/2,maidVideo["data"]["heigth"]/2-playVideo.naturalHeight/2);
         }*/
        /*context.drawImage(avImg,maidVideo["data"]["width"]-80,maidVideo["data"]["height"]-40);
         context.drawImage(reImg,maidVideo["data"]["width"]-100,maidVideo["data"]["height"]-40);*/
        if (videoDuration == mins + ":" + secs) {
            videoElement.pause();
            videoStatus = false;
            videoWidth = 0;
            videoHeight = 0;
            clearInterval(videoShow);
            //document.body.removeChild(videoDiv);
            //videoDiv.removeChild(videoElement);
        }
        //context.drawImage(videoElement,0,0);
    }
}
function supportedVideoFormat(video) {
    var returnExtension = "";
    if (video.canPlayType("video/mp4") == "probably" || video.canPlayType("video/mp4") == "maybe") {
        returnExtension = "mp4";
    } else if (video.canPlayType("video/webm") == "probably" || video.canPlayType("video/webm") == "maybe") {
        returnExtension = "webm";
    } else if (video.canPlayType("video/ogg") == "probably" || video.canPlayType("video/ogg") == "maybe") {
        returnExtension = "ogg";
    }
    return returnExtension;

}
//----------------------------
function createFullPage(fullPage, mode, re, av) {
    endMove = false;
    /*if(fullPage=="2"){
     fullPage="3";
     }*/
    if (fullPage && fullPage != "" && fullPage != "false") {
        if (pages[fullPage] && fullPage.indexOf("http://") == -1) {
            if (mode == "static") {
                _static = true;
            } else {
                backPage = pageFocus;
            }
            moveToPage(Number(fullPage));
        } else if (/*fullPage.indexOf("http://maidpress.com")==-1 &&*/ fullPage.indexOf("http://") != -1) {
            //window.blank.location.href = fullPage;
            window.open(fullPage, "Title", "target=_blank,menubar=yes,toolbar=yes,location=yes,directories=yes,titlebar=yes,status=yes,scrollbars=yes,resizable=yes");
        }/*else if(fullPage.indexOf("http://maidpress")!=-1){
         pageFocus=0;
         root=fullPage+"/";
         bookSelect=1;
         pageFocus=0;
         pages=new Array; 
         Maids=new Array;
         configArray[1]=new Array(pageXML,"book","pages");
         numPage=0; 
         numPages=0;
         numBooks=0;
         posBookX=0;
         posPageX=0;
         scrollPageY=0;
         pageYoffset=0;
         avY=0;
         resetParamsPage();
         posBookX=0;
         posBookXAv=0;
         bookPreload=true;			
         if(local){
         url =root+"xml/"+"config.xml?"+randomRoot();
         }else{
         url = proxy+'?yws_path=' + encodeURIComponent(root+"xml/"+"config.xml")+'&env='+env+'&random='+randomRoot();
         }
         getXML();
         }*/ else {
            alert("page does not exist");
        }
    } else {
        //alert("There is no full text");	
    }
}
var FULLIMG = false;
function createFullImg(fullImg) {
    cleanVideos();
    context.globalAlpha = 1;
    FULLIMG = true;
    context.fillStyle = "#000000";
    context.fillRect(0, 0, areaW, areaH);
    var imgW = imgLibrary[fullImg].naturalWidth;
    var imgH = imgLibrary[fullImg].naturalHeight;
    if (imgW > areaW || imgH > areaH) {
        var imgEndH;
        var imgEndW;
        centerX;
        if (areaW * imgH / imgW < areaH) {
            imgEndW = areaW - 20;
            imgEndH = imgEndW * imgH / imgW;
            centerY = (areaH / 2 - imgEndH / 2);
            centerX = 10;
            context.drawImage(imgLibrary[fullImg], centerX, centerY, imgEndW, imgEndH);
        } else {
            imgEndH = areaH - 20;
            imgEndW = imgEndH * imgW / imgH;
            centerX = (areaW / 2 - imgEndW / 2);
            centerY = 10;
            context.drawImage(imgLibrary[fullImg], centerX, centerY, imgEndW, imgEndH);
            centerX = 0;
        }
    } else {
        centerX = (areaW / 2 - imgW / 2);
        centerY = (areaH / 2 - imgH / 2);
        context.drawImage(imgLibrary[fullImg], centerX, centerY, imgW, imgH);
        centerX = 0;
        centerY = 0;
    }
    context.drawImage(common.toolImages.backPB[1], posBookX, 0);
}
function moveToPage(page) {
    adjustPageStatic = 0;
    pageXvar = areaW;
    posPageX = 0;
    pageX = 0;
    numPage = Number(page);
    resetParamsPage();
    BGImgH = 0;
    delPageForms();
    delForms();
    cleanVideos();
    clearInterval(showPagesTween);
    if (creatingPage) {
        associateRecord();
    }
    if (numPage < pageFocus) {
        if (numPage < 0) {
            numPage = numPages - 1;
        }
        adjustPageStatic = numPage - pageFocus + 1;
        if (Math.abs(adjustPageStatic) >= numPages - 1) {
            adjustPageStatic = 0;
        }
        Offsset = 0;
        endMove = false;
        //createMaidIni(numPage,-areaW,0);
        tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
    } else {
        if (numPage > numPages - 1) {
            numPage = 0;
        }
        adjustPageStatic = numPage - pageFocus - 1;
        endMove = false;
        Offsset = areaW;
        createMaidIni(numPage, areaW, 0);
        tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
    }
}

//toGRIDSNAP
function toGRIDSNAP() {
    endMove = false;
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "GRIDSNAP";
    SUBMODE = "GRIDSNAP";
    removeListeners();
    listenersList = new Array(gridsnapdown, gridsnapup, gridsnapmove);
    assignListeners();
    posBookX = -200;
    posBookXAv = 200;
    dirEditMain = -1;
    offsetYOpsMaid = 0;
    createMode = drawGridSnap;
    showPagesTween = setInterval(hideEditMaid, 33);
}
function gridsnapdown(e) {
    e.preventDefault();
    client(e);
    if (clickX <= 80 && clickY >= areaH - 80) {
        createMode = null;
        returnToEditor();
    } else if (clickX <= 720 && clickX >= 640 && clickY >= areaH - 80) {
        ALIGN = "GRID";
        sizeGrid = Number(textArea.value);
        formActiv = true;
        createMode = null;
        createMaidIni(pageFocus, posBookX, 0);
        returnToEditor();
    }
}
function gridsnapup(e) {
    e.preventDefault();
    client(e);
}
function gridsnapmove(e) {
    e.preventDefault();
    client(e);
}
var sizeGrid = 10;
function drawGridSnap() {

    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 80, areaW, 80);
    context.fillStyle = "#ffffff";
    context.drawImage(common.toolImages.closePB[1], 0, areaH - 80);
    context.fillText("introduce the size for the grid.", 80, areaH - 40);
    formActiv = true;
    var formInput = document.createElement("div");
    formInput.style.overflow = "visible";
    formInput.style.position = 'absolute';
    formInput.style.left = 400;
    formInput.style.top = areaH - 60;
    //formInput.style.background="green";
    document.body.appendChild(formInput);
    formInputCont.push(formInput);
    var form = document.createElement("form");
    textArea = document.createElement("textarea");
    textArea.style.size = areaW;
    textArea.style.type = "text";
    textArea.style.id = "text";
    textArea.style.width = 200;
    textArea.style.height = 40;
    textArea.value = sizeGrid;
    formInput.appendChild(form);
    form.appendChild(textArea);
    context.drawImage(common.toolImages.recordPB[1], 640, areaH - 80);
}

//--------------toFormatText
function toFormatText(move, submode) {
    endMove = false;
    delForms();
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "4679";
    SUBMODE = submode;
    removeListeners();
    listenersList = new Array(textFormatdown, textFormatup, textFormatmove);
    assignListeners();
    if (move) {
        posBookX = -200;
        posBookXAv = 200;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
    }
    showPagesTween = setInterval(hideEditMaid, 33);
}
function drawMenuTextFormat() {
    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 80, areaW, 80);
    context.fillStyle = "#07aaff";
    if (maidSelect.data.align == "right") {
        context.fillRect(7 * PBW, areaH - PBW, PBW, PBW);
    } else if (maidSelect.data.align == "center") {
        context.fillRect(6 * PBW, areaH - PBW, PBW, PBW);
    } else {
        context.fillRect(5 * PBW, areaH - PBW, PBW, PBW);
    }
    context.drawImage(common.toolImages.textFormatPanel[1], 0, areaH - 80);
}
function drawMenuBold() {
    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 80, areaW, 80);
    context.fillStyle = "#07aaff";
    if (maidSelect.data.bold == "1") {
        context.fillRect(PBW, areaH - PBW, PBW, PBW);
    }
    if (maidSelect.data.italic == "1") {
        context.fillRect(2 * PBW, areaH - PBW, PBW, PBW);
    }
    if (maidSelect.data.underlined == "1") {
        context.fillRect(3 * PBW, areaH - PBW, PBW, PBW);
    }
    context.drawImage(common.toolImages.textBoldPanel[1], 0, areaH - 80);
}

var fontW = 130;
function drawMenuTextFace() {
    drawRect(0, areaH - 120, areaW, 40, "#1b1b1b", 1, false);
    var c = 0;
    fonts.arrayFonts.sort();
    context.fillStyle = "#0099ff";
    context.font = "normal 15px verdana";
    context.fillText("Basics", (c * fontW) + posBookX + 5, areaH - 100);
    for (var j = 0 in fonts.arrayFonts) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(posBookX + (c * fontW), areaH - 160 - 40 * j, fontW, 39);
        context.fillStyle = "#ffffff";
        context.font = "normal 12px " + fonts.arrayFonts[j];
        context.fillText(fonts.arrayFonts[j], (c * fontW) + posBookX + 5, areaH - 135 - 40 * j);
    }
    c = 1;
    context.fillStyle = "#0099ff";
    context.font = "normal 15px verdana";
    context.fillText("Google Fonts", (c * fontW) + posBookX + 5, areaH - 100);
    fonts.arrayFontsGoogle.sort();
    for (var j = 0 in fonts.arrayFontsGoogle) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(posBookX + (c * fontW), areaH - 160 - 40 * j, fontW, 39);
        context.fillStyle = "#ffffff";
        context.font = "normal 12px " + fonts.arrayFontsGoogle[j];
        context.fillText(fonts.arrayFontsGoogle[j], (c * fontW) + posBookX + 5, areaH - 135 - 40 * j);
    }
    c = 2;
    context.fillStyle = "#0099ff";
    context.font = "normal 15px verdana";
    context.fillText("Typekit Fonts", (c * fontW) + posBookX + 5, areaH - 100);
    fonts.arrayFontsTypekit.sort();
    for (var j = 0 in fonts.arrayFontsTypekit) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(posBookX + (c * fontW), areaH - 160 - 40 * j, fontW, 39);
        context.fillStyle = "#ffffff";
        context.font = "normal 12px " + fonts.arrayFontsTypekit[j];
        context.fillText(fonts.arrayFontsTypekit[j], (c * fontW) + posBookX + 5, areaH - fontW - 40 * j);
    }
    c = 3;
    context.fillStyle = "#0099ff";
    context.font = "normal 15px verdana";
    context.fillText("Ascender Fonts", (c * fontW) + posBookX, areaH - 100);
    fonts.arrayFontsAscender.sort();
    for (var j = 0 in fonts.arrayFontsAscender) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(posBookX + (c * fontW), areaH - 160 - 40 * j, fontW, 39);
        context.fillStyle = "#ffffff";
        context.font = "normal 12px " + fonts.arrayFontsAscender[j];
        context.fillText(fonts.arrayFontsAscender[j], (c * fontW) + posBookX + 5, areaH - 135 - 40 * j);
    }
    c = 4;
    context.fillStyle = "#0099ff";
    context.font = "normal 15px verdana";
    context.fillText("Monotype Fonts", (c * fontW) + posBookX + 5, areaH - 100);
    fonts.arrayFontsMonotype.sort();
    for (var j = 0 in fonts.arrayFontsMonotype) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(posBookX + (c * fontW), areaH - 160 - 40 * j, fontW, 39);
        context.fillStyle = "#ffffff";
        context.font = "normal 12px " + fonts.arrayFontsMonotype[j];
        context.fillText(fonts.arrayFontsMonotype[j], (c * fontW) + posBookX + 5, areaH - fontW - 40 * j);
    }
    c = 5;
    context.fillStyle = "#0099ff";
    context.font = "normal 15px verdana";
    context.fillText("Fontdeck Fonts", (c * fontW) + posBookX + 5, areaH - 100);
    fonts.arrayFontsFontdeck.sort();
    for (var j = 0 in fonts.arrayFontsFontdeck) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(posBookX + (c * fontW), areaH - 160 - 40 * j, 120, 39);
        context.fillStyle = "#ffffff";
        context.font = "normal 12px " + fonts.arrayFontsFontdeck[j];
        context.fillText(fonts.arrayFontsFontdeck[j], (c * fontW) + posBookX + 5, areaH - 135 - 40 * j);
    }
}
function drawMenuTextSize() {
    context.save();
    if (SUBMODE != "INTROTEXT") {
        context.fillStyle = "#1a1a1a";
        context.fillRect(0, areaH - 80, areaW, 80);
        context.drawImage(common.toolImages.textFormatPanel[1], 0, areaH - 80);
        context.fillRect(2 * PBW, areaH - 80, areaW, 80);
        if (!formActiv) {
            formActiv = true;
            var formInput = document.createElement("div");
            if (document.createElement("input").webkitSpeech == undefined) {
                textArea = document.createElement("textArea");
            } else {
                textArea = document.createElement("input");
                textArea.webkitSpeech = "x-webkit-speech";
                textArea.setAttribute('onwebkitspeechchange', 'onChange(this.value)');
            }
            switch (SUBMODE) {
                case "TEMP":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    if (!(arrayConfig.temp > 0)) {
                        textArea.value = "";
                    } else {
                        textArea.value = arrayConfig.temp / 1000;
                    }
                    break;
                case "FONTGOOGLE":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    if (fonts.arrayFontsGoogle.length > 0) {
                        textArea.value = fonts.arrayFontsGoogle.toString();
                    } else {
                        textArea.value = "";
                    }
                    break;
                case "FONTTYPEKIT":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    if (fonts.arrayFontsTypekit.length > 0) {
                        textArea.value = fonts.arrayFontsTypekit.toString();
                    } else {
                        textArea.value = "";
                    }
                    break;
                case "FONTASCENDER":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    if (fonts.arrayFontsAscender.length > 0) {
                        textArea.value = fonts.arrayFontsAscender.toString();
                    } else {
                        textArea.value = "";
                    }
                    break;
                case "FONTMONOTYPE":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    if (fonts.arrayFontsMonotype.length > 0) {
                        textArea.value = fonts.arrayFontsMonotype.toString();
                    } else {
                        textArea.value = "";
                    }
                    break;
                case "FONTFONTDECK":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    if (fonts.arrayFontsFontdeck.length > 0) {
                        textArea.value = fonts.arrayFontsFontdeck.toString();
                    } else {
                        textArea.value = "";
                    }
                    break;
                case "INTROIMG":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    textArea.className = "textareaform";
                    break;
                case "INTROYOUTUBE":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    textArea.className = "textareaform";
                    break;
                case "INTROLINK":
                    formInput.style.left = 0;
                    formInput.style.top = 0;
                    textArea.style.width = areaW;
                    textArea.style.height = areaH - 80;
                    textAreaType = 1;
                    textArea.className = "textareaform";
                    break;
                case "COLORPICKER":
                    formInput.style.left = 80;
                    formInput.style.top = areaH - 60;
                    textArea.style.width = 150;
                    textArea.style.height = 40;
                    textAreaType = 1;
                    textArea.value = maidSelect.data.color;
                    break;
                default:
                    context.fillStyle = "#07aaff";
                    context.fillRect(2 * PBW - 20, areaH - 60, 500, PBW / 2);
                    formInput.style.left = 80;
                    formInput.style.top = areaH - 60;
                    textArea.style.width = 40;
                    textArea.style.height = 40;
                    textAreaType = 1;
                    break;
            }
            formInput.style.overflow = "visible";
            formInput.style.position = 'absolute';
            document.body.appendChild(formInput);
            formInputCont.push(formInput);
            textArea.style.size = areaW;
            textArea.style.type = "text";
            textArea.style.id = "text";
            formInput.appendChild(textArea);

        }
    } else {
        arrayTextAreasLan = new Array();
        createMode = drawTextLan;
        createMode();
    }
    switch (SUBMODE) {
        case "SIZETEXT":
            valueSpeech = "size";
            textArea.value = maidSelect.data.size;
            break;
        case "":
            valueSpeech = "lineHeight";
            textArea.value = maidSelect.data.lineHeight;
            break;
        case "ALPHA":
            valueSpeech = "alpha";
            textArea.value = Math.floor(Number(maidSelect.data.alpha) * 100);
            break;
        case "INTROIMG":
            valueSpeech = "text";
            textArea.value = maidSelect.data.img;
            break;
        case "INTROYOUTUBE":
            valueSpeech = "text";
            textArea.value = maidSelect.data.youtube;
            break;
        case "INTROLINK":
            valueSpeech = "text";
            textArea.value = maidSelect.data.fullPage;
            break;
        case "PAGE":
            valueSpeech = "text";
            textArea.value = maidSelect.data.fullPage;
            break;
        case "AVPAGE":
            valueSpeech = "text";
            textArea.value = pages[pageFocus].pageStaticAv;
            break;
        case "REPAGE":
            valueSpeech = "text";
            textArea.value = pages[pageFocus].pageStaticRe;
            break;
        case "WIDTH":
            valueSpeech = "text";
            textArea.value = maidSelect.data.width;
            break;
        case "HEIGHT":
            valueSpeech = "text";
            textArea.value = maidSelect.data.height;
            break;
        case "COLORPICKER":
            valueSpeech = "color";
            context.drawImage(common.toolImages.espectro[1], 450, areaH - 80);
            textArea.value = maidSelect.data.color;

            context.fillStyle = maidSelect.data.color;
            context.fillRect(300, areaH - 60, 100, 40);

            break;
    }

    if (SUBMODE != "INTROTEXT" && SUBMODE != "COLORPICKER" && SUBMODE != "ALPHA" && SUBMODE != "INTROIMG" && SUBMODE != "INTROLINK" && SUBMODE != "INTROYOUTUBE" && SUBMODE != "TEMP" && SUBMODE != "FONTGOOGLE" && SUBMODE != "FONTTYPEKIT" && SUBMODE != "FONTASCENDER" && SUBMODE != "FONTMONOTYPE" && SUBMODE != "FONTFONTDECK") {
        context.fillStyle = "#07aaff";
        context.fillRect(2 * PBW - 20, areaH - 60, 500, PBW / 2);
        context.fillStyle = "#ffffff";
        context.fillRect(2 * PBW + Number(textArea.value) - 20, areaH - 60, 40, 40);
    } else if (SUBMODE == "ALPHA") {
        context.fillStyle = "#07aaff";
        context.fillRect(2 * PBW - 20, areaH - 60, 500, PBW / 2);
        context.fillStyle = "#ffffff";
        context.fillRect(2 * PBW + Math.floor(Number(textArea.value) * 480 / 100) - 20, areaH - 60, 40, 40);
    }
    context.restore();


}
var valueSpeech;
function onChange(value) {
    if (valueSpeech == "color") {
        var cadena = value;
        cadena = cadena.replace(/ /g, '');
        maidSelect.data[valueSpeech] = "#" + cadena;
    } else {
        maidSelect.data[valueSpeech] = value;
    }
    createMode = drawMenuTextFormat;
    SUBMODE = "FORMATTINGTEXT";
    createMaidIni(pageFocus, posBookX, 0);
    createMode();
}
var loadFont = false;
var loadTemp = false;
var tempo;
function automatic() {
    if (tempo) {
        clearInterval(writeTempInterval);
        clearInterval(tempo);
    }
    cleanVideos();
    maidSelect = null;
    detect = null;
    numPage += 1;
    if (numPage > numPages - 1) {
        numPage = 0;
    }
    direction = 1;
    backPage = null;
    endMove = false;
    pageXvar = areaW;
    pageX = 0;
    resetParamsPage();
    BGImgH = 0;
    endMove = false;
    Offsset = areaW;
    adjustPageStatic = numPage - pageFocus - 1;
    createMaidIni(numPage, areaW, 0);
    tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, MODE, null);
}
var writeTempInterval;
var contTemp;
function writeTemp() {
    context.save();
    drawRect(40, 4, 30, 30, "#2e2e2e", 1, false);
    context.fillStyle = "#ffffff";
    context.font = "normal 12px arial ";
    context.textAlign = "center";
    context.fillText(contTemp, 58, 23);
    contTemp -= 1;
    context.restore();
}

var iniFormatArr = false;
var xOffsetScroll = 0;
function textFormatdown(e) {
    paramOld = false;
    e.preventDefault();
    client(e);
    if (clickY >= areaH - PBW) {
        var s = document.getElementsByTagName('script')[0];
        switch (SUBMODE) {
            case "TEMP":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        if (textArea.value != "" && textArea.value != "0") {
                            if (Math.floor(Number(textArea.value)) < Number(textArea.value)) {
                                alert("El tiempo introducido se ha ajustado al segundo inferior al decimal:" + Math.floor(Number(textArea.value)));

                            }
                            arrayConfig.temp = Math.floor(Number(textArea.value)) * 1000;
                        } else {
                            alert("Se va a eliminar el temporizador");
                            arrayConfig.temp = 0;
                        }
                        loadTemp = true;
                        associateRecord();
                        returnToEditor();
                        break;
                }
                break;
            case "FONTGOOGLE":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        if (textArea.value != "") {
                            var arrayFontsGoogleTemp = new Array();
                            var arrayTemp = new Array();
                            arrayFontsGoogleTemp = textArea.value.split(",");
                            for (var j in arrayFontsGoogleTemp) {
                                if (fonts.arrayFontsGoogle.indexOf(arrayFontsGoogleTemp[j]) == -1) {
                                    fonts.arrayFontsGoogle.push(arrayFontsGoogleTemp[j]);
                                    arrayTemp.push(arrayFontsGoogleTemp[j]);
                                } else {
                                    alert("Font:" + arrayFontsGoogleTemp[j] + " Exists");
                                }
                            }
                            if (arrayTemp.length > 0) {
                                WebFontConfig = {
                                    google: {families: arrayTemp}
                                };
                                (function() {
                                    var wf = document.createElement('script');
                                    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
                                            '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                                    wf.type = fonts.type;
                                    wf.async = fonts.async;
                                    s.parentNode.insertBefore(wf, s);
                                })();
                                loadFont = true;
                                associateRecord();
                            }
                        }
                        returnToEditor();
                        break;
                }
                break;
            case "FONTTYPEKIT":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        if (textArea.value != "") {
                            var arrayFontsTypekitTemp = new Array();
                            arrayFontsTypekitTemp = textArea.value.split(",");
                            var arrayTemp = new Array();
                            for (var j in arrayFontsTypekitTemp) {
                                if (fonts.arrayFontsTypekit.indexOf(arrayFontsTypekitTemp[j]) == -1) {
                                    fonts.arrayFontsTypekit.push(arrayFontsTypekitTemp[j]);
                                    arrayTemp.push(arrayFontsTypekitTemp[j]);
                                } else {
                                    alert("Font:" + arrayFontsTypekitTemp[j] + " Exists");
                                }
                            }
                            if (arrayTemp.lenght > 0) {
                                WebFontConfig = {
                                    typekit: {id: arrayTemp}
                                };
                                (function() {
                                    var wf = document.createElement('script');
                                    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +
                                            '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                                    wf.type = fonts.type;
                                    wf.async = fonts.async;
                                    s.parentNode.insertBefore(wf, s);
                                })();
                                loadFont = true;
                                associateRecord();
                            }
                        }
                        returnToEditor();
                        break;
                }
                break;
            case "FONTASCENDER":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        if (textArea.value != "") {
                            var arrayFontsAscenderTemp = new Array();
                            arrayFontsAscenderTemp = textArea.value.split(",");
                            var arrayTemp = new Array();
                            for (var j in arrayFontsAscenderTemp) {
                                if (fonts.arrayFontsAscender.indexOf(arrayFontsAscenderTemp[j]) === -1) {
                                    fonts.arrayFontsAscender.push(arrayFontsAscenderTemp[j]);
                                    arrayTemp.push(arrayFontsAscenderTemp[j]);
                                } else {
                                    alert("Font:" + arrayFontsAscenderTemp[j] + " Exists");
                                }
                            }
                            if (arrayTemp.lenght > 0) {
                                WebFontConfig = {
                                    ascender: {key: '', families: arrayTemp}
                                };
                                (function() {
                                    var wf = document.createElement('script');
                                    wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
                                            '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                                    wf.type = fonts.type;
                                    wf.async = fonts.async;
                                    s.parentNode.insertBefore(wf, s);
                                })();
                                loadFont = true;
                                associateRecord();
                            }
                        }
                        returnToEditor();
                        break;
                }
                break;
            case "FONTMONOTYPE":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        if (textArea.value !== "") {
                            var arrayFontsMonotypeTemp = new Array();
                            arrayFontsMonotypeTemp = textArea.value.split(",");
                            var arrayTemp = new Array();
                            for (var j in arrayFontsMonotypeTemp) {
                                if (fonts.arrayFontsMonotype.indexOf(arrayFontsMonotypeTemp[j]) === -1) {
                                    fonts.arrayFontsMonotype.push(arrayFontsMonotypeTemp[j]);
                                    arrayTemp.push(arrayFontsMonotypeTemp[j]);
                                } else {
                                    alert("Font:" + arrayFontsMonotypeTemp[j] + " Exists");
                                }
                            }
                            if (arrayTemp.lenght > 0) {
                                WebFontConfig = {
                                    monotype: {projectId: arrayTemp}
                                };
                                (function() {
                                    var wf = document.createElement('script');
                                    wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
                                            '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                                    wf.type = fonts.type;
                                    wf.async = fonts.async;
                                    s.parentNode.insertBefore(wf, s);
                                })();
                                loadFont = true;
                                associateRecord();
                            }
                        }
                        returnToEditor();
                        break;
                }
                break;
            case "FONTFONTDECK":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        if (textArea.value !== "") {
                            var arrayFontsFontdeckTemp = new Array();
                            arrayFontsFontdeckTemp = textArea.value.split(",");
                            var arrayTemp = new Array();
                            for (var j in arrayFontsMonotypeTemp) {
                                if (fonts.arrayFontsFontdeck.indexOf(arrayFontsFontdeckTemp[j]) === -1) {
                                    fonts.arrayFontsFontdeck.push(arrayFontsFontdeckTemp[j]);
                                    arrayTemp.push(arrayFontsFontdeckTemp[j]);
                                } else {
                                    alert("Font:" + arrayFontsFontdeckTemp[j] + " Exists");
                                }
                            }
                            if (arrayTemp.lenght > 0) {
                                WebFontConfig = {
                                    fontdeck: {id: arrayFontsFontdeckTemp}
                                };
                                (function() {
                                    var wf = document.createElement('script');
                                    wf.src = ('https:' === document.location.protocol ? 'https' : 'http') +
                                            '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
                                    wf.type = fonts.type;
                                    wf.async = fonts.async;
                                    s.parentNode.insertBefore(wf, s);
                                })();
                            }
                            loadFont = true;
                            associateRecord();
                        }
                        returnToEditor();
                        break;
                }
                break;
            case "SIZETEXT":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.size = textArea.value;
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    maidSelect.data.size = clickX - 2 * PBW;
                }
                break;
            case "":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.lineHeight = textArea.value;
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    maidSelect.data.lineHeight = clickX - 2 * PBW;
                }
                break;
            case "ALPHA":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.alpha = Number(textArea.value) / 100;
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    maidSelect.data.alpha = (clickX - 2 * PBW) / 480;
                }
                break;
            case "PAGE":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.fullPage = textArea.value;
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    maidSelect.data.fullPage = clickX - 2 * PBW;
                }
                break;
            case "AVPAGE":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        pages[pageFocus].pageStaticAv = textArea.value;
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    pages[pageFocus].pageStaticAv = clickX - 2 * PBW;
                }
                break;
            case "REPAGE":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        pages[pageFocus].pageStaticRe = textArea.value;
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    pages[pageFocus].pageStaticRe = clickX - 2 * PBW;
                }
                break;
            case "WIDTH":
                var w = maidSelect.data.width;
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.width = textArea.value;
                        if (ratio) {
                            maidSelect.data.height = maidSelect.data.width * maidSelect.data.height / w;
                        }
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    maidSelect.data.width = clickX - 2 * PBW;
                    if (ratio) {
                        maidSelect.data.height = maidSelect.data.width * maidSelect.data.height / w;
                    }
                }
                break;
            case "HEIGHT":
                var h = maidSelect.data.height;
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.height = textArea.value;
                        if (ratio) {
                            maidSelect.data.width = maidSelect.data.height * maidSelect.data.width / h;
                        }
                        returnToEditor();
                        break;
                }
                if (clickX >= 160 && clickX <= 660) {
                    iniFormatArr = true;
                    maidSelect.data.height = clickX - 2 * PBW;
                    if (ratio) {
                        maidSelect.data.width = maidSelect.data.height * maidSelect.data.width / h;
                    }
                }
                break;
            case "INTROTEXT":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        for (var j in arrayTextAreasLan) {
                            maidSelect.data.text[arrayLan[j]] = arrayTextAreasLan[j].value;
                        }
                        returnToEditor();
                        break;
                }
                break;
            case "INTROIMG":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.img = textArea.value;
                        returnToEditor();
                        break;
                }
                break;
            case "INTROYOUTUBE":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.youtube = textArea.value;
                        returnToEditor();
                        break;
                }
                break;
            case "INTROLINK":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        maidSelect.data.fullPage = textArea.value;
                        returnToEditor();
                        break;
                }
                break;
            case "COLORPICKER":
                switch (Math.floor(clickX / PBW)) {
                    case 0:
                        iniFormatArr = false;
                        maidSelect.data.color = textArea.value;
                        returnToEditor();
                        break;
                    default:
                        iniFormatArr = true;
                        maidSelect.data.color = colorExtract(clickX, clickY);
                        break;
                }
                break;
        }
    } else if (clickY > areaH - 120 && clickY < areaH - 80) {
        var pos = Math.floor(clickX / 40);
        execMaidMenuOpt(pos);
    } else {
        if (SUBMODE ==="COLORPICKER") {
            iniFormatArr = true;
            maidSelect.data.color = colorExtract(clickX, clickY);
        } else if (SUBMODE === "FACETEXT") {
            if (clickX <= fontW) {
                var pos = -Math.floor((clickY - areaH + 120) / 40) - 1;
                iniFormatArr = false;
                maidSelect.data.face = fonts.arrayFonts[pos];
                returnToEditor();
            } else if (clickX >= fontW && clickX <= 2 * fontW) {
                var pos = -Math.floor((clickY - areaH + 120) / 40) - 1;
                iniFormatArr = false;
                if (fonts.arrayFontsGoogle[pos]) {
                    maidSelect.data.face = fonts.arrayFontsGoogle[pos];
                }
                returnToEditor();
            } else if (clickX >= 2 * fontW && clickX <= 3 * fontW) {
                var pos = -Math.floor((clickY - areaH + 120) / 40) - 1;
                iniFormatArr = false;
                if (fonts.arrayFontsTypekit[pos]) {
                    maidSelect.data.face = fonts.arrayFontsTypekit[pos];
                }
                returnToEditor();
            } else if (clickX >= 3 * fontW && clickX <= 4 * fontW) {
                var pos = -Math.floor((clickY - areaH + 120) / 40) - 1;
                iniFormatArr = false;
                if (fonts.arrayFontsAscender[pos]) {
                    maidSelect.data.face = fonts.arrayFontsAscender[pos];
                }
                returnToEditor();
            } else if (clickX >= 4 * fontW && clickX <= 5 * fontW) {
                var pos = -Math.floor((clickY - areaH + 120) / 40) - 1;
                iniFormatArr = false;
                if (fonts.arrayFontsMonotype[pos]) {
                    maidSelect.data.face = fonts.arrayFontsMonotype[pos];
                }
                returnToEditor();
            } else if (clickX >= 5 * fontW && clickX <= 6 * fontW) {
                var pos = -Math.floor((clickY - areaH + 120) / 40) - 1;
                iniFormatArr = false;
                if (fonts.arrayFontsFontdeck[pos]) {
                    maidSelect.data.face = fonts.arrayFontsFontdeck[pos];
                }
                returnToEditor();
            } else {
                returnToEditor();
            }
        }
    }
    createMaidIni(pageFocus, posBookX, 0);
    if (createMode) {

        createMode();
    }
}
function textFormatup(e) {
    iniFormatArr = false;
    e.preventDefault();
    client(e);

}
function textFormatmove(e) {
    e.preventDefault();
    client(e);
    if (iniFormatArr) {
        switch (SUBMODE) {
            case "SIZETEXT":
                if (clickX >= 160 && clickX <= 640) {
                    maidSelect.data.size = clickX - 2 * PBW;
                } else if (clickX < 160) {
                    clickX = 160;
                    maidSelect.data.size = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                break;
            case "":
                if (clickX >= 160 && clickX <= 640) {
                    maidSelect.data.lineHeight = clickX - 2 * PBW;
                    createMaidIni(pageFocus, posBookX, 0);
                } else if (clickX < 160) {
                    maidSelect.data.lineHeight = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                break;
            case "ALPHA":
                if (clickX >= 160 && clickX <= 640) {
                    maidSelect.data.alpha = (clickX - 2 * PBW) / 480;
                    createMaidIni(pageFocus, posBookX, 0);
                } else if (clickX < 160) {
                    maidSelect.data.alpha = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                    maidSelect.data.alpha = 1;
                }
                break;
            case "PAGE":
                if (clickX >= 160 && clickX <= 640) {
                    maidSelect.data.fullPage = clickX - 2 * PBW;
                } else if (clickX < 160) {
                    clickX = 160;
                    maidSelect.data.fullPage = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                break;
            case "AVPAGE":
                if (clickX >= 160 && clickX <= 640) {
                    pages[pageFocus].pageStaticAv = clickX - 2 * PBW;
                } else if (clickX < 160) {
                    clickX = 160;
                    pages[pageFocus].pageStaticAv = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                break;
            case "REPAGE":
                if (clickX >= 160 && clickX <= 640) {
                    pages[pageFocus].pageStaticRe = clickX - 2 * PBW;
                } else if (clickX < 160) {
                    clickX = 160;
                    pages[pageFocus].pageStaticRe = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                break;
            case "WIDTH":
                var w = maidSelect.data.width;
                if (clickX >= 160 && clickX <= 640) {
                    maidSelect.data.width = clickX - 2 * PBW;
                } else if (clickX < 160) {
                    clickX = 160;
                    maidSelect.data.width = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                if (ratio) {
                    maidSelect.data.height = maidSelect.data.width * maidSelect.data.height / w;
                }
                break;
            case "HEIGHT":
                var h = maidSelect.data.height;
                if (clickX >= 160 && clickX <= 640) {
                    maidSelect.data.height = clickX - 2 * PBW;
                } else if (clickX < 160) {
                    clickX = 160;
                    maidSelect.data.height = 0;
                } else if (clickX > 640) {
                    clickX = 640;
                }
                if (ratio) {
                    maidSelect.data.width = maidSelect.data.height * maidSelect.data.width / h;
                }
                break;
            case "COLORPICKER":
                maidSelect.data.color = colorExtract(clickX, clickY);
                break;
        }
        createMaidIni(pageFocus, posBookX, 0);
        createMode();

    }
}
function addColorTo() {

}
function colorExtract(clickX, clickY) {
    /*var colorSelect=document.getElementById("colorPicker");
     colorSelect.style.visibility="visible";*/
    var p = context.getImageData(clickX, clickY, 1, 1).data;
    var hex = "#" + ("000000" + rgbToHex(p[0], p[1], p[2])).slice(-6);
    return hex;

    function rgbToHex(r, g, b) {
        if (r > 255 || g > 255 || b > 255)
            throw "Invalid color component";
        return ((r << 16) | (g << 8) | b).toString(16);
    }
}
function toEMBEDCODE() {
    if (maidSelect) {
        //delForms();
    } else {
        maidSelect = Maids[pageFocus][Maids[pageFocus].length - 1];
    }
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "MAINEDITOR";
    SUBMODE = "MAINEDITOR";
    removeListeners();
    listenersList = new Array(embeddown, embedup, embedmove);
    assignListeners();
}
function drawEmbed() {
    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 80, areaW, 80);
    context.drawImage(common.toolImages.textFormatPanel[1], 0, areaH - 80);
    context.fillRect(2 * PBW, areaH - 80, areaW, 80);
    context.fillStyle = "#ffffff";
    context.font = "Bold 10px verdana ";
    context.fillText("Copia y pega el c\xf3digo que te mostramos donde quieras. Width= Indica el ancho y Height= el alto.", 100, areaH - 40);
    if (!formActiv) {

        formActiv = true;
        var formInput = document.createElement("div");
        textArea = document.createElement("textarea");
        textAreaType = 1;
        formInput.style.left = 0;
        formInput.style.top = 0;
        textArea.style.width = areaW;
        textArea.style.height = areaH - 80;
        formInput.style.overflow = "visible";
        formInput.style.position = 'absolute';
        document.body.appendChild(formInput);
        formInputCont.push(formInput);
        var form = document.createElement("form");
        textArea.style.size = areaW;
        textArea.style.type = "text";
        textArea.style.id = "text";
        formInput.appendChild(form);
        form.appendChild(textArea);
    }
    if (bookSelect !== null) {
        textArea.value = "Para incrustar \xe9ste bloc en cualquier sitio copia el siguiente c\xf3digo:\n\n<iframe  align='center' type='text/html' width='750' height='480' src='" + env + "visor.php?u=" + user + "&bloc=" + books[bookSelect]["id"] + "' frameborder='0'></iframe>\n\nPor otra parte si quieres \xe9ste es el enlace directo al bloc; puedess emplearlo para envi\xe1rselo a quien t\xfa desees:\n\n" + env + "visor.php?u=" + user + "&bloc=" + books[bookSelect]["id"] + "\n\nSi lo que necesitas es un link hacia tu bloc copia el siguiente c\xf3digo:\n\n<a href='" + env + "visor.php?u=" + user + "&bloc=" + books[bookSelect]["id"] + "' target='_blank'><img src='" + env + "img/maidpress-ico-link.png" + "' width='64' height='64' border='0'/></a>";
    } else {
        textArea.value = "Para incrustar \xe9ste bloc en cualquier sitio copia el siguiente c\xf3digo:\n\n<iframe  align='center' type='text/html' width='750' height='480' src='" + env + "visor.php?u=" + user + "&bloc=' frameborder='0'></iframe>\n\nPor otra parte si quieres \xe9ste es el enlace directo al bloc; puedes emplearlo para envi\xe1rselo a quien t\xfa desees:\n\n" + env + "visor.php?u=" + user + "&bloc=" + "\n\nSi lo que necesitas es un link hacia tu bloc copia el siguiente c\xf3digo:\n\n<a href='" + env + "visor.php?u=" + user + "&bloc=' target='_blank'><img src='" + env + "img/maidpress-ico-link.png" + "' width='23' height='50' border='0' /></a>";
    }

}
function embeddown(e) {
    e.preventDefault();
    client(e);
    if (clickY >= areaH - 80) {
        if (clickX < 80) {
            endMove = true;
            //delForms();
            returnToEditor();
        }
    }
}
function embedup(e) {
    e.preventDefault();
    detect = null;
    detectMove = false;
}
function embedmove(e) {
}
//menuAsoc
function menuAsoc() {
    OLDSUBMODE = "MENUASOC";
    SUBMODE = "MENUASOC";
    removeListeners();
    listenersList = new Array(asocdown, asocup, asocmove);
    assignListeners();
    createMode = drawMenuAsoc;
    createMaidIni(pageFocus, posBookX, 0);
    createMode();
}
function asocdown(e) {
    e.preventDefault();
    client(e);
    if (SUBMODE == "MENUASOC") {
        if (clickY >= areaH - 80) {
            if (clickX < 80) {
                returnToEditor();
            } else if (clickX < 160 && clickX > 80) {
                SUBMODE = "ASSOCIATE";
                pastePageAsoc();
            } else if (clickX < 240 && clickX > 160) {
                SUBMODE = "ASSOCIATE";
                desassociatePage();
            } else if (clickX < 320 && clickX > 240) {
                copyPageAsoc();
            }
        }
    } else if (SUBMODE == "ASSOCIATE") {

    }
}
function asocup(e) {
    e.preventDefault();
    detect = null;
    detectMove = false;
}
function asocmove(e) {
}
function drawMenuAsoc() {
    context.drawImage(common.toolImages.asocPanel[1], 0, areaH - 80);
    if (!formActiv) {

        formActiv = true;
        var formInput = document.createElement("div");
        if (document.createElement("input").webkitSpeech == undefined) {
            textArea = document.createElement("textArea");
            textArea.className = "textareaform";
        } else {
            textArea = document.createElement("input");
            textArea.className = "textareaform";
            textArea.webkitSpeech = "x-webkit-speech";
            textArea.setAttribute('onwebkitspeechchange', 'onChange(this.value)');
        }
        textAreaType = 1;
        formInput.style.left = 0;
        formInput.style.top = 0;
        textArea.style.width = areaW;
        textArea.style.height = areaH - 80;
        formInput.style.overflow = "visible";
        formInput.style.position = 'absolute';
        //formInput.style.background="green";
        document.body.appendChild(formInput);
        formInputCont.push(formInput);
        var form = document.createElement("form");

        textArea.style.size = areaW;
        textArea.style.type = "text";
        textArea.style.id = "text";
        formInput.appendChild(form);
        form.appendChild(textArea);
        valueSpeech = "text";
        if (pages[pageFocus]["associate"] != "") {
            textArea.value = pages[pageFocus]["associate"];
        } else {
            if (root.indexOf("http://") == -1) {
                textArea.value = "la página original es: " + env + root + "xml/" + pages[pageFocus]["id"];
            } else {
                textArea.value = "la página original es: " + root + "xml/" + pages[pageFocus]["id"];
            }
        }
    }
}
//create uploader button
var contUploader;
var filePicture;
//<input type="file" accept="image/*;capture=filesystem"/>
function createUploaderButton() {
    var form = document.createElement("form");
    contUploader = document.createElement("div");
    contUploader.id = "contUploader";
    contUploader.style.overflow = "hidden";
    contUploader.style.position = 'absolute';
    contUploader.style.left = 0;
    contUploader.style.top = 0;
    document.body.appendChild(contUploader);
    filePicture = document.createElement("INPUT");
    filePicture.type = 'file';
    contUploader.appendChild(form);
    form.appendChild(filePicture);
    filePicture.addEventListener('change', handleFileSelect, false);
    contUploader.style.visibility = "hidden";
}

function subirFOTO() {

    filePicture.click();
}

function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object
    // Loop through the FileList and render image files as thumbnails.
    for (var i = 0, f; f = files[i]; i++) {
        // Only process image files.
        if (!f.type.match('image.*')) {
            continue;
        }
        var reader = new FileReader();
        reader.onloadend = this.onReaderLoadEnd;
        // Closure to capture the file information.
        reader.onload = (function(theFile) {
            return function(e) {
                // Render thumbnail.
                var span = document.createElement('span');
                span.innerHTML = ['<img class="thumb" src="', e.target.result,
                    '" title="', escape(theFile.name), '"/>'].join('');
                if (bookSelect) {
                    alert(bookSelect);
                    dropURL = books[bookSelect]["id"] + "_" + Maids[pageFocus].length + "_" + pages[pageFocus]["id"] + "_" + theFile.name;
                } else {
                    alert("HOME");
                    dropURL = "HOME_" + Maids[pageFocus].length + "_" + pages[pageFocus]["id"] + "_" + theFile.name;
                }
                /*ext = theFile.name.split(".");
                if (theFile.size > 800000) {
                    alert("El tamaño de la imagen es demasiado alto, más de 800k. Reduce su tamaño y vuelve a intentarlo");
                } else if (theFile.size <= 400000 || theFile.size > 200000) {
                    alert("El tamaño de la imagen es alto, más de 200k. Puede tardar un poco en ser subida");
                    processImage(theFile);
                } else {
                    processImage(theFile);
                }*/
               
            alert("La subida de imágenes puede tardar, se paciente");
                var extColl = dropURL.split(".");
                ext=extColl[extColl.length-1];
                alert(ext);
                file=files[0];
                alert(file);
                processImage(file);
                
                /*if(theFile.size>){
                 processImage(theFile);
                 }*/
            };
        })(f);
        // Read in the image file as a data URL.
        reader.readAsDataURL(f);
    }
}
//submenus options
function drawOptionsAddMaid() {
    context.save();
    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 120, areaW, 40);
    if (Maids[pageFocus].length > 0) {
        if (Maids[pageFocus][0]["type"] == "genericLoaderImgFull/generic") {
            context.fillStyle = "#07aaff";
            context.fillRect(80, areaH - 120, 40, 40);
        }
        if (Maids[pageFocus][0]["type"] == "genericBG/generic") {
            context.fillStyle = "#07aaff";
            context.fillRect(40, areaH - 120, 40, 40);
        }
    }
    if (Maids[pageFocus].length > 1) {
        if (Maids[pageFocus][1]["type"] == "genericLoaderImgFull/generic") {
            context.fillStyle = "#07aaff";
            context.fillRect(80, areaH - 120, 40, 40);
        }
        if (Maids[pageFocus][1]["type"] == "genericBG/generic") {
            context.fillStyle = "#07aaff";
            context.fillRect(40, areaH - 120, 40, 40);
        }
    }
    if (loadPermission == 1) {
        context.fillRect(360 + posBookX, areaH - 120, 40, 40);
    }
    context.drawImage(common.toolImages.directAddMaid[1], 0, areaH - 120);
    context.restore();

}
function drawOptionsFont() {
    context.save();
    context.fillStyle = "#1a1a1a";
    context.fillRect(posBookX, areaH - 120, areaW, 40);
    context.fillStyle = maidSelect.data.color.substring(2);
    context.fillRect(404 + posBookX, areaH - 116, 32, 32);
    context.fillStyle = "#07aaff";
    context.font = "normal 12px arial ";
    context.textAlign = "center";
    if (maidSelect.data.bold == "1") {
        context.fillRect(120 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.italic == "1") {
        context.fillRect(160 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.underlined == "1") {
        context.fillRect(200 + posBookX, areaH - 120, 40, 40);
    }
    context.font = "Bold 10px Verdana ";
    context.fillText(maidSelect.data.size, 250 + posBookX, areaH - 100);
    if (maidSelect.data.align == "left") {
        context.fillRect(280 + posBookX, areaH - 120, 40, 40);
    } else if (maidSelect.data.align == "center") {
        context.fillRect(320 + posBookX, areaH - 120, 40, 40);
    } else {
        context.fillRect(360 + posBookX, areaH - 120, 40, 40);
    }
    if (rotation) {
        context.fillStyle = "#07aaff";
        context.fillRect(520 + posBookX, areaH - 120, 40, 40);
        context.fillStyle = "#ffffff";
    } else {
        context.fillStyle = "#07aaff";
    }
    context.fillText(Math.floor(maidSelect.data.relRot) + "\xba", 540 + posBookX, areaH - 100);
    if (maidSelect.data["fullPage"]) {
        if (maidSelect.data["fullPage"] == "true") {
            context.fillRect(720 + posBookX, areaH - 120, 40, 40);
        } else if (Number(maidSelect.data["fullPage"]) >= 0) {
            context.fillRect(760 + posBookX, areaH - 120, 40, 40);
            context.fillStyle = "#ffffff";
            context.fillText(maidSelect.data.fullPage, 780 + posBookX, areaH - 100);
        } else if (maidSelect.data.fullPage.indexOf("http://") != -1) {
            context.fillRect(800 + posBookX, areaH - 120, 40, 40);
        }
    }
    if (Math.abs(maidSelect.data.relBottom) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(840 + posBookX, areaH - 120, 40, 40);
    }
    if (Math.abs(maidSelect.data.relRight) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(880 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerH > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(920 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerV > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(960 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignY > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(1000 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignX > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(1040 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.mode == "static") {
        context.fillStyle = "#07aaff";
        context.fillRect(1080 + posBookX, areaH - 120, 40, 40);
        context.fillStyle = "#07aaff";
        context.fillText(pages[pageFocus].pageStaticRe, 1140 + posBookX, areaH - 110);
        context.fillText(pages[pageFocus].pageStaticAv, 1180 + posBookX, areaH - 110);
    }
    context.fillStyle = "#07aaff";
    context.fillText(maidSelect.data.lineHeight, 460 + posBookX, areaH - 100);
    context.fillText(Math.floor(maidSelect.data.alpha * 100), 493 + posBookX, areaH - 100);
    context.textAlign = "left";
    context.fillText(maidSelect.data.face, 573 + posBookX, areaH - 100);
    context.drawImage(common.toolImages.directFormatText[1], posBookX, areaH - 120);
    context.restore();
}
function drawOptionsImg() {
    context.save();
    context.fillStyle = "#1a1a1a";
    context.fillRect(posBookX, areaH - 120, areaW, 40);
    context.fillStyle = "#07aaff";
    context.font = "normal 12px arial ";
    context.textAlign = "center";
    if (maidSelect.data["fullPage"]) {
        if (maidSelect.data["fullPage"] == "true") {
            context.fillRect(120 + posBookX, areaH - 120, 40, 40);
        } else if (Number(maidSelect.data["fullPage"]) >= 0) {
            context.fillRect(160 + posBookX, areaH - 120, 40, 40);
            context.fillStyle = "#ffffff";
            context.fillText(maidSelect.data.fullPage, 180 + posBookX, areaH - 100);
        } else if (maidSelect.data.fullPage.indexOf("http://") != -1) {
            context.fillRect(200 + posBookX, areaH - 120, 40, 40);
        }
    }
    if (ratio) {
        context.fillStyle = "#07aaff";
        context.fillRect(320 + posBookX, areaH - 120, 40, 40);
    }
    if (rotation) {
        context.fillStyle = "#07aaff";
        context.fillRect(440 + posBookX, areaH - 120, 40, 40);
        context.fillStyle = "#ffffff";
    } else {
        context.fillStyle = "#07aaff";
    }
    context.fillText(Math.floor(maidSelect.data.relRot) + "\xba", 460 + posBookX, areaH - 100);
    if (Math.abs(maidSelect.data.relBottom) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(560 + posBookX, areaH - 120, 40, 40);
    }
    if (Math.abs(maidSelect.data.relRight) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(600 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerH > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(640 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerV > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(680 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignY > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(720 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignX > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(760 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.mode == "static") {
        context.fillStyle = "#07aaff";
        context.fillRect(800 + posBookX, areaH - 120, 40, 40);
        context.fillStyle = "#07aaff";
        context.fillText(pages[pageFocus].pageStaticRe, 860 + posBookX, areaH - 110);
        context.fillText(pages[pageFocus].pageStaticAv, 900 + posBookX, areaH - 110);
    }


    context.fillStyle = "#07aaff";
    context.fillText(Math.floor(maidSelect.data.width), 300 + posBookX, areaH - 97);
    context.fillText(Math.floor(maidSelect.data.height), 380 + posBookX, areaH - 97);
    context.fillText(Math.floor(maidSelect.data.alpha * 100), 500 + posBookX, areaH - 100);
    context.drawImage(common.toolImages.directFormatImg[1], posBookX, areaH - 120);
    if (SUBMODE == "PAGE") {
        if (numPages > maidSelect.data.fullPage) {
            drawRect(120 - 10, areaH - 231 - 10, areaW * 100 / areaH + 20, 120, "#1b1b1b", 1, false);
            createMiniPage(maidSelect.data.fullPage, 120, areaH - 231);
        }
    }
    context.restore();
}
function drawOptionsRect() {
    context.save();
    context.fillStyle = "#1a1a1a";
    context.font = "normal 12px arial ";
    context.textAlign = "center";
    context.fillRect(posBookX, areaH - 120, areaW, 40);
    if (ratio) {
        context.fillStyle = "#07aaff";
        context.fillRect(160 + posBookX, areaH - 120, 40, 40);
    }
    if (rotation) {
        context.fillStyle = "#07aaff";
        context.fillRect(280 + posBookX, areaH - 120, 40, 40);
        context.fillStyle = "#ffffff";
    } else {
        context.fillStyle = "#07aaff";
    }
    context.fillText(Math.floor(maidSelect.data.relRot) + "\xba", 300 + posBookX, areaH - 100);
    if (Math.abs(maidSelect.data.relBottom) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(400 + posBookX, areaH - 120, 40, 40);
    }
    if (Math.abs(maidSelect.data.relRight) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(440 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerH > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(480 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerV > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(520 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignY > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(560 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignX > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(600 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.adTop == "true") {
        context.fillStyle = "#07aaff";
        context.fillRect(640 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.adBottom == "true") {
        context.fillStyle = "#07aaff";
        context.fillRect(680 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.adLeft == "true") {
        context.fillStyle = "#07aaff";
        context.fillRect(720 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.adRight == "true") {
        context.fillStyle = "#07aaff";
        context.fillRect(760 + posBookX, areaH - 120, 40, 40);
    }
    context.fillStyle = "#07aaff";
    context.fillText(Math.floor(maidSelect.data.width), 140 + posBookX, areaH - 97);
    context.fillText(Math.floor(maidSelect.data.height), 220 + posBookX, areaH - 97);
    context.fillText(Math.floor(maidSelect.data.alpha * 100), 340 + posBookX, areaH - 100);
    context.drawImage(common.toolImages.directFormatRect[1], posBookX, areaH - 120);
    context.fillStyle = maidSelect.data.color.substring(2);
    context.fillRect(364 + posBookX, areaH - 116, 32, 32);
    context.restore();

}
function drawOptionsBGImg() {
    context.save();
    context.fillStyle = "#1a1a1a";
    context.fillRect(posBookX, areaH - 120, areaW, 40);
    if (maidSelect.data["full"] == "true") {
        context.fillStyle = "#07aaff";
        context.fillRect(120 + posBookX, areaH - 120, 40, 40);
    }
    context.font = "normal 12px arial ";
    context.textAlign = "center";
    context.fillStyle = "#07aaff";
    context.fillText(Math.floor(maidSelect.data.alpha * 100), 180 + posBookX, areaH - 97);
    context.drawImage(common.toolImages.directFormatBGImg[1], posBookX, areaH - 120);
    context.restore();

}
function drawOptionsYoutube() {
    context.save();
    context.fillStyle = "#1a1a1a";
    context.fillRect(posBookX, areaH - 120, areaW, 40);
    context.fillStyle = "#07aaff";
    context.font = "normal 12px arial ";
    context.textAlign = "center";
    if (ratio) {
        context.fillStyle = "#07aaff";
        context.fillRect(200 + posBookX, areaH - 120, 40, 40);
    }
    if (Math.abs(maidSelect.data.relBottom) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(320 + posBookX, areaH - 120, 40, 40);
    }
    if (Math.abs(maidSelect.data.relRight) > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(360 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerH > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(400 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.centerV > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(440 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignY > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(480 + posBookX, areaH - 120, 40, 40);
    }
    if (maidSelect.data.absAlignX > 0) {
        context.fillStyle = "#07aaff";
        context.fillRect(520 + posBookX, areaH - 120, 40, 40);
    }
    context.fillStyle = "#07aaff";
    context.fillText(Math.floor(maidSelect.data.width), 180 + posBookX, areaH - 97);
    context.fillText(Math.floor(maidSelect.data.height), 260 + posBookX, areaH - 97);
    context.drawImage(common.toolImages.directPanelYoutube[1], posBookX, areaH - 120);
    context.restore();
}
function execMaidMenuOpt(pos) {
    //delForms();
    switch (maidSelect["type"]) {
        case "genericFont/generic":
            switch (pos) {
                case 0://copy format
                    copyFormat();
                    break
                case 1://paste format
                    pasteFormat();
                    break;
                case 2:
                    createMode = drawMenuTextSize;
                    toFormatText(false, "INTROTEXT");
                    break;
                case 3://bold
                    if (maidSelect.data.bold == "1") {
                        maidSelect.data.bold = "0";
                    } else {
                        maidSelect.data.bold = "1";
                    }
                    break;
                case 4://itaalic
                    if (maidSelect.data.italic == "1") {
                        maidSelect.data.italic = "0";
                    } else {
                        maidSelect.data.italic = "1";
                    }
                    break;
                case 5://underline
                    if (maidSelect.data.underlined == "1") {
                        maidSelect.data.underlined = "0";
                    } else {
                        maidSelect.data.underlined = "1";
                    }
                    break;
                case 6://size
                    createMode = drawMenuTextSize;
                    toFormatText(false, "SIZETEXT");
                    break;
                case 7://left align
                    maidSelect.data.align = "left";
                    break;
                case 8://center align
                    maidSelect.data.align = "center";
                    break;
                case 9://right align
                    maidSelect.data.align = "right";
                    break;
                case 10://color picker
                    createMode = drawMenuTextSize;
                    toFormatText(false, "COLORPICKER");
                    break;
                case 11://interline
                    createMode = drawMenuTextSize;
                    toFormatText(false, "");
                    break;
                case 12://alpha
                    createMode = drawMenuTextSize;
                    toFormatText(false, "ALPHA");
                    break;
                case 13://interline
                    rotation = !rotation
                    break;
                case 14://face text
                    createMode = drawMenuTextFace;
                    toFormatText(false, "FACETEXT");
                    break;
                case 15://face text
                    createMode = drawMenuTextFace;
                    toFormatText(false, "FACETEXT");
                    break;
                case 16://face text
                    createMode = drawMenuTextFace;
                    toFormatText(false, "FACETEXT");
                    break;
                case 18://full text
                    alert("Funcionalidad todavía no disponible!!!");
                    /*if(!maidSelect.data.fullPage || maidSelect.data.fullPage=="false" || maidSelect.data.fullPage=="undefined" || maidSelect.data.fullPage!="true"){
                     maidSelect.data.fullPage="true";
                     }else{
                     maidSelect.data.fullPage="false";
                     }*/
                    break;
                case 19://img to page
                    createMode = drawMenuTextSize;
                    if (!maidSelect.data.fullPage || maidSelect.data.fullPage == "false" || maidSelect.data.fullPage == "undefined" || maidSelect.data.fullPage == "true") {
                        maidSelect.data.fullPage = 0;
                    }
                    toFormatText(false, "PAGE");
                    break;
                case 20://img to link
                    createMode = drawMenuTextSize;
                    toFormatText(false, "INTROLINK");
                    break;
                case 21://rel bottom
                    if (!(Math.abs(maidSelect.data.relBottom) > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.relBottom = areaH - Math.floor((areaH - 768) / 2) - maidSelect.y;
                    } else {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                    }
                    break;
                case 22://rel right
                    if (!(Math.abs(maidSelect.data.relRight) > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - Math.floor((areaW - 1024) / 2) - maidSelect.x;
                    } else {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                    }
                    break;
                case 23://center horizontal
                    if (!(maidSelect.data.centerH > 0)) {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.centerH = 1;
                    } else {
                        maidSelect.data.centerH = null;

                    }
                    break;
                case 24://center vertical
                    if (!(maidSelect.data.centerV > 0)) {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.centerV = 1;
                    } else {
                        maidSelect.data.centerV = null;
                    }
                    break;
                case 25://vertical absolut
                    if (!(maidSelect.data.absAlignY > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.absAlignY = 1;
                        maidSelect.data.relBottom = areaH - maidSelect.y;
                    } else {
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.relBottom = null;
                    }
                    break;
                case 26://horizontal absolut
                    if (!(maidSelect.data.absAlignX > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - maidSelect.x;
                        maidSelect.data.absAlignX = 1;
                    } else {
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.relRight = null;
                    }
                    break;
                case 27://mode web mode diapo
                    if (maidSelect.data.mode != "static") {
                        maidSelect.data.mode = "static";
                    } else {
                        maidSelect.data.mode = "";
                    }
                    break;
                case 28://decide back
                    createMode = drawMenuTextSize;
                    if (!pages[pageFocus].pageStaticRe || pages[pageFocus].pageStaticRe == "false" || pages[pageFocus].pageStaticRe == "undefined" || pages[pageFocus].pageStaticRe == "true") {
                        pages[pageFocus].pageStaticRe = 0;
                    }
                    toFormatText(false, "REPAGE");
                    break;
                case 29://decide end
                    createMode = drawMenuTextSize;
                    if (!pages[pageFocus].pageStaticAv || pages[pageFocus].pageStaticAv == "false" || pages[pageFocus].pageStaticAv == "undefined" || pages[pageFocus].pageStaticAv == "true") {
                        pages[pageFocus].pageStaticAv = 0;
                    }
                    toFormatText(false, "AVPAGE");
                    break;
                default:

                    break;
            }
            break;
        case "genericLoaderImg/generic":
            switch (pos) {
                case 0://copy format
                    copyFormatImg();
                    break
                case 1://paste format
                    pasteFormatImg();
                    break;
                case 2:
                    createMode = drawMenuTextSize;
                    toFormatText(false, "INTROIMG");
                    break;
                case 3://img full
                    if (!maidSelect.data.fullPage || maidSelect.data.fullPage == "false" || maidSelect.data.fullPage == "undefined" || maidSelect.data.fullPage != "true") {
                        maidSelect.data.fullPage = "true";
                    } else {
                        maidSelect.data.fullPage = "false";
                    }
                    break;
                case 4://img to page
                    createMode = drawMenuTextSize;
                    if (!maidSelect.data.fullPage || maidSelect.data.fullPage == "false" || maidSelect.data.fullPage == "undefined" || maidSelect.data.fullPage == "true") {
                        maidSelect.data.fullPage = 0;
                    }
                    toFormatText(false, "PAGE");
                    break;
                case 5://img to link
                    createMode = drawMenuTextSize;
                    toFormatText(false, "INTROLINK");
                    break;
                case 6://width
                    createMode = drawMenuTextSize;
                    toFormatText(false, "WIDTH");
                    break;
                case 7://width
                    createMode = drawMenuTextSize;
                    toFormatText(false, "WIDTH");
                    break;
                case 8://keep ratio
                    ratio = !ratio;
                    break;
                case 9://height
                    createMode = drawMenuTextSize;
                    toFormatText(false, "HEIGHT");
                    break;
                case 10://height
                    createMode = drawMenuTextSize;
                    toFormatText(false, "HEIGHT");
                    break;
                case 11://interline
                    rotation = !rotation
                    break;
                case 12://alpha
                    createMode = drawMenuTextSize;
                    toFormatText(false, "ALPHA");
                    break;
                case 13://get original dim
                    directEditor(originalMaid);
                    break;
                case 14://rel bottom
                    if (!(Math.abs(maidSelect.data.relBottom) > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.relBottom = areaH - Math.floor((areaH - 768) / 2) - maidSelect.y;

                    } else {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                    }
                    break;
                case 15://rel right
                    if (!(Math.abs(maidSelect.data.relRight) > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - Math.floor((areaW - 1024) / 2) - maidSelect.x;
                    } else {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                    }
                    break;
                case 16://center horizontal
                    if (!(maidSelect.data.centerH > 0)) {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.centerH = 1;
                    } else {
                        maidSelect.data.centerH = null;
                    }
                    break;
                case 17://center vertical
                    if (!(maidSelect.data.centerV > 0)) {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.centerV = 1;
                    } else {
                        maidSelect.data.centerV = null;
                    }
                    break;
                case 18://vertical absolut
                    if (!(maidSelect.data.absAlignY > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.absAlignY = 1;
                        maidSelect.data.relBottom = areaH - maidSelect.y;
                    } else {
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.relBottom = null;
                    }
                    break;
                case 19://horizontal absolut
                    if (!(maidSelect.data.absAlignX > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - maidSelect.x;
                        maidSelect.data.absAlignX = 1;
                    } else {
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.relRight = null;
                    }
                    break;
                case 20://decide Mode wev mode diapo
                    if (maidSelect.data.mode != "static") {
                        maidSelect.data.mode = "static";
                    } else {
                        maidSelect.data.mode = "";
                    }
                    break;
                case 21://decide back
                    createMode = drawMenuTextSize;
                    if (!pages[pageFocus].pageStaticRe || pages[pageFocus].pageStaticRe == "false" || pages[pageFocus].pageStaticRe == "undefined" || pages[pageFocus].pageStaticRe == "true") {
                        pages[pageFocus].pageStaticRe = 0;
                    }
                    toFormatText(false, "REPAGE");
                    break;
                case 22://decide end
                    createMode = drawMenuTextSize;
                    if (!pages[pageFocus].pageStaticAv || pages[pageFocus].pageStaticAv == "false" || pages[pageFocus].pageStaticAv == "undefined" || pages[pageFocus].pageStaticAv == "true") {
                        pages[pageFocus].pageStaticAv = 0;
                    }
                    toFormatText(false, "AVPAGE");
                    break;
                default:

                    break;
            }
            break;
        case "genericLoaderImgFull/generic":
            switch (pos) {
                case 0://copy format
                    copyFormatImg();
                    break
                case 1://paste format
                    pasteFormatImg();
                    break;
                case 2:
                    createMode = drawMenuTextSize;
                    toFormatText(false, "INTROIMG");
                    break;
                case 3://img full
                    if (maidSelect.data.full == "true") {
                        maidSelect.data.full = "false";
                    } else {
                        maidSelect.data.full = "true";
                    }
                    break;
                case 4://alpha
                    createMode = drawMenuTextSize;
                    toFormatText(false, "ALPHA");
                    break;
                default:

                    break;
            }
            break;
        case "genericYouTube/generic":
            switch (pos) {
                case 0://copy format
                    copyFormatImg();
                    break
                case 1://paste format
                    pasteFormatImg();
                    break;
                case 2:
                    createMode = drawMenuTextSize;
                    toFormatText(false, "INTROYOUTUBE");
                    break;
                case 3://width
                    createMode = drawMenuTextSize;
                    toFormatText(false, "WIDTH");
                    break;
                case 4://width
                    createMode = drawMenuTextSize;
                    toFormatText(false, "WIDTH");
                    break;
                case 5://keep ratio
                    ratio = !ratio;
                    break;
                case 6://height
                    createMode = drawMenuTextSize;
                    toFormatText(false, "HEIGHT");
                    break;
                case 7://height
                    createMode = drawMenuTextSize;
                    toFormatText(false, "HEIGHT");
                    break;
                case 8://rel bottom
                    if (!(Math.abs(maidSelect.data.relBottom) > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.relBottom = areaH - Math.floor((areaH - 768) / 2) - maidSelect.y;
                    } else {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                    }
                    break;
                case 9://rel right
                    if (!(Math.abs(maidSelect.data.relRight) > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - Math.floor((areaW - 1024) / 2) - maidSelect.x;
                    } else {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                    }
                    break;
                case 10://center horizontal
                    if (!(maidSelect.data.centerH > 0)) {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.centerH = 1;
                    } else {
                        maidSelect.data.centerH = null;
                    }
                    break;
                case 11://center vertical
                    if (!(maidSelect.data.centerV > 0)) {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.centerV = 1;
                    } else {
                        maidSelect.data.centerV = null;
                    }
                    break;
                case 12://vertical absolut
                    if (!(maidSelect.data.absAlignY > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.absAlignY = 1;
                        maidSelect.data.relBottom = areaH - maidSelect.y;
                    } else {
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.relBottom = null;
                    }
                    break;
                case 13://horizontal absolut
                    if (!(maidSelect.data.absAlignX > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - maidSelect.x;
                        maidSelect.data.absAlignX = 1;
                    } else {
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.relRight = null;
                    }
                    break;
                default:

                    break;
            }
            break;
        case "generic/generic":
            switch (pos) {
                case 0://copy format
                    copyFormatImg();
                    break
                case 1://paste format
                    pasteFormatImg();
                    break;
                case 2://width
                    createMode = drawMenuTextSize;
                    toFormatText(false, "WIDTH");
                    break;
                case 3://width
                    createMode = drawMenuTextSize;
                    toFormatText(false, "WIDTH");
                    break;
                case 4://keep ratio
                    ratio = !ratio;
                    break;
                case 5://height
                    createMode = drawMenuTextSize;
                    toFormatText(false, "HEIGHT");
                    break;
                case 6://height
                    createMode = drawMenuTextSize;
                    toFormatText(false, "HEIGHT");
                    break;
                case 7://ROTATION
                    rotation = !rotation;
                    break;
                case 8://alpha
                    createMode = drawMenuTextSize;
                    toFormatText(false, "ALPHA");
                    break;
                case 9://color picker
                    createMode = drawMenuTextSize;
                    toFormatText(false, "COLORPICKER");
                    break;
                case 10://rel bottom
                    if (!(Math.abs(maidSelect.data.relBottom) > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.relBottom = areaH - Math.floor((areaH - 768) / 2) - maidSelect.y;
                    } else {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                    }
                    break;
                case 11://rel right
                    if (!(Math.abs(maidSelect.data.relRight) > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - Math.floor((areaW - 1024) / 2) - maidSelect.x;
                    } else {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                    }
                    break;
                case 12://center horizontal
                    if (!(maidSelect.data.centerH > 0)) {
                        maidSelect.data.relRight = null;
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.centerH = 1;
                    } else {
                        maidSelect.data.centerH = null;
                    }
                    break;
                case 13://center vertical
                    if (!(maidSelect.data.centerV > 0)) {
                        maidSelect.data.relBottom = null;
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.centerV = 1;
                    } else {
                        maidSelect.data.centerV = null;
                    }
                    break;
                case 14://vertical absolut
                    if (!(maidSelect.data.absAlignY > 0)) {
                        maidSelect.data.centerV = null;
                        maidSelect.data.absAlignY = 1;
                        maidSelect.data.relBottom = areaH - maidSelect.y;
                    } else {
                        maidSelect.data.absAlignY = null;
                        maidSelect.data.relBottom = null;
                    }
                    break;
                case 15://horizontal absolut
                    if (!(maidSelect.data.absAlignX > 0)) {
                        maidSelect.data.centerH = null;
                        maidSelect.data.relRight = areaW - maidSelect.x;
                        maidSelect.data.absAlignX = 1;
                    } else {
                        maidSelect.data.absAlignX = null;
                        maidSelect.data.relRight = null;
                    }
                    break;
                case 16://rect to top
                    if (maidSelect.data.adTop == "false") {
                        maidSelect.data.adTop = "true";
                        maidSelect.x = 0;
                        maidSelect.y = 0;
                    } else {
                        maidSelect.data.adTop = "false";

                    }
                    break;
                case 17://rect to bottom
                    if (maidSelect.data.adBottom == "false") {
                        maidSelect.data.adBottom = "true";
                        maidSelect.x = 0;
                        maidSelect.y = maidSelect.y - maidSelect.data.height;
                    } else {
                        maidSelect.data.adBottom = "false";
                    }
                    break;
                case 18://rect to Left
                    if (maidSelect.data.adLeft == "false") {
                        maidSelect.data.adLeft = "true";
                    } else {
                        maidSelect.data.adLeft = "false";
                    }
                    break;
                case 19://rect to Right
                    if (maidSelect.data.adRight == "false") {
                        maidSelect.data.adRight = "true";
                    } else {
                        maidSelect.data.adRight = "false";
                    }
                    break;

                default:
                    break;
            }
            break;
        default:
            SUBMODE = "DIRECTEDITOR";
            switch (pos) {
                case 0:

                    break
                case 1:
                    addBgColor();
                    break;
                case 2:
                    addBgImg();
                    break;
                case 3:
                    addImg();
                    break;
                case 4:
                    addText();
                    break;
                case 5:
                    addShape();
                    break;
                case 6:
                    addYoutube();
                    break;
                case 7:
                    addVideo();
                    break;
                case 9:
                    if (loadPermission == 1) {
                        loadPermission = 2;
                        drawOptionsAddMaid();
                        alert("BLOQUEADA !!!");
                    } else {
                        alert("DESBLOQUEADA !!!");
                        loadPermission = 1;
                        drawOptionsAddMaid();

                    }
                    break;
                default:
                    break;
            }
            break;

    }
}
var format = new Object();
function copyFormat() {
    format.face = maidSelect["data"]["face"];
    format.size = maidSelect["data"]["size"];
    format.bold = maidSelect["data"]["bold"];
    format.italic = maidSelect["data"]["italic"];
    format.color = maidSelect["data"]["color"];
    format.lineHeight = maidSelect["data"]["lineHeight"];
    format.align = maidSelect["data"]["align"];
    format.underlined = maidSelect["data"]["underlined"];
}
function pasteFormat() {
    maidSelect["data"]["face"] = format.face;
    maidSelect["data"]["size"] = format.size;
    maidSelect["data"]["bold"] = format.bold;
    maidSelect["data"]["italic"] = format.italic;
    maidSelect["data"]["color"] = format.color;
    maidSelect["data"]["lineHeight"] = format.lineHeight;
    maidSelect["data"]["align"] = format.align;
    maidSelect["data"]["underlined"] = format.underlined;
    createMaidIni(pageFocus, posBookX, 0);

}
var formatImg;
function copyFormatImg() {
    formatImg = maidSelect["data"];
}
function pasteFormatImg() {
    var img = maidSelect["data"]["img"];
    var goLink = maidSelect["data"]["link"];
    for (var j in formatImg) {
        maidSelect["data"][j] = formatImg[j];
    }
    maidSelect["data"]["img"] = img;
    maidSelect["data"]["link"] = goLink;
}
//keyboard
document.onkeypress = function(e) {

    e = e || event;
    if (!formActiv) {
        delForms();
        var chr = getChar(e);
    }
    switch (chr) {
        case ("m"):
            if (MODE == "VISOR") {
                navigationMode = !navigationMode;
                createMaidIni(pageFocus, 0, 0);
            }
            break;
        case ("e"):
            if (permission != 2) {
                if (MODE == "VISOR") {
                    cleanVideos();
                    toEDITOR();
                    createMaidIni(pageFocus, 0, 0);
                    context.drawImage(common.toolImages.recordPB[1], 0, areaH - 80);
                } else {
                    toMAIN();
                }
            }
            break;
        case ("b"):
            cleanVideos();
            if (permission != 2) {
                delForms();
                if (SUBMODE != "BOOKS") {
                    if (numBooks == 0) {
                        alert("You do not have edited blocs");
                    } else {
                        endMove = false;
                        cleanVideos();
                        //go books
                        if (numBooks == 0) {
                            alert("You do not have edited blocs");
                        } else {
                            Offsset = 100;
                            tween(theCanvas, "fade", {alpha: 0}, velFade, toBOOKS, Quad_easeInOut, "VISOR", execCreateMaidIni);
                        }
                    }
                } else {
                    OLDSUBMODE = "MAIN";
                    SUBMODE = "MAIN";
                    posBookX = 0;
                    posBookXAv = 0;
                    clearInterval(showPagesTween);
                    if (createMode) {
                        createMode();
                        createMode = null;
                    } else {
                        createMaidIni(pageFocus, posBookX, 0);
                    }
                    toMAIN();
                }
            }
            break;
        case ("p"):
            cleanVideos();
            if (SUBMODE != "PAGES") {
                toPAGES();
                showPages();
            } else {
                clearInterval(showPagesTween);
                posBookX = 200;
                posBookXAv = 200;
                endMove = false;
                showPagesTween = setInterval(hidePages, 33);
                toMAIN();
            }
            break;
        case ("r"):
            refreshPage();
            break;
        case ("c"):
            if (permission != 2) {
                if (maidSelect) {
                    directEditor(copyMaid);
                } else {
                    alert("No Maid Selected to Copy");
                }
            }
            break;
        case ("v"):
            if (permission != 2) {
                if (maidCopy) {
                    directEditor(pasteMaid);
                } else {
                    alert("No Maid to Paste");
                }
                break;
            }
        case ("d"):
            if (permission != 2) {
                if (maidSelect) {
                    directEditor(duplicateMaid);
                } else {
                    alert("No Maid Selected to Duplicate");
                }
            }
            break;
        case ("x"):
            if (permission != 2) {
                if (maidSelect) {
                    directEditor(cutMaid);
                } else {
                    alert("No Maid Selected to Cut");
                }
            }
            break;
        case ("s"):
            if (permission == 1) {
                recordPage();
            } else if (permission != 2) {
                alert("No te podemos dejar grabar desde aqu�, esto es una demo!!!!!");
            }
            break;
        case ("a"):
            dragItemNum = Maids[pageFocus].indexOf(maidSelect);
            if (dragItemNum > 0) {
                swapItems(dragItemNum - 1);
                createMaidIni(pageFocus, 0, 0);
            }
            break;
        case ("q"):
            dragItemNum = Maids[pageFocus].indexOf(maidSelect);
            if (dragItemNum < Maids[pageFocus].length - 1) {
                swapItems(dragItemNum + 1);
                createMaidIni(pageFocus, 0, 0);
            }
            break;
        default:
            break;
    }
}
function getChar(event) {
    if (event.charCode == 39 || event.charCode == 63233) {
        cleanVideos();
        maidSelect = null;
        detect = null;
        numPage += 1;
        if (numPage > numPages - 1) {
            numPage = 0;
        }

        direction = 1;
        backPage = null;
        endMove = false;
        pageXvar = areaW;
        pageX = 0;
        resetParamsPage();
        BGImgH = 0;
        /*clearInterval(movPage);
         //removeListeners();
         movPage=setInterval(drawLeft,velTween);*/
        endMove = false;
        Offsset = areaW;
        adjustPageStatic = numPage - pageFocus - 1;
        createMaidIni(numPage, areaW, 0);
        tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, MODE, null);
    }
    if (event.charCode == 37 || event.charCode == 63232) {
        cleanVideos();
        maidSelect = null;
        detect = null;
        numPage -= 1;
        if (numPage < 0) {
            numPage = numPages - 1;
        }
        direction = -1;
        backPage = null;
        pageXvar = areaW;
        pageX = 0;
        resetParamsPage();
        BGImgH = 0;
        /*clearInterval(movPage);
         removeListeners();
         movPage=setInterval(drawRight,velTween);*/
        Offsset = 0;
        endMove = false;
        adjustPageStatic = numPage - pageFocus + 1;
        if (Math.abs(adjustPageStatic) >= numPages - 1) {
            adjustPageStatic = 0;
        }
        createMaidIni(numPage, -areaW, 0);
        tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, MODE, null);
    }
    if (event.which == null) {
        return String.fromCharCode(event.keyCode) // IE
    } else if (event.which != 0 && event.charCode != 0) {
        return String.fromCharCode(event.which)   // the rest
    } else {
        return null // special key
    }
}
// pages change position
function changePageOrder() {
    cleanVideos();
    delPageForms();
    delForms();
    iniTouchMovePageScroll = false;
    returnMoveX = 0;
    createMode = null
    MODE = "PAGEORDER";
    FULLIMG = false;
    SUBMODE = "PAGEORDER";
    OLDSUBMODE = "PAGEORDER";
    maidSelect = null;
    removeListeners();
    listenersList = new Array(pageOrderdown, pageOrderup, pageOrdermove);
    assignListeners();
    col = Math.floor(areaW / thumbPageW);
    row = Math.floor((areaH - 80) / thumbPageW);
    numScreens = Math.ceil(numPages / (col * row));
    numScreen = Math.floor(pageFocus / (col * row));
    createPagesOrder();
}
var iniOrder;
var pagePos = null;
var pagePosTemp = null;
var pageSelect;
var offsetPageOrderX;
var offsetPageOrderY;
var adjustPageOrder;
function pageOrderdown(e) {
    e.preventDefault();
    client(e);
    if (clickY >= areaH - 80 && clickX <= 80) {
        returnToEditor();
    } else if (clickY >= areaH - 80 && clickX <= 160 && clickX > 80) {
        numScreen -= 1;
        if (numScreen < 0) {
            numScreen = numScreens - 1;
        }
        reScreen();
    } else if (clickY >= areaH - 80 && clickX <= areaW - 80 && clickX > areaW - 160) {
        numScreen += 1;
        if (numScreen > numScreens - 1) {
            numScreen = 0;
        }
        avScreen();
    } else if (clickY >= areaH - 80 && clickX >= areaW - 80) {
        alert("Grabando nuevo orden de páginas");
        associateRecord();
    } else {
        iniOrder = true;
        pagePos = Math.floor(clickY / thumbPageW) * col + Math.floor(clickX / thumbPageW) + (numScreen * col * row);
        offsetPageOrderX = clickX - Math.floor(clickX / thumbPageW) * thumbPageW - 10;
        offsetPageOrderY = clickY - Math.floor(clickY / thumbPageW) * thumbPageW - 10;
        if (pagePos < (numScreen * col * row) && Maids[pagePos]) {
            createPagesOrder();
            drawContPage(clickX - offsetPageOrderX, clickY - offsetPageOrderY, thumbPageW - 20, thumbPageW - 20, "#747474");
            createMiniPageOrder(pagePos, clickX - offsetPageOrderX, clickY - offsetPageOrderY);
        }
    }
}
function drawContPage(x, y, w, h, color) {
    context.save();
    context.fillStyle = color;
    context.globalAlpha = .5;
    context.fillRect(x, y, w, h);
    context.restore();
}
function pageOrderup(e) {
    iniOrder = false;
    pagePos = null;
    offsetPageOrderX = 0;
    offsetPageOrderY = 0;
    e.preventDefault();
    createPagesOrder();
}
var avStatus = false;
var reStatus = false;
function pageOrdermove(e) {
    e.preventDefault();
    client(e);
    pagePosTemp = (numScreen * col * row) + Math.floor(clickY / thumbPageW) * col + Math.floor(clickX / thumbPageW);
    if (Maids[pagePos] != null && iniOrder && clickY < areaH - 80) {
        var tempPage = Maids[pagePos];
        var pagesTemp = pages[pagePos];
        if (pagePosTemp >= 0 && pagePosTemp <= numPages - 1 && pagePosTemp > pagePos) {
            var j = 0;
            for (j = pagePos; j < pagePosTemp; j++) {

                Maids[j] = Maids[j + 1];
                Maids[j + 1] = tempPage;

                pages[j] = pages[j + 1];
                pages[j + 1] = pagesTemp;
            }
            pagePos = pagePosTemp;
        } else if (pagePosTemp >= 0 && pagePosTemp <= numPages - 1 && pagePosTemp < pagePos) {
            var j = 0;
            for (j = pagePos; j > pagePosTemp; j--) {

                Maids[j] = Maids[j - 1];
                Maids[j - 1] = tempPage;


                pages[j] = pages[j - 1];
                pages[j - 1] = pagesTemp;
            }
            pagePos = pagePosTemp;
        }
        /*if(pagePosTemp>=0 && pagePosTemp<=numPages-1){
         
         var tempPage=Maids[pagePosTemp];
         Maids[pagePosTemp]=Maids[pagePos];
         Maids[pagePos]=tempPage;
         var pagesTemp=pages[pagePosTemp];
         pages[pagePosTemp]=pages[pagePos];
         pages[pagePos]=pagesTemp;
         pagePos=pagePosTemp;
         }*/
        pageFocus = pagePos;
        if (pagePosTemp != pagePos) {
            adjustPageOrder = pagePosTemp - pagePos;
        }
        if (clickX > areaW - 40 && !avStatus) {
            avStatus = true;
            numScreen += 1;
            if (numScreen > numScreens - 1) {
                numScreen = 0;
            }
            avScreen();
        } else if (clickX < 40 && !reStatus) {
            reStatus = true
            numScreen -= 1;
            if (numScreen < 0) {
                numScreen = numScreens - 1;
            }
            reScreen();
        } else if (clickX > 40 && clickX < areaW - 40 && endMove) {
            avStatus = false;
            reStatus = false;
        }
        createPagesOrder();
        drawContPage(clickX - offsetPageOrderX, clickY - offsetPageOrderY, thumbPageW - 20, thumbPageW - 20, "#747474");
        createMiniPageOrder(pagePos, clickX - offsetPageOrderX, clickY - offsetPageOrderY);
    } else if (clickY >= areaH - 80 && clickX <= 80) {
        theCanvas.style.cursor = "pointer";
    } else if (clickY >= areaH - 80 && clickX >= areaW - 80) {
        theCanvas.style.cursor = "pointer";
    } else if (clickY >= areaH - 80 && clickX <= 160 && clickX > 80) {
        theCanvas.style.cursor = "pointer";
    } else if (clickY >= areaH - 80 && clickX <= areaW - 80 && clickX > areaW - 160) {
        theCanvas.style.cursor = "pointer";
    } else if (pagePosTemp >= 0 && pagePosTemp <= numPages - 1) {
        theCanvas.style.cursor = "pointer";
        pageOver = pagePosTemp;
        createPagesOrder();
    } else {
        theCanvas.style.cursor = "default";
        pageOver = null;
        createPagesOrder();
    }
}
var numScreen = 0;
var numScreens;
var row = null;
var col = null;
var thumbPageW = 200;
var movPageOrder = 0;
function createPagesOrder() {
    drawBGIMG(imgLibrary["BG"]);
    drawBGsquare();

    drawBall(40, areaH - 40, 20, "#000000");


    if (MODE == "PAGEORDER") {
        context.drawImage(common.toolImages.recordPB[1], areaW - 80, areaH - 65);
    }

    drawBall(40, areaH - 40, 20, "#000000");
    drawBall(120, areaH - 40, 20, "#000000");
    drawBall(areaW - 120, areaH - 40, 20, "#000000");
    context.drawImage(common.toolImages.avListBookPB[1], areaW - 160, areaH - 100);
    context.drawImage(common.toolImages.reListBookPB[1], 80, areaH - 100);
    context.drawImage(common.toolImages.pagesPB[1], 0, areaH - 80);
    drawBallScreen(posX);
    var page = 0;
    if (endMove) {
        movPageOrder = 0;
    } else {
        movPageOrder = dirTweenPageOrder * (posBookX + areaW);
    }
    for (var j = 0; j < row; j++) {
        if (page <= numPages - 1) {
            for (var k = 0; k < col; k++) {
                page = (numScreen * col * row) + j * col + k;
                if (page != pagePos) {
                    drawRect(thumbPageW * k + movPageOrder, thumbPageW * j, thumbPageW, thumbPageW, "#ffffff", 1, false);
                    if (screenLibrary[String(bookSelect)] && screenLibrary[String(bookSelect)][String(page)]) {
                        context.drawImage(screenLibrary[String(bookSelect)][String(page)], (thumbPageW * k + movPageOrder), (thumbPageW * j), thumbPageW, thumbPageW);
                    } else {
                        context.save();
                        context.scale((thumbPageW) / areaW, (thumbPageW) / areaW);
                        var varY = (thumbPageW * j) * areaW / (thumbPageW);
                        var varX = (thumbPageW * k + movPageOrder) * areaW / (thumbPageW);
                        for (var l in Maids[page]) {
                            if (!(Math.abs(Maids[page][l]["data"]["relBottom"]) > 0) && !(Math.abs(Maids[page][l]["data"]["relRight"]) > 0) && !(Maids[page][l]["data"]["centerV"] > 0) && !(Maids[page][l]["data"]["centerH"] > 0)) {
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Number(Maids[page][l]["x"]) + posX + varX, Number(Maids[page][l]["y"]) + posY + varY, 40, 40, Maids[page][l]["data"]);

                            } else if (!(Math.abs(Maids[page][l]["data"]["relBottom"]) > 0) && Math.abs(Maids[page][l]["data"]["relRight"]) > 0 && !(Maids[page][l]["data"]["centerV"] > 0)) {
                                if (!(Maids[page][l]["data"]["absAlignX"] > 0)) {
                                    Maids[page][l]["x"] = 1024 + Math.floor((areaW - 1024) / 2) - Maids[page][l]["data"]["relRight"];
                                } else {
                                    Maids[page][l]["x"] = areaW - Maids[page][l]["data"]["relRight"];
                                }
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Maids[page][l]["x"] + posX + varX, Number(Maids[page][l]["y"]) + posY + varY, 40, 40, Maids[page][l]["data"]);
                            } else if (!(Math.abs(Maids[page][l]["data"]["relBottom"]) > 0) && Math.abs(Maids[page][l]["data"]["relRight"]) > 0 && Maids[page][l]["data"]["centerV"] > 0) {
                                if (!(Maids[page][l]["data"]["absAlignX"] > 0)) {
                                    Maids[page][l]["x"] = 1024 + Math.floor((areaW - 1024) / 2) - Maids[page][l]["data"]["relRight"];
                                } else {
                                    Maids[page][l]["x"] = areaW - Maids[page][l]["data"]["relRight"];
                                }
                                Maids[page][l]["y"] = Math.floor(areaH / 2 - Maids[page][l]["data"]["height"] / 2);
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Maids[page][l]["x"] + posX + varX, Maids[page][l]["y"] + posY + varY, 40, 40, Maids[page][l]["data"]);
                            } else if (Math.abs(Maids[page][l]["data"]["relBottom"]) > 0 && !(Math.abs(Maids[page][l]["data"]["relRight"]) > 0) && !(Maids[page][l]["data"]["centerH"] > 0)) {
                                if (!(Maids[page][l]["data"]["absAlignY"] > 0)) {
                                    Maids[page][l]["y"] = 768 + Math.floor((areaH - 768) / 2) - Maids[page][l]["data"]["relBottom"];
                                } else {
                                    Maids[page][l]["y"] = areaH - Maids[page][l]["data"]["relBottom"];
                                }
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Number(Maids[page][l]["x"]) + posX + varX, Maids[page][l]["y"] + posY + varY, 40, 40, Maids[page][l]["data"]);

                            } else if (Math.abs(Maids[page][l]["data"]["relBottom"]) > 0 && !(Math.abs(Maids[page][l]["data"]["relRight"]) > 0) && Maids[page][l]["data"]["centerH"] > 0) {
                                if (!(Maids[page][l]["data"]["absAlignY"] > 0)) {
                                    Maids[page][l]["y"] = 768 + Math.floor((areaH - 768) / 2) - Maids[page][l]["data"]["relBottom"];
                                } else {
                                    Maids[page][l]["y"] = areaH - Maids[page][l]["data"]["relBottom"];
                                }
                                Maids[page][l]["x"] = Math.floor(areaW / 2 - Maids[page][l]["data"]["width"] / 2);
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Maids[page][l]["x"] + posX + varX, Maids[page][l]["y"] + posY + varY, 40, 40, Maids[page][l]["data"]);
                            } else if (Math.abs(Maids[page][l]["data"]["relBottom"]) > 0 && Maids[page][l]["data"]["relRight"] > 0) {
                                if (!(Maids[page][l]["data"]["absAlignX"] > 0)) {
                                    Maids[page][l]["x"] = 1024 + Math.floor((areaW - 1024) / 2) - Maids[page][l]["data"]["relRight"];
                                } else {
                                    Maids[page][l]["x"] = areaW - Maids[page][l]["data"]["relRight"];
                                }
                                if (!(Maids[page][l]["data"]["absAlignY"] > 0)) {
                                    Maids[page][l]["y"] = 768 + Math.floor((areaH - 768) / 2) - Maids[page][l]["data"]["relBottom"];
                                } else {
                                    Maids[page][l]["y"] = areaH - Maids[page][l]["data"]["relBottom"];
                                }
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Maids[page][l]["x"] + posX + varX, Maids[page][l]["y"] + posY + varY, 40, 40, Maids[page][l]["data"]);
                            } else if (Maids[page][l]["data"]["centerH"] > 0 && Maids[page][l]["data"]["centerV"] > 0) {
                                Maids[page][l]["y"] = Math.floor(areaH / 2 - Maids[page][l]["data"]["height"] / 2);
                                Maids[page][l]["x"] = Math.floor(areaW / 2 - Maids[page][l]["data"]["width"] / 2);
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Maids[page][l]["x"] + posX + varX, Maids[page][l]["y"] + posY + varY, 40, 40, Maids[page][l]["data"]);
                            } else if (Maids[page][l]["data"]["centerH"] > 0 && !(Maids[page][l]["data"]["centerV"] > 0)) {
                                Maids[page][l]["x"] = Math.floor(areaW / 2 - Maids[page][l]["data"]["width"] / 2);
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Maids[page][l]["x"] + posX + varX, Number(Maids[page][l]["y"]) + posY + varY, 40, 40, Maids[page][l]["data"]);
                            } else if (!(Maids[page][l]["data"]["centerH"] > 0) && Maids[page][l]["data"]["centerV"] > 0) {
                                Maids[page][l]["y"] = Math.floor(areaH / 2 - Maids[page][l]["data"]["height"] / 2);
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Number(Maids[page][l]["x"]) + posX + varX, Maids[page][l]["y"] + posY + varY, 40, 40, Maids[page][l]["data"]);
                            }

                        }
                        context.restore();
                    }
                    if (page == pageFocus || page == pageOver) {
                        drawContPage(thumbPageW * k + movPageOrder, thumbPageW * j, thumbPageW, thumbPageW, "#07aaff");
                    }

                }
                if (page == numPages - 1) {
                    break;
                }
            }
            if (page == numPages - 1) {
                break;
            }
        } else {
            break;
        }

    }
    if (!endMove) {
        page = 0;
        for (var j = 0; j < row; j++) {
            if (page == numPages - 1) {
                break;
            }
            if (page <= numPages - 1) {
                for (var k = 0; k < col; k++) {
                    if (numScreen != 0) {
                        page = ((numScreen - 1 * dirTweenPageOrder) * col * row) + j * col + k;
                    } else {
                        page = ((numScreens - 1) * col * row) + j * col + k;
                    }
                    if (page != pagePos || page == pageOver) {

                        drawRect((thumbPageW * k + posBookX * dirTweenPageOrder), (thumbPageW * j), thumbPageW, thumbPageW, "#ffffff", 1, false);
                        if (screenLibrary[String(bookSelect)] && screenLibrary[String(bookSelect)][String(page)]) {
                            context.drawImage(screenLibrary[String(bookSelect)][String(page)], (thumbPageW * k + posBookX * dirTweenPageOrder), (thumbPageW * j), thumbPageW, thumbPageW);
                        } else {
                            context.save();
                            context.scale((thumbPageW) / areaW, (thumbPageW) / areaW);
                            var varY = (thumbPageW * j) * areaW / (thumbPageW);
                            var varX = (thumbPageW * k + posBookX * dirTweenPageOrder) * areaW / (thumbPageW);
                            for (var l in Maids[page]) {
                                eval(Maids[page][l]["function"])(Maids[page][l]["data"]["img"], Number(Maids[page][l]["x"]) + posX + varX, Number(Maids[page][l]["y"]) + posY + varY, 40, 40, Maids[page][l]["data"], true);
                            }
                            context.restore();
                        }
                        if (page == pageFocus) {
                            drawContPage(thumbPageW * k + posBookX * dirTweenPageOrder, thumbPageW * j, thumbPageW, thumbPageW, "#07aaff");
                        }
                    }
                    if (page == numPages - 1) {
                        break;
                    }
                }
                if (page == numPages - 1) {
                    break;
                }
            } else {
                break;
            }

        }
    }
    if (iniOrder) {
        drawContPage(clickX - offsetPageOrderX, clickY - offsetPageOrderY, thumbPageW - 20, thumbPageW - 20, "#747474");
        createMiniPageOrder(pagePos, clickX - offsetPageOrderX, clickY - offsetPageOrderY);
    }

}
function createMiniPageOrder(page, posX, posY) {
    context.save();
    context.scale((thumbPageW - 20) / areaW, (thumbPageW - 20) / areaW);
    for (var j in Maids[page]) {
        eval(Maids[page][j]["function"])(Maids[page][j]["data"]["img"], Number(Maids[page][j]["x"]) + posX * areaW / (thumbPageW - 20), Number(Maids[page][j]["y"]) + posY * areaW / (thumbPageW - 20), 40, 40, Maids[page][j]["data"], true);
    }
    context.restore();
}
function drawBallScreen(posX) {
    ballPagesWidth = numPages * ballW;
    if ("ontouchmove" in document.documentElement) {
        ballPagesX = areaW / 2 - ballPagesWidth / 2;
    } else {
        ballPagesX = (areaW + 80) / 2 - ballPagesWidth / 2;
    }
    for (var cont = 0; cont <= numScreens - 1; cont++) {
        if (cont == numScreen) {
            drawBall(ballPagesX + ballW / 2 + ballW * cont + posX, areaH - ballW, ballW / 4, "#000000");

        } else {
            drawBall(ballPagesX + ballW / 2 + ballW * cont + posX, areaH - ballW, ballW / 8, "#000000");
        }
    }

}
function avScreen() {
    removeListeners();
    dirTweenPageOrder = 1;
    pageXvar = areaW;
    posBookX = 0;
    endMove = false;
    pageOrderMove = setInterval(drawPageOrderLeft, velTween);
}
var dirTweenPageOrder = 1;
function drawPageOrderLeft() {
    pageXvar = Math.floor(pageXvar / 2);
    posBookX -= pageXvar;
    if (pageXvar <= 1) {
        posBookX = 0;
        clearInterval(pageOrderMove);
        endMove = true;
        createPagesOrder();
        assignListeners();
    } else {
        createPagesOrder();
    }
}
function drawPageOrderRight() {
    pageXvar = Math.floor(pageXvar / 2);
    posBookX -= pageXvar;
    if (pageXvar <= 1) {
        posBookX = 0;
        clearInterval(pageOrderMove);
        endMove = true;
        createPagesOrder();
        assignListeners();
    } else {
        createPagesOrder();
    }
}
function reScreen() {
    removeListeners();
    dirTweenPageOrder = -1;
    pageXvar = areaW;
    posBookX = 0;
    endMove = false;
    pageOrderMove = setInterval(drawPageOrderRight, velTween);
}
var pageOrderMove;
// pages go new
function pageGo() {
    movPageOrder = 0;
    cleanVideos();
    delPageForms();
    delForms();
    iniTouchMovePageScroll = false;
    returnMoveX = 0;
    createMode = null;
    MODE = "PAGEGO";
    FULLIMG = false;
    SUBMODE = "PAGEGO";
    OLDSUBMODE = "PAGEGO";
    maidSelect = null;
    removeListeners();
    listenersList = new Array(pageGodown, pageGoup, pageGomove);
    assignListeners();
    col = Math.floor(areaW / thumbPageW);
    row = Math.floor((areaH - 80) / thumbPageW);
    numScreens = Math.ceil(numPages / (col * row));
    numScreen = Math.floor(pageFocus / (col * row));
    Offsset = 0;
    tween(theCanvas, "fade", {alpha: 100}, velFade, createPagesOrder, Quad_easeInOut, "PAGEGO", createPagesOrder);
}
function pageGodown(e) {
    e.preventDefault();
    client(e);
    var pos = Math.floor(clickY / thumbPageW) * col + Math.floor(clickX / thumbPageW) + (numScreen * col * row);
    if (clickY >= areaH - 80 && clickX <= 80) {
        cleanVideos();
        /*alphaVar=360;
         alphaOffset=360;
         endMove=false;
         alphaEnd=endMovePage;
         clearInterval(alphaInterval);
         alphaInterval=setInterval(fade,velTween);*/
        Offsset = 100;
        tween(theCanvas, "fade", {alpha: 0}, velFade, toMAIN, Quad_easeInOut, "PAGEGO", createPagesOrder);
    } else if (clickY >= areaH - 80 && clickX <= 160 && clickX > 80) {
        numScreen -= 1;
        if (numScreen < 0) {
            numScreen = numScreens - 1;
        }
        reScreen();
    } else if (clickY >= areaH - 80 && clickX <= areaW - 80 && clickX > areaW - 160) {
        numScreen += 1;
        if (numScreen > numScreens - 1) {
            numScreen = 0;
        }
        avScreen();
    } else if (pos <= numPages - 1) {
        pageXvar = areaW;
        posPageX = 0;
        pageX = 0;
        numPage = pos;
        resetParamsPage();
        BGImgH = 0;
        backPage = null;
        createMode = function() {
            if (pos < pageFocus) {
                Offsset = 0;
                endMove = false;
                adjustPageStatic = pos - pageFocus + 1;
                if (Math.abs(adjustPageStatic) >= numPages - 1) {
                    adjustPageStatic = 0;
                }
                createMaidIni(numPage, -areaW, 0);
                tween(theCanvas, "rePage", {x: areaW}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
            } else {
                adjustPageStatic = pos - pageFocus - 1;
                createMaidIni(numPage, areaW, 0);
                endMove = false;
                Offsset = areaW;
                tween(theCanvas, "avPage", {x: 0}, velMove, endMovePage, Quad_easeOut, "VISOR", null);
            }
        }
        Offsset = 0;
        tween(theCanvas, "fade", {alpha: 100}, velFade, toMAIN, Quad_easeInOut, "VISOR", execCreateMaidIni);
    } else {
        Offsset = 100;
        tween(theCanvas, "fade", {alpha: 0}, velFade, toMAIN, Quad_easeInOut, "PAGEGO", createPagesOrder);
    }

}
function pageGoup(e) {
    iniOrder = false;
    pagePos = null;
    offsetPageOrderX = 0;
    offsetPageOrderY = 0;
    e.preventDefault();
    createPagesOrder();
}
var pageOver;
function pageGomove(e) {
    e.preventDefault();
    client(e);
    pagePosTemp = (numScreen * col * row) + Math.floor(clickY / thumbPageW) * col + Math.floor(clickX / thumbPageW);
    if (clickY >= areaH - 80 && clickX <= 80) {
        theCanvas.style.cursor = "pointer";
    } else if (clickY >= areaH - 80 && clickX <= 160 && clickX > 80) {
        theCanvas.style.cursor = "pointer";
    } else if (clickY >= areaH - 80 && clickX <= areaW - 80 && clickX > areaW - 160) {
        theCanvas.style.cursor = "pointer";
    } else if (pagePosTemp >= 0 && pagePosTemp <= numPages - 1) {
        theCanvas.style.cursor = "pointer";
        pageOver = pagePosTemp;
        createPagesOrder();
    } else {
        theCanvas.style.cursor = "default";
        pageOver = null;
        createPagesOrder();
    }
}
//alpha tween

var alphaOffset;
var endFade = true;
var velFade = .5;
var velMove = 1;
var velTweenBook = .8;
function fade(_data, _mode, _func) {
    MODE = _mode;
    _func();
    context.save();
    if (_static) {
        context.fillStyle = "#000000";
    } else {
        context.fillStyle = "#ffffff";
    }
    context.globalAlpha = 1 - (_data / 100);
    drawRect(0, 0, areaW, areaH, "#ffffff", 1 - (_data / 100), false);
    context.restore();
}
function avPage(_data, _mode, _func) {
    _data = Math.floor(_data);
    MODE = _mode;
    posBookX = -areaW + _data;
    if (numPage == 0) {
        createMaidIni(numPages - 1, -areaW + _data, 0);
    } else {
        createMaidIni(numPage - 1 - adjustPageStatic, -areaW + _data, 0);
    }
    createMaidIni(numPage, _data, 0);
     if (HTMLMODE) {
         createMaidIni(numPage, 0, 0);
             HTMLMODE=false;
            getHTML();
        }
    
}
function rePage(_data, _mode, _func) {
    _data = Math.floor(_data);
    MODE = _mode;
    posBookX = _data
    if (numPage == numPages - 1) {
        createMaidIni(-adjustPageStatic, _data, 0);
    } else {
        createMaidIni(Number(numPage) + 1 - adjustPageStatic, _data, 0);
    }
    createMaidIni(numPage, -areaW + _data, 0);
     if (HTMLMODE) {
         createMaidIni(numPage, 0, 0);
             HTMLMODE=false;
            getHTML();
        }

}
function avPageBook(_data, _mode, _func) {
    MODE = _mode;
    selPageListBook -= 1 + adjustPageBook;
    posXBooks = -areaW + _data;
    showListBookCollection();
    selPageListBook += 1 + adjustPageBook;
    posXBooks = _data;
    showListBookCollection();

}
function rePageBook(_data, _mode, _func) {
    MODE = _mode;
    selPageListBook += 1 + adjustPageBook;
    posXBooks = _data;
    showListBookCollection();
    selPageListBook -= 1 + adjustPageBook;
    posXBooks = -areaW + _data;
    showListBookCollection();

}
//simple tween
//http://mattshaw.net/projects/simple-javascript-tweening/#
var Offsset = 0;
var _static = false;
var pageStaticAv = null;
var pageStaticRe = null;
var preStatic = false;
function tween(o, targetFunc, props, durationSecs, onComplete, easef, mode, whileFunc) {
    if (_static && MODE == "VISOR" && onComplete != toBOOKS && onComplete != pageGo && onComplete != goHome) {
        whileFunc = execCreateMaidIni;
        //onComplete=toMAIN;
        cleanVideos();
        Offsset = 0;
        durationSecs = .8;
        props = {alpha: 100};
        targetFunc = "fade";
        pageFocus = numPage;
    }
    endFade = false;
    var fps = 30, count = 0, stopAt = fps * durationSecs, startVals = {}, endVals = {}, easef = easef || Quad_easeOut;
    for (var p in props)
        startVals[p] = tween_getProperty(o, p);
    for (var p in props)
        endVals[p] = props[p];
    var f = function() {
        count++;
        if (count >= stopAt) {
            tween_stop(o);
            //tween_setProps(o,targetFunc,endVals,mode,whileFunc);
            if (onComplete)
                onComplete();
        } else {
            for (var p in props)
                tween_setProperty(o, targetFunc, easef(count, startVals[p], endVals[p] - startVals[p], stopAt), mode, whileFunc);
        }
    }
    clearInterval(o._tween_int);
    o._tween_int = setInterval(f, durationSecs * 1000 / fps);
}
function tween_stop(o) {
    endMove = true;
    clearInterval(o._tween_int);
    assignListeners();
    endFade = true;
}
function tween_setProps(o, targetFunc, props, mode, whileFunc) {
    for (var p in props)
        tween_setProperty(o, targetFunc, props[p], mode, whileFunc);
}
function tween_setProperty(o, targetFunc, value, mode, whileFunc) {
    eval(targetFunc)(value, mode, whileFunc);
}
function tween_getProperty(o, p) {
    var v;
    removeListeners();
    v = Offsset;
    return v;
}
//R.Penner Quart easing t=time,b=start,c=delta,d=duration
function Quad_easeIn(t, b, c, d) {
    return c * (t /= d) * t * t * t + b;
}
function Quad_easeOut(t, b, c, d) {
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
}
function Quad_easeInOut(t, b, c, d) {
    if ((t /= d / 2) < 1)
        return c / 2 * t * t * t * t + b;
    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
}

function execCreateMaidIni() {
    createMaidIni(pageFocus, 0, 0);
}
//card
var arrayCard={};
function card() {
    arrayTextAreasCard = new Array();
    if (bookSelect !== null) {
        arrayCard = {Title: ["Title", arrayConfig.Title], Description: ["Description", arrayConfig.Description], Extend: ["Extend", arrayConfig.Extend], booksAllow: ["Books Allow", arrayConfig.booksAllow], Public: ["Public", arrayConfig.Public]};
    } else {
        arrayCard = {Title: ["Title", arrayConfigHome.Title], Description: ["Description", arrayConfigHome.Description], Extend: ["Extend", arrayConfigHome.Extend], booksAllow: ["Books Allow", arrayConfigHome.booksAllow], Public: ["Public", "1"]};
    }
    createMode = drawMenuCard;
    toFormatCard(false, "CARD");
}
function toFormatCard(move, submode) {
    endMove = false;
    delPageForms();
    delForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "4679";
    SUBMODE = submode;
    removeListeners();
    listenersList = new Array(cardown, carup, cardmove);
    assignListeners();
    if (move) {
        posBookX = -200;
        posBookXAv = 200;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
    }
    showPagesTween = setInterval(hideEditMaid, 33);
}
function drawMenuCard() {
    context.fillStyle = "#2e2e2e";
    context.fillRect(0, 0, areaW, areaH);
    if (bookSelect === null) {
        context.drawImage(common.toolImages.avatarImg[1], 0, 0);
    } else {
        context.drawImage(books[bookSelect].img, 0, 0);
    }
    drawText("normal 25px arial ", "middle", "center", "#aaaaaa", "X", 40, areaH - 40);
    context.drawImage(common.toolImages.recordPB[1], 80, areaH - 80);
    if (!formActiv) {
        formActiv = true;
        var formInput = document.createElement("div");
        formInput.style.overflow = "visible";
        formInput.style.position = 'absolute';
        formInput.style.left = 0;
        formInput.style.top = 0;
        document.body.appendChild(formInput);
        formInputCont.push(formInput);
        /*if(arrayConfig.length<=0){
         arrayConfig={Title:"",Description:"",Extend:"",booksAllow:"0"};
         }*/
        var cont = 0;
        for (var j in arrayCard) {
            drawText("normal 25px arial ", "bottom", "", "#aaaaaa", j, 10, 210 + 100 * cont);
            drawText("normal 15px arial ", "bottom", "", "#666666", arrayConfigDesc[j], 200, 210 + 100 * cont);
            textArea = document.createElement("textarea");
            textArea.style.type = "text";
            textArea.style.position = "absolute";
            textArea.style.size = areaW;
            textArea.style.top = 210 + 100 * cont;
            textArea.id = j;
            formInput.style.left = 10;
            textArea.style.id = j;
            textArea.style.width = areaW - 200;
            textArea.style.height = 50;
            textArea.value = arrayCard[j][1];
            formInput.appendChild(textArea);
            arrayTextAreasCard.push(textArea);
            cont++;
        }
    } else {
        var cont = 0;
        for (var j in arrayCard) {
            drawText("normal 25px arial ", "bottom", "", "#aaaaaa", j, 10, 210 + 100 * cont);
            drawText("normal 15px arial ", "bottom", "", "#666666", arrayConfigDesc[j], 200, 210 + 100 * cont);
            document.getElementById(j).style.width = areaW - 200;
            cont++;
        }
    }
}
var loadCard = false;
var arrayTextAreasCard = new Array();
function cardown(e) {
    e.preventDefault();
    client(e);
    if (clickY >= areaH - PBW) {
        switch (Math.floor(clickX / 80)) {
            case 0:
                delForms();
                returnToEditor();
                break;
            case 1:
                for (var j in arrayTextAreasCard) {
                    if (bookSelect !== null) {
                        arrayConfig[arrayTextAreasCard[j].id] = arrayTextAreasCard[j].value;
                    } else {
                        arrayConfigHome[arrayTextAreasCard[j].id] = arrayTextAreasCard[j].value;
                    }
                    if (bookSelect !== null) {
                        books[bookSelect][arrayTextAreasCard[j].id] = arrayTextAreasCard[j].value;
                    }
                }
                loadCard = true;
                associateRecord();
                returnToEditor();
                break;
            default:
                break;
        }
    }
}
function carup(e) {

}
function cardmove(e) {

}
//creating Img
function toCreateImg(move, submode) {
    endMove = false;
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "4679";
    SUBMODE = submode;
    removeListeners();
    listenersList = new Array(createImgdown, createImgup, createImgmove);
    assignListeners();
    if (move) {
        posBookX = -200;
        posBookXAv = 200;
        dirEditMain = -1;
        offsetYOpsMaid = 0;
    }
    showPagesTween = setInterval(hideEditMaid, 33);
}
function drawCreateImg() {
    context.fillStyle = "#1a1a1a";
    context.fillRect(0, areaH - 80, areaW, 80);
    context.drawImage(common.toolImages.textFormatPanel[1], 0, areaH - 80);
    context.fillRect(2 * PBW, areaH - 80, areaW, 80);
    context.drawImage(common.toolImages.recordPB[1], 80, areaH - 80);
}
var iniCrop = false;
var existCrop = false;
var cropXini = 0;
var cropYini = 0;
var cropW = 0;
var cropY = 0;
var hideBG = false;
function iniParamsCrop() {
    iniCrop = false;
    existCrop = false;
    cropXini = 0;
    cropYini = 0;
    cropW = 0;
    cropY = 0;
}
function createImgdown(e) {
    e.preventDefault();
    client(e);
    if (clickY >= areaH - 80) {
        switch (Math.floor(clickX / PBW)) {
            case 0:
                returnToEditor();
                break;
            case 1:
                hideBG = true;
                createMaidIni(pageFocus, 0, 0, false, true);
                createPNG();
                hideBG = false;
                returnToEditor();


                break;
            default:
                break;
        }
    } else {
        iniCrop = true;
        cropXini = clickX;
        cropYini = clickY;
    }
}
function createImgmove(e) {
    e.preventDefault();
    client(e);
    createMaidIni(pageFocus, 0, 0);
    if (iniCrop) {
        existCrop = true;
        cropW = clickX - cropXini;
        cropH = clickY - cropYini;
        drawCropArea();
    } else if (existCrop && !iniCrop) {
        if (clickX > cropXini && clickX < cropXini + cropW && clickY > cropYini && clickY < cropYini + cropH) {
            theCanvas.style.cursor = "pointer";
        } else {
            theCanvas.style.cursor = "default";
        }
        drawCropArea();
    }
    createMode();
}
function createImgup(e) {
    e.preventDefault();
    client(e);
    cropW = clickX - cropXini;
    cropH = clickY - cropYini;
    createMaidIni(pageFocus, 0, 0);
    if (iniCrop && clickY < areaH - 80) {
        cropW = clickX - cropXini;
        cropH = clickY - cropYini;
        drawCropArea();
    }
    if (cropW < 0) {
        cropXini = cropXini + cropW;
        cropW = -cropW;
    }
    if (cropH < 0) {
        cropYini = cropYini + cropH;
        cropH = -cropH;
    }
    if (cropW > 0 && cropH > 0 && iniCrop) {
        existCrop = true;
    }
    iniCrop = false;
    createMode();
}
function drawCropArea() {
    drawRect(cropXini, cropYini, cropW, cropH, "#2d2d2d", .2, false);
    drawRect(cropXini, cropYini, cropW, cropH, "#2d2d2d", .5, true, "#ffffff");
    drawRect(cropXini, cropYini, cropW, cropH, "#2d2d2d", .2, false);
}
function createPNG() {
    if (existCrop) {
        /*var p = context.getImageData(cropXini, cropYini, cropW, cropH);
         drawImgCreated(tempDataImage(p));*/
        var imageManipulationCanvas = document.createElement('canvas');
        imageManipulationCanvas.width = cropW;
        imageManipulationCanvas.height = cropH;
        var imageManipulationCtx = imageManipulationCanvas.getContext('2d');
        imageManipulationCtx.drawImage(theCanvas, cropXini, cropYini, cropW, cropH, 0, 0, cropW, cropH);
        drawImgCreated(imageManipulationCanvas.toDataURL());
    } else {
        alert("You still do not have selected area");
    }
    //return hex;
}
function drawImgCreated(data) {
    var httpTemp = getXMLHTTPRequestPage();
    http = httpTemp;

    if (books[bookSelect]) {
        var URL = homeRoot + books[bookSelect]["id"] + "/img/";
    } else {
        URL = homeRoot + "img/";
    }
    var CUERPO = data;
    http.open("POST", "ed/cropImg.php", true); // fijando los parametros para el env�o de datos.
    http.onreadystatechange = handlerSave; // Qu� funci�n utilizar en caso de que el estado de la petici�n cambie.
    http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    http.send("CUERPO=" + CUERPO + "&URL=" + URL); // enviar petici�n.
}
function handlerSave() {
    if (http.readyState === 4) {
        if (http.status === 200) {
            alert(http.responseText);
            var newItem = new cloneObject(modelMaid);
            newItem["function"] = "ImgLoader";
            newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
            newItem["type"] = "genericLoaderImg/generic";
            if (books[bookSelect]) {
                newItem["data"]["img"] = env + homeRoot + books[bookSelect]["id"] + "/" + "img/" + http.responseText;
            } else {
                newItem["data"]["img"] = env + homeRoot + "img/" + http.responseText;
            }
            var rt = new Image();
            rt.crossOrigin = 'crossdomain.xml';
            rt.src = proxy + newItem["data"]["img"];
            rt.onload = function() {
                imgLibrary[newItem["data"]["img"]] = rt;
                newItem["x"] = 150;
                newItem["y"] = 150;
                newItem["w"] = rt.naturalWidth;
                newItem["h"] = rt.naturalHeight;
                newItem["data"]["width"] = rt.naturalWidth;
                newItem["data"]["height"] = rt.naturalHeight;
                maidSelect = newItem;
                Maids[pageFocus].push(newItem);
                createMaidIni(pageFocus, 0, 0);
            }
            rt.onerror = function() {
                imgLibrary[newItem["data"]["img"]] = common.toolImages.errorImg[1];
                newItem["x"] = 150;
                newItem["y"] = 150;
                newItem["w"] = rt.naturalWidth;
                newItem["h"] = rt.naturalHeight;
                newItem["data"]["width"] = rt.naturalWidth;
                newItem["data"]["height"] = rt.naturalHeight;
                maidSelect = newItem;
                Maids[pageFocus].push(newItem);
                createMaidIni(pageFocus, 0, 0);
            }


        }

    }
}
//creating PDF
var pagePDF = 0;
function toCreatePDF(move, submode) {
    /*endMove=false;
     delPageForms();
     formActiv=false;
     MODE="EDITOR";
     OLDSUBMODE="4679";
     SUBMODE=submode;
     removeListeners();
     listenersList=new Array(createPDFdown,createPDFup,createPDFmove);
     assignListeners();
     if(move){
     posBookX=-200;
     posBookXAv=200;
     dirEditMain=-1;
     offsetYOpsMaid=0;
     }
     showPagesTween=setInterval(hideEditMaid,33);*/

    pagePDF = 0;
    cleanVideos();
    endMove = true;
    delPageForms();
    delForms();
    iniTouchMovePageScroll = false;
    returnMoveX = 0;
    MODE = "VISOR";
    FULLIMG = false;
    SUBMODE = "MAIN";
    OLDSUBMODE = "MAIN";
    maidSelect = null;
    removeListeners();
    listenersList = new Array(visordown, visorup, visormove);
    assignListeners();
    resetParamsPage();
    navigationMode = false;
    iniPDF();
}
function drawCreatePDF() {
    /*context.fillStyle="#1a1a1a";
     context.fillRect(0,areaH-80,areaW,80);
     context.drawImage(common.toolImages.textFormatPanel[1],0,areaH-80);
     context.fillRect(2*PBW,areaH-80,areaW,80);
     context.drawImage(recordPB[1],80,areaH-80);*/
}
function iniPDF() {
    if (pagePDF < numPages) {
        createPDFStep();
    } else {
        navigationMode = true;
        returnToEditor();
        putInBrowser();
    }
}
function createPDFdown(e) {
    /*e.preventDefault();
     client(e);
     if(clickY>=areaH-80){
     switch (Math.floor(clickX/PBW)){
     case 0:
     returnToEditor();
     break;
     case 1:
     hideBG=true;
     createMaidIni(pageFocus,0,0,false,true);
     createPDF();
     hideBG=false;
     returnToEditor();
     
     
     break;
     default:
     break;
     }
     }else{
     iniCrop=true;
     cropXini=clickX;
     cropYini=clickY;
     }*/
}
function createPDFmove(e) {
    /*e.preventDefault();
     client(e);
     createMaidIni(pageFocus,0,0);
     if(iniCrop){
     existCrop=true;	
     cropW=clickX-cropXini;
     cropH=clickY-cropYini;
     drawCropArea();
     }else if(existCrop && !iniCrop){
     if(clickX>cropXini && clickX<cropXini+cropW && clickY>cropYini && clickY<cropYini+cropH){
     theCanvas.style.cursor="pointer";
     }else{
     theCanvas.style.cursor="default";
     }
     drawCropArea();
     }
     createMode();*/
}
function createPDFup(e) {
    /*e.preventDefault();
     client(e);
     cropW=clickX-cropXini;
     cropH=clickY-cropYini;
     createMaidIni(pageFocus,0,0);
     if(iniCrop && clickY<areaH-80){
     cropW=clickX-cropXini;
     cropH=clickY-cropYini;
     drawCropArea();
     }
     if(cropW<0){
     cropXini=cropXini+cropW;cropW=-cropW;
     }
     if(cropH<0){
     cropYini=cropYini+cropH;cropH=-cropH;
     }
     if(cropW>0 && cropH>0 && iniCrop){
     existCrop=true;	
     }
     iniCrop=false;
     createMode();*/
}

var pageElements = new Array();

function createPDFStep() {
    pageElements = new Array();
    createMaidIni(pagePDF, 0, 0, false, true);
    var tmrReady = setInterval(isPageFullyLoaded, 1000);
    function isPageFullyLoaded() {
        if (pageElements.join().indexOf("false") == -1) {
            clearInterval(tmrReady);
            cleanVideos();
            createMaidIni(pagePDF, 0, 0, false, true);
            var imageManipulationCanvas = document.createElement('canvas');
            imageManipulationCanvas.width = areaW;
            imageManipulationCanvas.height = areaH;
            var imageManipulationCtx = imageManipulationCanvas.getContext('2d');
            imageManipulationCtx.drawImage(theCanvas, cropXini, cropYini, areaW, areaH, 0, 0, areaW, areaH);
            drawImgCreatedPDF(imageManipulationCanvas.toDataURL());
        }
    }

}
function drawImgCreatedPDF(data) {
    var httpTemp = getXMLHTTPRequestPage();
    http = httpTemp;

    if (books[bookSelect]) {
        var URL = homeRoot + books[bookSelect]["id"] + "/img/PDF/";
    } else {
        URL = homeRoot + "img/PDF/";
    }
    var CUERPO = data;
    http.open("POST", "ed/cropImg.php", true); // fijando los parametros para el env�o de datos.
    http.onreadystatechange = handlerSavePDF; // Qu� funci�n utilizar en caso de que el estado de la petici�n cambie.
    http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    http.send("CUERPO=" + CUERPO + "&URL=" + URL + "&NUM=" + pagePDF); // enviar petici�n.
}
function handlerSavePDF() {
    if (http.readyState === 4) {
        if (http.status === 200) {
            pagePDF++;
            iniPDF();
            /*var newItem=new cloneObject (modelMaid);
             newItem["function"]="ImgLoader";
             newItem["id"]="clip"+(Maids[pageFocus].length+1);
             newItem["type"]="genericLoaderImg/generic";
             if(books[bookSelect]){
             newItem["data"]["img"]=env+homeRoot+books[bookSelect]["id"]+"/"+"img/"+http.responseText;
             }else{
             newItem["data"]["img"]=env+homeRoot+"img/"+http.responseText;	
             }
             var rt=new Image();
             rt.src=proxy+newItem["data"]["img"];
             rt.onload=function(){
             imgLibrary[newItem["data"]["img"]]=rt;
             newItem["x"]=10;
             newItem["y"]=10;
             newItem["w"]=rt.naturalWidth;
             newItem["h"]=rt.naturalHeight;
             newItem["data"]["width"]=rt.naturalWidth;
             newItem["data"]["height"]=rt.naturalHeight;
             maidSelect=newItem;
             Maids[pageFocus].push(newItem);
             createMaidIni(pageFocus,0,0); 
             }
             rt.onerror = function(){
             imgLibrary[newItem["data"]["img"]]=errorImg[1];
             newItem["x"]=10;
             newItem["y"]=10;
             newItem["w"]=rt.naturalWidth;
             newItem["h"]=rt.naturalHeight;
             newItem["data"]["width"]=rt.naturalWidth;
             newItem["data"]["height"]=rt.naturalHeight;
             maidSelect=newItem;
             Maids[pageFocus].push(newItem);
             createMaidIni(pageFocus,0,0); 
             }*/


        }

    }
}
function putInBrowser() {
    var httpTemp = getXMLHTTPRequestPage();
    http = httpTemp;

    if (books[bookSelect]) {
        var URL = "../" + homeRoot + books[bookSelect]["id"] + "/img/PDF/";
    } else {
        URL = "../" + homeRoot + "img/PDF/";
    }
    window.open("ed/createPDF.php?URL=" + URL + "&w=" + areaW / 5 + "&h=" + areaH / 5 + "&numPages=" + numPages, "Title", "target=_blank,menubar=yes,toolbar=yes,location=yes,directories=yes,titlebar=yes,status=yes,scrollbars=yes,resizable=yes");

}
function handlerPutPDF() {
    if (http.readyState === 4) {
        if (http.status === 200) {
            alert("PDF CREADO");
        }
    }
}
//------new page,duplicate page, delete page,new bloc
var pageType;
var creatingPage = false;
addInput = function(Text) {
    context.save();
    context.shadowBlur = 20;
    context.shadowColor = "black";
    drawRect(Math.floor(areaW / 2 - 200), Math.floor(areaH / 2 - 100), 400, 200, "#1a1a1a", 1);
    context.restore();
    drawText("Bold 14px arial ", "", "center", "#ffffff", Text, Math.floor(areaW / 2), Math.floor(areaH / 2 - 50));
    cancelPBOut();
    okPBOut();
    if (!formActiv) {
        formActiv = true;
        var formInput = document.createElement("div");
        document.body.appendChild(formInput);
        formInput.id = "input";
        formInput.style.overflow = "visible";
        formInput.style.position = 'absolute';
        formInput.style.left = areaW / 2 - 100;
        formInput.style.top = areaH / 2 - 20;
        formInputCont.push(formInput);
        //var form=document.createElement("form");
        textArea = document.createElement("textarea");
        textAreaType = 2;
        textArea.style.size = areaW;
        textArea.style.type = "text";
        textArea.style.id = "text";
        textArea.style.width = 200;
        textArea.style.height = 40;
        textArea.value = pages[pageFocus]["id"];
        formInput.appendChild(textArea);
    } else {
        document.getElementById("input").style.left = areaW / 2 - 100;
        document.getElementById("input").style.top = areaH / 2 - 20;
    }
};
baseInput = function(Text) {
    drawRect(Math.floor(areaW / 2 - 200), Math.floor(areaH / 2 - 100), 400, 200, "#1a1a1a", 1);
    drawText("Bold 14px arial ", "", "center", "#ffffff", Text, Math.floor(areaW / 2), Math.floor(areaH / 2 - 50));
    cancelPBOut();
    okPBOut();
};
cancelPBOver = function() {
    drawRect(Math.floor(areaW / 2 - 200), Math.floor(areaH / 2 + 50), 200, 50, "#ff0000", 1);
    drawText("Normal 20px arial ", "bottom", "center", "#ffffff", "CANCEL", Math.floor(areaW / 2 - 100), Math.floor(areaH / 2 + 85));
};
cancelPBOut = function() {
    drawRect(Math.floor(areaW / 2 - 200), Math.floor(areaH / 2 + 50), 200, 50, "#cc3300", 1);
    drawText("Normal 20px arial ", "bottom", "center", "#ffffff", "CANCEL", Math.floor(areaW / 2 - 100), Math.floor(areaH / 2 + 85));
};
okPBOver = function() {
    drawRect(Math.floor(areaW / 2), Math.floor(areaH / 2 + 50), 200, 50, "#66cc00", 1);
    drawText("Normal 20px arial ", "bottom", "center", "#ffffff", "OK", Math.floor(areaW / 2 + 100), Math.floor(areaH / 2 + 85));
};
okPBOut = function() {
    drawRect(Math.floor(areaW / 2), Math.floor(areaH / 2 + 50), 200, 50, "#669900", 1);
    drawText("Normal 20px arial ", "bottom", "center", "#ffffff", "OK", Math.floor(areaW / 2 + 100), Math.floor(areaH / 2 + 85));
};
function newPage() {
    pageType = "NEW";
    toNEWPAGE();
}
function dupPage() {
    pageType = "DUP";
    toNEWPAGE();
}
//single form
function toNEWPAGE() {
    endMove = false;//movement no end
    delPageForms();
    formActiv = false;
    //new mode status
    MODE = "EDITOR";
    OLDSUBMODE = "NEWPAGE";
    SUBMODE = "NEWPAGE";
    removeListeners();
    listenersList = new Array(newpagedown, newpageup, newpagemove);
    assignListeners();
    //ini menu out
    posBookX = -200;
    posBookXAv = 200;
    dirEditMain = -1;
    offsetYOpsMaid = 0;
    createMode = drawMenuPage;
    showPagesTween = setInterval(hideEditMaid, 33);
}
drawMenuPage = function() {
    addInput("Please introduce the name for the new page.");
};
function newpagedown(e) {
    e.preventDefault();
    client(e);
    if (clickX > areaW / 2 - 200 && clickX <= areaW / 2 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        //return to editor
        createMode = null;
        returnToEditor();
    } else if (clickX > areaW / 2 && clickX <= areaW / 2 + 200 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        var tryName = false;
        var formatName = true;
        if (textArea.value.indexOf(" ") !== -1) {
            formatName = false;
        }
        for (var j in pages) {
            if (pages[j]["id"] === textArea.value) {
                tryName = true;
                break;
            }
        }
        if (tryName) {
            alert("THIS NAME JUST EXISTS!!!, TRY ANOTHER ONE PLEASE");
        } else if (!formatName) {
            alert("The name can not contain special characters nor white spaces");
        } else {
            delForms();
            formActiv = true;
            creatingPage = true;
            var newPage = new cloneObject(pages[pageFocus]);
            if (pageType === "DUP") {
                alert(" Creating Duplicate Page ");
                var newContents = new cloneObject(Maids[pageFocus]);
                Maids[numPages] = Maids[pageFocus];
            } else {
                Maids[numPages] = new Array;
            }
            newPage["id"] = textArea.value;
            pages[numPages] = newPage;
            numPages += 1;
            moveToPage(numPages - 1);
            OLDSUBMODE = "MAIN";
            toMAIN();
        }
    }

}
function newpageup(e) {
    e.preventDefault();
    baseInput("Please introduce the name for the new page.");
    client(e);
}
function newpagemove(e) {
    e.preventDefault();
    if (clickX > areaW / 2 - 200 && clickX <= areaW / 2 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        okPBOut();
        cancelPBOver();
        theCanvas.style.cursor = "pointer";
    } else if (clickX > areaW / 2 && clickX <= areaW / 2 + 200 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        cancelPBOut();
        okPBOver();
        theCanvas.style.cursor = "pointer";
    } else {
        baseInput("Please introduce the name for the new page.");
        theCanvas.style.cursor = "default";
    }
    client(e);
}
//--deleting page
function delPage() {
    toDELPAGE();
}
function toDELPAGE() {
    endMove = false;
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "DELPAGE";
    SUBMODE = "DELPAGE";
    removeListeners();
    listenersList = new Array(delpagedown, delpageup, delpagemove);
    assignListeners();
    posBookX = -200;
    posBookXAv = 200;
    dirEditMain = -1;
    offsetYOpsMaid = 0;
    //dataMode=new Array(Number(maidSelect["x"]),Number(maidSelect["y"]),Number(maidSelect["data"]["width"]),Number(maidSelect["data"]["height"]));
    createMode = drawDelPage;
    showPagesTween = setInterval(hideEditMaid, 33);
}
drawDelPage = function() {
    addInput("Are you sure you want delete this page?'.");
};
var oldPage = "";
function delpagedown(e) {
    e.preventDefault();
    client(e);
    if (clickX > areaW / 2 - 200 && clickX <= areaW / 2 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        //delForms();
        createMode = null;
        returnToEditor();
    } else if (clickX > areaW / 2 && clickX <= areaW / 2 + 200 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        if (numPages > 1) {
            creatingPage = true;
            oldPage = pages[pageFocus]["id"];
            alert("Deleting " + pages[pageFocus]["id"]);
            pages.splice(pageFocus, 1);
            creatingPage = true;
            Maids.splice(pageFocus, 1);
            numPages -= 1;
            moveToPage(pageFocus - 1);
            OLDSUBMODE = "MAIN";
            toMAIN();
        } else {
            alert("This is your last page, you can not full empty the book!!!!!!!!!");
        }
    }
}
function delpageup(e) {
    e.preventDefault();
    baseInput("Are you sure you want delete this page?.");
    client(e);
}
function delpagemove(e) {
    e.preventDefault();
    if (clickX > areaW / 2 - 200 && clickX <= areaW / 2 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        okPBOut();
        cancelPBOver();
        theCanvas.style.cursor = "pointer";
    } else if (clickX > areaW / 2 && clickX <= areaW / 2 + 200 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        cancelPBOut();
        okPBOver();
        theCanvas.style.cursor = "pointer";
    } else {
        baseInput("Are you sure you want delete this page?.");
        theCanvas.style.cursor = "default";
    }
    client(e);
}
//-----Create new book
var bookType;
var creatingBook = false;
//Book xml Structure
var modelBook = new Object();
modelBook["id"] = "";
modelBook["type"] = "";
modelBook["x"] = "";
modelBook["y"] = "";
modelBook["associate"] = "";
modelBook["data"] = "";
modelBook["Title"] = "";
modelBook["Description"] = "";
modelBook["Extend"] = "";
modelBook["booksAllow"] = "";
modelBook["Public"] = "";
function newBook() {
    bookType = "NEW";
    toBOOKFORM();
}
//bOOK FORM
function toBOOKFORM() {
    endMove = false;
    delPageForms();
    formActiv = false;
    MODE = "EDITOR";
    OLDSUBMODE = "BOOKFORM";
    SUBMODE = "BOOKFORM";
    removeListeners();
    listenersList = new Array(bookformdown, bookformup, bookformmove);
    assignListeners();
    posBookX = -200;
    posBookXAv = 200;
    dirEditMain = -1;
    offsetYOpsMaid = 0;
    createMode = drawMenuBook;
    showPagesTween = setInterval(hideEditMaid, 33);
}
function bookformdown(e) {
    e.preventDefault();
    client(e);
    if (clickX > areaW / 2 - 200 && clickX <= areaW / 2 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        //delForms();
        createMode = null;
        returnToEditor();
    } else if (clickX > areaW / 2 && clickX <= areaW / 2 + 200 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        var tryName = false;
        var formatName = true;
        if (textArea.value.indexOf(" ") !== -1) {
            formatName = false;
        }
        for (var j in books) {
            if (books[j]["id"] === textArea.value) {
                tryName = true;
                break;
            }
        }
        if (tryName) {
            alert("This name exist!!!, try with another one");
        } else if (!formatName) {
            alert("The name can not contain special characters nor white spaces");
        } else {
            formActiv = true;
            //delForms();
            creatingBook = true;
            alert("Creating:" + env + homeRoot + textArea.value);
            var newBook = new cloneObject(modelBook);
            if (bookType === "NEW") {
                /*var newContents=new cloneObject (Maids[pageFocus]);
                 Maids[numPages]=newContents;*/
            } else {
                //Maids[numPages]=new Array;
            }
            newBook["id"] = textArea.value;
            newBook["associate"] = homeRoot + textArea.value;
            newBook["image"] = "";
            books[numBooks] = newBook;
            books[numBooks]["img"] = common.toolImages.avatarImg[1];
            numBooks += 1;
            toMainConfig = true;
            associateRecord();
        }
    }
}
function bookformup(e) {
    e.preventDefault();
    baseInput("Please introduce the name for the new 'bloc'.");
    client(e);
}
function bookformmove(e) {
    e.preventDefault();
    if (clickX > areaW / 2 - 200 && clickX <= areaW / 2 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        okPBOut();
        cancelPBOver();
        theCanvas.style.cursor = "pointer";
    } else if (clickX > areaW / 2 && clickX <= areaW / 2 + 200 && clickY >= areaH / 2 + 50 && clickY <= areaH / 2 + 100) {
        cancelPBOut();
        okPBOver();
        theCanvas.style.cursor = "pointer";
    } else {
        baseInput("Please introduce the name for the new 'bloc'.");
        theCanvas.style.cursor = "default";
    }
    client(e);
}
function drawMenuBook() {
    addInput("Please introduce the name for the new 'bloc'.");
}
//----------------
//---------language selection
var fontW = 80;
function drawMenuLanSel() {
    arrayLan.sort();
    for (var j in arrayLan) {
        context.fillStyle = "#1a1a1a";
        context.fillRect(areaW - 240, areaH - 120 - 40 * j, fontW, 39);
        drawText("normal 15px arial ", "middle", "center", "#ffffff", lanArray[arrayLan[j]], areaW - 200, areaH - 100 - 40 * j);
    }
}
var arrayTextAreasLan = new Array();
function drawTextLan() {
    context.fillStyle = "#2e2e2e";
    context.fillRect(0, 0, areaW, areaH);
    drawText("normal 25px arial ", "middle", "center", "#aaaaaa", "X", 40, areaH - 40);
    if (!formActiv) {
        formActiv = true;
        var formInput = document.createElement("div");
        formInput.style.overflow = "visible";
        formInput.style.position = 'absolute';
        formInput.style.left = 0;
        formInput.style.top = 0;
        document.body.appendChild(formInput);
        formInputCont.push(formInput);
        /*if(arrayConfig.length<=0){
         arrayConfig={Title:"",Description:"",Extend:"",booksAllow:"0"};
         }*/
        var cont = 0;
        arrayLan.sort();
        for (var j in arrayLan) {
            drawText("normal 25px arial ", "bottom", "", "#aaaaaa", lanArray[arrayLan[j]], 10, 210 + 100 * cont);
            if (document.createElement("input").webkitSpeech === undefined) {
                textArea = document.createElement("textArea");
            } else {
                textArea = document.createElement("input");
                textArea.webkitSpeech = "x-webkit-speech";
                textArea.setAttribute('onwebkitspeechchange', 'onChange(this.value)');
            }
            textArea.style.type = "text";
            textArea.style.position = "absolute";
            textArea.style.size = areaW;
            textArea.style.top = 210 + 100 * cont;
            textArea.id = j;
            formInput.style.left = 10;
            textArea.style.id = j;
            textArea.style.width = areaW - 200;
            textArea.style.height = 50;
            valueSpeech = "text";
            //textArea.value=maidSelect.data.text;
            if (maidSelect.data.text[arrayLan[j]] === undefined) {
                textArea.value = maidSelect.data.text.migration;
            } else {
                textArea.value = maidSelect.data.text[arrayLan[j]];
            }
            textAreaType = null;
            formInput.appendChild(textArea);
            arrayTextAreasLan.push(textArea);
            cont++;
        }

    } else {
        var cont = 0;
        for (var j in arrayTextAreasLan) {
            console.log(arrayTextAreasLan.length + " " + formInputCont.length + " " + arrayTextAreasLan[j].value);
            drawText("normal 25px arial ", "bottom", "", "#aaaaaa", lanArray[arrayLan[j]], 10, 210 + 100 * cont);
            arrayTextAreasLan[j].style.width = areaW - 200;
            cont++;
        }
    }


}

/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//-------2015

var endTrans = null;
document.addEventListener("transitionend", function(e) {
    if (endTrans !== null) {
        endTrans();
    }
}, false);
document.addEventListener('webkitTransitionEnd', function() {
    // the same above
    if (endTrans !==null) {
        endTrans();
    };
});


createHTMLPB = function() {
    var divHTMLPB = document.createElement("div");
    divHTMLPB.innerHTML = "HTML";
    divHTMLPB.className="HTMLPB";
    document.body.appendChild(divHTMLPB);
    divHTMLPB.onclick = function() {
        getHTML();
    };
};
var HTML = new Array();
var HTMLBG = "";
var lastHTML=null;
getHTML = function() {
    var htmlDiv = document.createElement("div");
    htmlDiv.id = "htmlDiv";
    htmlDiv.className = "htmlDiv generic_trans";
    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "<img src='img/cancel-circle.png' />";
    close.onclick = function() {
        closeDiv(htmlDiv);
    };
    var HTMLString = "";
    var HTMLStringInput = "";
    for (var j in HTML) {
        HTMLString += HTML[j];
        HTMLStringInput += HTML[j] + "\n";
    }
    if(HTMLBG!=""){
        htmlDiv.innerHTML = HTMLBG + HTMLString + "</div>";
    }else{
        htmlDiv.innerHTML = "<div style='height:100%;position:relative'>" + HTMLString + "</div>";
    }
    htmlDiv.appendChild(close);
    
    var showHTMLPB= document.createElement("div");
    showHTMLPB.className = "showHTMLPB";
    showHTMLPB.innerHTML = "Show HTML Code";
    showHTMLPB.onclick = function() {
        showHTML(htmlDiv);
    };
    htmlDiv.appendChild(showHTMLPB);

    if (lastHTML && HTMLSense == "RE") {
        htmlDiv.style.left = "-100%";
    }

    document.body.appendChild(htmlDiv);
    setTimeout(function() {
        if(lastHTML){
            if(HTMLSense=="AV"){
                lastHTML.style.left = "-100%";
                htmlDiv.style.left = "0px";
            }else{
                lastHTML.style.left = "100%";
                htmlDiv.style.left = "0px";
            }
            
        }else{
            htmlDiv.style.left = "0px";
        }
        endTrans = function() {
            if(lastHTML){
            document.body.removeChild(lastHTML);
            }
            lastHTML=null;
            endTrans = null;
            lastHTML=htmlDiv;
            if(!rePBHTML){
               reAvPB(); 
            }
        }
    }, 10);
};
closeDiv = function(div) {
    HTMLMODE = false;
    document.body.removeChild(avPBHTML);
    document.body.removeChild(rePBHTML);
    avPBHTML=null;
    rePBHTML=null;
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        document.body.removeChild(div);
        lastHTML=null;
        endTrans = null;
    };
};
var rePBHTML=null;
var avPBHTML=null;
reAvPB=function(){
    rePBHTML = document.createElement("div");
    avPBHTML = document.createElement("div");
    rePBHTML.className = "PB left";
    avPBHTML.className = "PB right";
    document.body.appendChild(avPBHTML);
    document.body.appendChild(rePBHTML);
    rePBHTML.innerHTML = "<";
    avPBHTML.innerHTML = ">";
    rePBHTML.onclick=function(){rePageHTML()};
    avPBHTML.onclick=function(){avPageHTML()};
}
var HTMLMODE=false;
var HTMLSense="AV";
avPageHTML=function(){
    HTMLBG="";
    HTMLSense="AV";
    HTMLMODE=true;
    clickX =window.innerWidth;
    avRePage();
}
rePageHTML=function(){
    HTMLBG="";
    HTMLSense="RE";
    HTMLMODE=true;
    clickX =0;
    avRePage();
}


showHTML=function(target_div){
    rePBHTML.style.display = "none";
    avPBHTML.style.display = "none";
    var htmlDiv = document.createElement("div");
    htmlDiv.id = "target_div";
    htmlDiv.className = "showHTML generic_trans";
    var close = document.createElement("div");
    close.className = "close";
    close.innerHTML = "<img src='img/cancel-circle.png' />";
    close.onclick = function() {
        closeDivHTML(htmlDiv);
    };
    var HTMLString = "\n\n";
    var HTMLStringInput = "\n\n";
    for (var j in HTML) {
        HTMLString += HTML[j]+ "\n\n";
        HTMLStringInput += HTML[j] + "\n\n";
    }
    var divHTMLInput = document.createElement("div");
    divHTMLInput.id = "divHTMLInput";
    divHTMLInput.className = "divHTMLInput";
    var HTMLInput = document.createElement("textarea");
    HTMLInput.className = "HTMLInput";
    if(HTMLBG!=""){
        HTMLInput.value =HTMLBG +"\n"+ HTMLString + "</div>";
    }else{
        HTMLInput.value ="<div style='height:" + maxHeight + "px;position:relative'>\n" + HTMLString + "</div>";
    }
    
    divHTMLInput.appendChild(HTMLInput);
    htmlDiv.appendChild(divHTMLInput);
    htmlDiv.appendChild(close);
    target_div.appendChild(htmlDiv);
    setTimeout(function() {
                htmlDiv.style.left = "0px";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
};
closeDivHTML = function(div) {
    rePBHTML.style.display = "block";
    avPBHTML.style.display = "block";
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
    };
};

/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//-------2015
var canvasFreeFocus=false;
var canvasFreeContainner = document.createElement("div");
canvasFreeContainner.id="canvasFreeContainner";
//var innerCanvasCont='<div  id="contCanvas" position: relative; top: 0px; left: 0px;z-index:0"></div>';
//canvasCont.innerHtml=innerCanvasCont;
var canvasFree = document.createElement("canvas");
canvasFree.id="canvasFree";
var contextFree = canvasFree.getContext("2d");
canvasFreeContainner.appendChild(canvasFree);
var freeToolDiv=null;

drawBallFree=function(x,y,r,color){
	contextFree.save();
	contextFree.beginPath();			
	contextFree.fillStyle=color;
	contextFree.arc(x, y, r, 0, Math.PI*2, true); 
	contextFree.fill();
	contextFree.closePath();
	contextFree.restore();
};
drawBallsFree=function(fillArray,r,color){
    contextFree.save();
    for (var j in fillArray) {
        contextFree.beginPath();
        contextFree.fillStyle = color;
        contextFree.arc(fillArray[j].x, fillArray[j].y, r, 0, Math.PI * 2, true);
        contextFree.fill();
        contextFree.closePath();
    }
    contextFree.restore();
};
drawLineFree=function(ini,end,borderThick,borderColor){
    contextFree.save();
    contextFree.strokeStyle = borderColor;
    contextFree.lineWidth = borderThick;
    contextFree.globalAlpha = 1;
    contextFree.beginPath();
    contextFree.moveTo(ini.x, ini.y);
    contextFree.lineTo(end.x, end.y);
    if(activeStrokeFree){
        contextFree.stroke();
    }
    contextFree.closePath();
    contextFree.restore();
}
var activeFillFree=true;
var activeStrokeFree=true;
var activeShowPointsFree=true;
fillLineFree=function(fillArray,fillColor,borderThick,borderColor){
    contextFree.save();
    contextFree.strokeStyle = borderColor;
    contextFree.lineWidth = borderThick;
    contextFree.fillStyle=fillColor;
    contextFree.globalAlpha = 1;
    contextFree.beginPath();
    contextFree.moveTo(fillArray[0].x, fillArray[0].y);
    for( var j in fillArray){
        contextFree.lineTo(fillArray[j].x, fillArray[j].y);
    }
    contextFree.closePath();
    if(activeFillFree){
        contextFree.fill();
    }
    if(activeStrokeFree){
        contextFree.stroke();
    }
    contextFree.restore();  
    drawLineFree(fillArray[j],fillArray[0],borderThick,borderColor);
}
canvasFreeResize=function(){
    canvasFree.width=canvasFreeContainner.offsetWidth;
    canvasFree.height=canvasFreeContainner.offsetHeight;
    renderFreeShape();
}
var freeOptions={
    "Grid": "createGrid",
    "Go": "createGrid",
    "Show Points": "showPoint",
    "Add Point": "addPoint",
    //"Remove Point": "removePoint",
    //"Move Point": "movePoint",
    "Fill": "fillShape",
    "Border": "borderShape",
    "Export": "ExportShape",
    "Reset": "resetFree",
    "New Shape": "newShape"
}

createFreeToolPB = function() {
    canvasFreeFocus=true;
    var divFreeToolPB = document.createElement("div");
    divFreeToolPB.innerHTML = "Shapes Tool";
    divFreeToolPB.className="FreeToolPB";
    document.body.appendChild(divFreeToolPB);
    divFreeToolPB.onclick = function() {
        createCanvasFreeTool();
    };
};
var closeFreeTool=null;
createCanvasFreeTool = function() {
    freeToolDiv = document.createElement("div");
    freeToolDiv.id = "freeToolDiv";
    freeToolDiv.className = "htmlDiv generic_trans";
    closeFreeTool = document.createElement("div");
    closeFreeTool.className = "close";
    closeFreeTool.innerHTML = "<img src='img/cancel-circle.png' />";
    closeFreeTool.onclick = function() {
        closeDivFreeTool(freeToolDiv);
    };
    //options create
    var optionsFreeDiv=document.createElement("div");
    optionsFreeDiv.id="optionsFreeDiv";
    for( var j in freeOptions){
        var opFree=document.createElement("div");
        opFree.className="generic_pb";
        opFree.id=j;
        opFree.onclick=setOptionFree;
        opFree.innerHTML=j;
        optionsFreeDiv.appendChild(opFree);
        switch (j) {
            case "Grid":
                var valueGrid = document.createElement("input");
                valueGrid.id = "valueGridFree";
                valueGrid.className = "";
                valueGrid.value = 20;
                valueGrid.style.width = "100";
                optionsFreeDiv.appendChild(valueGrid);
                break;
            case "Fill":
                var fillFree = document.createElement("input");
                fillFree.id = "valueFillFree";
                fillFree.className = "";
                fillFree.value = "#ff5f02";
                fillFree.style.width = "100";
                optionsFreeDiv.appendChild(fillFree);
                break;
            case "Border":
                    var borderFree = document.createElement("input");
                    borderFree.id = "valueBorderFree";
                    borderFree.className = "";
                    borderFree.value = "1";
                    borderFree.style.width = "100";
                    optionsFreeDiv.appendChild(borderFree);
                    var borderFreeColor = document.createElement("input");
                    borderFreeColor.id = "valueFillBorderFree";
                    borderFreeColor.className = "";
                    borderFreeColor.value = "#01e8e2";
                    borderFreeColor.style.width = "100";
                    borderFreeColor.style.marginLeft = "5px";
                    optionsFreeDiv.appendChild(borderFreeColor);
                break;
            default:
                break;
        }
        if(j==="Grid"){
            
        }
    }
    freeToolDiv.appendChild(closeFreeTool);
    freeToolDiv.appendChild(canvasFreeContainner);
    freeToolDiv.appendChild(optionsFreeDiv);
    document.body.appendChild(freeToolDiv);
    canvasFreeOffsetX=canvasFree.offsetLeft;
    canvasFreeOffsetY=canvasFree.offsetTop;
    if (gridFreeActive) {
        document.getElementById("Grid").className = "generic_pb_active";
    }
    activeFillFree=true
    activeStrokeFree=true;
    activeShowPointsFree=true;
    document.getElementById("Add Point").className = "generic_pb_active";
    document.getElementById("Show Points").className = "generic_pb_active";
    document.getElementById("Fill").className = "generic_pb_active";
    document.getElementById("Border").className = "generic_pb_active";
    setTimeout(function() {
        
            freeToolDiv.style.left = "0px";
        endTrans = function() {
            canvasFreeResize();
            endTrans = null;
        }
    }, 10);
};
closeDivFreeTool = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        canvasFreeFocus=false;;
        document.body.removeChild(div);
        endTrans = null;
    };
};
//--------------create free tool canvas
var lastOpFree="Add Point";
var valueGridFree=10;
var gridFreeActive=false;
setOptionFree=function(e){
    var op=e.target.id;
    switch (op) {
        case "Reset":
            resetFree();
        break;
        case "New Shape":
            newShape();
        break;
         case "Export":
            ExportShape();
        break;
        case "Grid":
            if (document.getElementById(op).className === "generic_pb") {
                document.getElementById(op).className = "generic_pb_active";

            } else {
                document.getElementById(op).className = "generic_pb";
            }
            gridFreeActive=!gridFreeActive;
            valueGridFree=Number(document.getElementById("valueGridFree").value);
            break;
        case "Go":
            document.getElementById("Grid").className = "generic_pb_active";
            valueGridFree=Number(document.getElementById("valueGridFree").value);
            gridFreeActive = true;
            break;
         case "Show Points":
            if (document.getElementById("Show Points").className === "generic_pb") {
                document.getElementById("Show Points").className = "generic_pb_active";

            } else {
                document.getElementById("Show Points").className = "generic_pb";
            }
            activeShowPointsFree=!activeShowPointsFree;
            break;   
        case "Fill":
            if (document.getElementById("Fill").className === "generic_pb") {
                document.getElementById("Fill").className = "generic_pb_active";

            } else {
                document.getElementById("Fill").className = "generic_pb";
            }
            activeFillFree=!activeFillFree;
            break;
        case "Border":
            if (document.getElementById("Border").className === "generic_pb") {
                document.getElementById("Border").className = "generic_pb_active";

            } else {
                document.getElementById("Border").className = "generic_pb";
            }
            activeStrokeFree=!activeStrokeFree;
            break;
        default:
            if(lastOpFree){
                document.getElementById(lastOpFree).className="generic_pb";
            }
            document.getElementById(op).className="generic_pb_active";
            lastOpFree=op;
            break;
    }
    renderFreeShape();
}
resetFree=function(){
    arrayShapes=new Array();
    arrayShapes.push(new Array());
    posArrayShapes=0;
}
createGrid = function(){
    
}
var shapeOpen=false;
var arrayShapes=new Array();
var arrayShapes=new Array();
var posArrayShapes=0;
arrayShapes[0]=new Array();
showPoint=function(){
    
}
newShape=function(){
    posArrayShapes++;
    pointsShape=new Array();
    arrayShapes.push(new Array());
    
}
addPoint = function(){
    if(!gridFreeActive){
        arrayShapes[posArrayShapes].push({'x':clickXFree-canvasFreeOffsetX,'y':clickYFree-canvasFreeOffsetY});
    }else{
        var posXREal=clickXFree-canvasFreeOffsetX;
        var posYREal=clickYFree-canvasFreeOffsetY;
        
        //por encima
        var posEntXUP=parseInt(posXREal/valueGridFree)*valueGridFree; 
        var posEntYUP=parseInt(posYREal/valueGridFree)*valueGridFree; 
        
        var posEntXDOWN=valueGridFree+(parseInt(posXREal/valueGridFree)*valueGridFree); 
        var posEntYDOWN=valueGridFree+(parseInt(posYREal/valueGridFree)*valueGridFree);
        var endX=0;
        var endY=0;
        if((posXREal-posEntXUP)>(posEntXDOWN-posXREal)){
            
            endX=posEntXDOWN;
        }else{
            endX=posEntXUP;
        }
        if((posYREal-posEntYUP)>(posEntYDOWN-posYREal)){
            endY=posEntYDOWN;
        }else{
            endY=posEntYUP;
        }
        
        arrayShapes[posArrayShapes].push({'x':endX,'y':endY});
    }
    
}
removePoint = function(){
    alert('removePoint');
}
movePoint = function(){
    alert('movePoint');
}
fillShape = function(){
    
}
borderShape = function(){
    
}
ExportShape = function(){
    alert('ExportShape');
    if (arrayShapes.length <= 0) {
        alert("No Shapes to export");
    } else {
        var minX = arrayShapes[0][0].x;
        var maxX = arrayShapes[0][0].x;
        var minY = arrayShapes[0][0].y;
        var maxY = arrayShapes[0][0].y;
        //get minx
        for (var k in arrayShapes) {
            for (var l in arrayShapes[k]) {
                minX = min(minX, arrayShapes[k][l].x);
                maxX = max(maxX, arrayShapes[k][l].x);
                minY = min(minY, arrayShapes[k][l].y);
                maxY = max(maxY, arrayShapes[k][l].y);
            }
        }
        var imageManipulationCanvas = document.createElement('canvas');
        imageManipulationCanvas.width = maxX - minX;
        imageManipulationCanvas.height = maxY - minY;
        var imageManipulationCtx = imageManipulationCanvas.getContext('2d');
        imageManipulationCtx.drawImage(canvasFree, minX, minY, maxX - minX, maxY - minY, 0, 0, maxX - minX, maxY - minY);
        drawImgCreated(imageManipulationCanvas.toDataURL());
        closeFreeTool.click();
    }
}
min=function(a,b){
    var sel=a<=b?a:b;
    return sel
}
max=function(a,b){
    var sel=a>=b?a:b;
    return sel
}
gridDraw=function(){
    contextFree.save();
    contextFree.strokeStyle = "#07aaff";
    contextFree.lineWidth = 1;
    var j = 0;
    contextFree.globalAlpha = .2;
    while (j * valueGridFree < canvasFree.width) {
        contextFree.beginPath();
        contextFree.moveTo(j * valueGridFree, 0);
        contextFree.lineTo(j * valueGridFree, canvasFree.height);
        contextFree.stroke();
        contextFree.closePath();
        j += 1;
    }
    j = 0;
    while (j * valueGridFree < canvasFree.height) {
        contextFree.beginPath();
        contextFree.moveTo(0, j * valueGridFree );
        contextFree.lineTo(canvasFree.width, j * valueGridFree);
        contextFree.stroke();
        contextFree.closePath();
        j += 1;
    }
    context.restore();
}
renderFreeShape=function(){
    if(document.getElementById("valueFillBorderFree")){
        var strokeColor = document.getElementById("valueFillBorderFree").value;
        var FillColor = document.getElementById("valueFillFree").value;
        var borderThick = document.getElementById("valueBorderFree").value;
        var fillArray = new Array();
        contextFree.clearRect(0, 0, canvasFree.width, canvasFree.height);
        if (gridFreeActive) {
            gridDraw();
        }
        for (var k in arrayShapes) {
            drawOneShape(arrayShapes[k], FillColor, borderThick, strokeColor);
        }
     }
}
drawOneShape = function(fillArray,FillColor, borderThick, strokeColor) {
    if (fillArray.length > 1) {
        fillLineFree(fillArray, FillColor, borderThick, strokeColor);
    }
    if (activeShowPointsFree) {
        drawBallsFree(fillArray, 8, "#01e8e2");
    }
}
 var clickYFree=0;
 var clickXFree=0;
 var moveXFree=0;
 var moveYFree=0;
 var canvasFreeOffsetX=0;
 var canvasFreeOffsetY=0;
function clientFree(e) {
    e.preventDefault();
    if ("ontouchmove" in document.documentElement) {
        clickYFree = e.touches[0].clientY;
        clickXFree = e.touches[0].clientX;
    } else {
        clickYFree = e.clientY;
        clickXFree = e.clientX;
    }
    return clickXFree, clickYFree;
}
canvasFreeDown=function(e){
    e.preventDefault();
    clientFree(e);
    moveXFree = clickXFree;
    moveYFree = clickYFree;
    eval(freeOptions[lastOpFree])();
    renderFreeShape();
}
canvasFreeUp=function(e){
    renderFreeShape();
}
canvasFreeMove=function(e){
    
}
//addlisteners
function assignListenersFree() {
    if ("ontouchmove" in document.documentElement) {
        canvasFree.addEventListener("touchstart", canvasFreeDown, false);
        canvasFree.addEventListener("touchend", canvasFreeUp, false);
        canvasFree.addEventListener("touchmove", canvasFreeMove, false);

    } else {
        canvasFree.addEventListener("mousedown", canvasFreeDown, false);
        canvasFree.addEventListener("mouseup", canvasFreeUp, false);
        canvasFree.addEventListener("mousemove", canvasFreeMove, false);
    }
}
function removeListenersFree() {
    if ("ontouchmove" in document.documentElement) {
        canvasFree.removeEventListener("touchstart", canvasFreeDown, false);
        canvasFree.removeEventListener("touchend", canvasFreeUp, false);
        canvasFree.removeEventListener("touchmove", canvasFreeMove, false);

    } else {
        canvasFree.removeEventListener("mousedown", canvasFreeDown, false);
        canvasFree.removeEventListener("mouseup", canvasFreeUp, false);
        canvasFree.removeEventListener("mousemove", canvasFreeMove, false);
    }
}
assignListenersFree();

/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//-------2015
var maintenanceRots={
  "see":{"es":"Ver","en":"See"},
  "eliminar":{"es":"Eliminar","en":"Delete"} ,
  "usar":{"es":"Importar","en":"Import"},
  "list":{"es":"Todas las im&aacute;genes","en":"All Images"},
  "confirm":{"es":"Vas a eliminar la siguiente imagen","en":"You are going to delete next Image"},
  "cancel":{"es":"Cancelar","en":"Cancel"}
};
var maintenanceOptions={
    "All Images": "allImages",
    "x1": null,
    "x2": null,
    "x3": null,
    "x4": null,
    "x5": null,
    "x6": null,
    "x7": null,
    "x8": null,
    "x9": null,
    "x10": null,
    "x11": null,
    "x12": null
}
createMaintenancePB = function() {
    var divMaintenancePB = document.createElement("div");
    divMaintenancePB.innerHTML = "Maintenance";
    divMaintenancePB.className="MaintenancePB";
    document.body.appendChild(divMaintenancePB);
    divMaintenancePB.onclick = function() {
        createMaintenance();
    };
};
var closeMaintenancePB=null;
var maintenanceDiv=null;
createMaintenance = function() {
    maintenanceDiv = document.createElement("div");
    maintenanceDiv.id = "maintenanceDiv";
    maintenanceDiv.className = "htmlDiv generic_trans";
    maintenanceDiv.innerHTML="<div style='width:100%;padding:20px;font-family:arial;text-align:center'>Maintennance</div>"
    closeMaintenancePB = document.createElement("div");
    closeMaintenancePB.className = "close";
    closeMaintenancePB.innerHTML = "<img src='img/cancel-circle.png' />";
    closeMaintenancePB.onclick = function() {
        closeMaintenance(maintenanceDiv);
    };
    //options create
    for( var j in maintenanceOptions){
        var opMaintenance=document.createElement("div");
        opMaintenance.className="generic_pb_2";
        opMaintenance.id=j;
        if(maintenanceOptions[j]===null){
            opMaintenance.style.opacity=.4;
        }else{
            opMaintenance.onclick=setOptionMaintenance;
        }
        
        opMaintenance.innerHTML=j;
        maintenanceDiv.appendChild(opMaintenance);
        switch (j) {
            /*case "Grid":
                var valueGrid = document.createElement("input");
                valueGrid.id = "valueGridFree";
                valueGrid.className = "";
                valueGrid.value = 20;
                valueGrid.style.width = "100";
                optionsFreeDiv.appendChild(valueGrid);
                break;*/
            default:
                break;
        }
    }
    maintenanceDiv.appendChild(closeMaintenancePB);
    document.body.appendChild(maintenanceDiv);
    setTimeout(function() {
            maintenanceDiv.style.left = "0px";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
};
closeMaintenance = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
    };
};
//--------------create free tool canvas
var lastOpMain=null;
setOptionMaintenance=function(e){
    var op=e.target.id;
    switch (op) {
        default:
            if(lastOpMain){
                document.getElementById(lastOpMain).className="generic_pb_2";
            }
            document.getElementById(op).className="generic_pb_2_active";
            lastOpMain=op;
             eval(maintenanceOptions[lastOpMain])();
            break;
    }
}

//--------maintenance functions

//-----clean Images
var cleanImgDiv=null;
var imagesList={};
allImages=function(){
    cleanImgDiv = document.createElement("div");
    cleanImgDiv.id = "maintenanceDiv";
    cleanImgDiv.className = "htmlDiv generic_trans";
    cleanImgDiv.innerHTML="<div style='width:100%;padding:20px;font-family:arial;text-align:center'>"+maintenanceRots["list"][lan]+"</div>"
    closeCleanImgPB = document.createElement("div");
    closeCleanImgPB.className = "close";
    closeCleanImgPB.innerHTML = "<img src='img/cancel-circle.png' />";
    closeCleanImgPB.onclick = function() {
        closeCleanImages(cleanImgDiv);
    };
    var refresh=new Date().getTime();
    $.ajax({
        url: "./ed/imgList.php?refresh=" + refresh,
        dataType: "text",
        success: function(data) {
            var clipsArray = data.split(",");
            clipsArray.pop();
            for (var j in clipsArray) {
                imagesList[j] = clipsArray[j];
            }
            //options create
            for (var j in imagesList) {
                var imgItem = document.createElement("div");
                imgItem.className = "imgItemContainner";
                imgItem.id = "itemImg_"+j;
                //datas
                var dataImg=imagesList[j].split("::");
                if (imagesList[j] === null) {
                    imagesList.style.opacity = .4;
                } else {
                    imagesList.onclick = setOptionMaintenance;
                }
                
                var img=document.createElement("div");
                img.className = "generic_img";
                img.style.backgroundImage="url("+dataImg[0]+")";
                
                var rots=dataImg[1].split("/");
                rots.pop();
                if(rots[1]===undefined){
                    rots[1]="Home";
                }
                
                var origenImg=document.createElement("div");
                origenImg.className="generic_img_rot1";
                origenImg.innerHTML=rots[0];
                
                var bloc=document.createElement("div");
                bloc.className="generic_img_rot2";
                bloc.innerHTML=rots[1];
                
                
                
                var opsImg=document.createElement("div");
                opsImg.className="generic_img_opsImg";
                if(dataImg[0].indexOf("avatar.png")===-1){
                    opsImg.innerHTML="<ul class='opsImgUl' >\
                                    <li><div class='ops_img_pb' onclick='delImg(\""+dataImg[0]+"\",\""+imgItem.id+"\")'>"+maintenanceRots["eliminar"][lan]+"</div>\
                                    </li>\
                                    <li><div class='ops_img_pb' onclick='useImg(\""+dataImg[0]+"\")'>"+maintenanceRots["usar"][lan]+"</div>\
                                    </li>\
                                </ul>";
                }else{
                    opsImg.innerHTML="<ul class='opsImgUl' >\
                                    <li style='font-family:arial'>avatar.png</div>\
                                    </li>\
                                    <li><div class='ops_img_pb' onclick='useImg(\""+dataImg[0]+"\")'>"+maintenanceRots["usar"][lan]+"</div>\
                                    </li>\
                                </ul>";
                }
                
                imgItem.appendChild(img);
                imgItem.appendChild(origenImg);
                imgItem.appendChild(bloc);
                imgItem.appendChild(opsImg);
                cleanImgDiv.appendChild(imgItem);
                
                switch (j) {
                    /*case "Grid":
                     var valueGrid = document.createElement("input");
                     valueGrid.id = "valueGridFree";
                     valueGrid.className = "";
                     valueGrid.value = 20;
                     valueGrid.style.width = "100";
                     optionsFreeDiv.appendChild(valueGrid);
                     break;*/
                    default:
                        break;
                }
            }
        }
    }); 
   
    cleanImgDiv.appendChild(closeCleanImgPB);
    document.body.appendChild(cleanImgDiv);
    setTimeout(function() {
            cleanImgDiv.style.left = "0px";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
}
closeCleanImages = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
        if(useImgMaintanance){
            useImgMaintanance=false;
            closeMaintenancePB.click();
        }
    };
};
var useImgMaintanance=false;
useImg=function(_img){
    useImgMaintanance=true;
    var newItem = new cloneObject(modelMaid);
    newItem["function"] = "ImgLoader";
    newItem["id"] = "clip" + (Maids[pageFocus].length + 1);
    newItem["type"] = "genericLoaderImg/generic";
    newItem["data"]["img"] = _img;
    if (!imgLibrary[newItem["data"]["img"]]) {
        var rt = new Image();
        rt.crossOrigin = 'crossdomain.xml';
        rt.src = proxy + newItem["data"]["img"];
        rt.onload = function() {
            imgLibrary[newItem["data"]["img"]] = rt;
            newItem["x"] = areaW / 2 - rt.naturalWidth / 2;
            newItem["y"] = areaH / 2 - rt.naturalHeight / 2;
            newItem["w"] = rt.naturalWidth;
            newItem["h"] = rt.naturalHeight;
            newItem["data"]["width"] = rt.naturalWidth;
            newItem["data"]["height"] = rt.naturalHeight;
            maidSelect = newItem;
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            Maids[pageFocus].push(newItem);
            closeCleanImgPB.click();
            returnToEditor();
        }
        rt.onerror = function() {
            imgLibrary[newItem["data"]["img"]] = common.toolImages.errorImg[1];
            newItem["x"] = areaW / 2 - rt.naturalWidth / 2;
            newItem["y"] = areaH / 2 - rt.naturalHeight / 2;
            newItem["w"] = rt.naturalWidth;
            newItem["h"] = rt.naturalHeight;
            newItem["data"]["width"] = rt.naturalWidth;
            newItem["data"]["height"] = rt.naturalHeight;
            maidSelect = newItem;
            dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
            Maids[pageFocus].push(newItem);
            closeCleanImgPB.click();
            returnToEditor();
        }
    } else {
        newItem["x"] = areaW / 2 - imgLibrary[newItem["data"]["img"]].naturalWidth / 2;
        newItem["y"] = areaH / 2 - imgLibrary[newItem["data"]["img"]].naturalHeight / 2;
        newItem["w"] = imgLibrary[newItem["data"]["img"]].naturalWidth;
        newItem["h"] = imgLibrary[newItem["data"]["img"]].naturalHeight;
        newItem["data"]["width"] = imgLibrary[newItem["data"]["img"]].naturalWidth;
        newItem["data"]["height"] = imgLibrary[newItem["data"]["img"]].naturalHeight;
        maidSelect = newItem;
        dataMode = new Array(Number(maidSelect["x"]), Number(maidSelect["y"]), Number(maidSelect["data"]["width"]), Number(maidSelect["data"]["height"]));
        Maids[pageFocus].push(newItem);
        closeCleanImgPB.click();
        returnToEditor();
    }
}
seeImg=function(_img){
    alert(_img);
}
var closeDelImgPB=null;
var delImgDiv=null;
delImg=function(_img,_item){
    delImgDiv = document.createElement("div");
    delImgDiv.id = "delImgDiv";
    delImgDiv.className = "htmlDiv generic_trans";
    delImgDiv.innerHTML="<div style='padding:20px;margin:20px;font-family:arial;text-align:center'>"+maintenanceRots["confirm"][lan]+"</div>"
    closeDelImgPB = document.createElement("div");
    closeDelImgPB.className = "close";
    closeDelImgPB.innerHTML = "<img src='img/cancel-circle.png' />";
    closeDelImgPB.onclick = function() {
        closeDelImg(delImgDiv);
    };
    
    
    var imgContainner= document.createElement("div");
    imgContainner.className = "imgDelete";
    imgContainner.style.backgroundImage="url("+_img+")";
    
    var confirmItem = document.createElement("div");
    confirmItem.className = "confirmItemContainner";
               
    var cancelPB = document.createElement("div");
    cancelPB.className = "generic_pb";
    cancelPB.innerHTML = maintenanceRots["cancel"][lan];
    cancelPB.onclick=function(){
        closeDelImgPB.click();
    }
    var confirmPB = document.createElement("div");
    confirmPB.className = "generic_pb";
    confirmPB.innerHTML = maintenanceRots["eliminar"][lan];
    confirmPB.onclick=function(){
        defDelImgPB(_img,_item);
    }
           confirmItem.appendChild(confirmPB); 
           confirmItem.appendChild(cancelPB); 
    
    
    delImgDiv.appendChild(closeDelImgPB);
    delImgDiv.appendChild(imgContainner);
    delImgDiv.appendChild(confirmItem);
    document.body.appendChild(delImgDiv);
    setTimeout(function() {
            delImgDiv.style.left = "0px";
        endTrans = function() {
            endTrans = null;
        }
    }, 10);
}
closeDelImg = function(div) {
    div.style.overflow = "hidden";
    div.style.left = "-100%";
    endTrans = function() {
        document.body.removeChild(div);
        endTrans = null;
    };
};
defDelImgPB=function(_img,_item){
    var localRoot=_img.split("rmt/");
    if (permission) {
        $.ajax({
            url: "./ed/delImg.php?img=../rmt/" + localRoot[1],
            dataType: "text",
            success: function(data) {
                var itemToDel = document.getElementById(_item);
                cleanImgDiv.removeChild(itemToDel);
                closeDelImgPB.click();
            }
        })
    } else {
        alert("You are in a demo, you can not delete contents!!!!");
    }
    
}



